
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000713c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040713c  0040713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00407144  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000490  204009d0  00407b14  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400e60  00407fa4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402e60  00409fa4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002967a  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a35  00000000  00000000  0004a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c69b  00000000  00000000  0004fb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001270  00000000  00000000  0005c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013f8  00000000  00000000  0005d411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027735  00000000  00000000  0005e809  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019617  00000000  00000000  00085f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096d51  00000000  00000000  0009f555  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003910  00000000  00000000  001362a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 2e 40 20 b9 14 40 00 b7 14 40 00 b7 14 40 00     `.@ ..@...@...@.
  400010:	b7 14 40 00 b7 14 40 00 b7 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 18 40 00 b7 14 40 00 00 00 00 00 31 19 40 00     ..@...@.....1.@.
  40003c:	99 19 40 00 b7 14 40 00 b7 14 40 00 31 3a 40 00     ..@...@...@.1:@.
  40004c:	85 38 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     .8@...@...@...@.
  40005c:	b7 14 40 00 b7 14 40 00 00 00 00 00 a9 11 40 00     ..@...@.......@.
  40006c:	bd 11 40 00 d1 11 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  40007c:	b7 14 40 00 e5 11 40 00 f9 11 40 00 b7 14 40 00     ..@...@...@...@.
  40008c:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  40009c:	b7 14 40 00 f5 36 40 00 b7 14 40 00 b7 14 40 00     ..@..6@...@...@.
  4000ac:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  4000bc:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  4000cc:	b7 14 40 00 00 00 00 00 b7 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  4000ec:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  4000fc:	b7 14 40 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ..@...@...@...@.
  40010c:	b7 14 40 00 b7 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b7 14 40 00 b7 14 40 00 b7 14 40 00     ......@...@...@.
  40012c:	b7 14 40 00 b7 14 40 00 00 00 00 00 b7 14 40 00     ..@...@.......@.
  40013c:	b7 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00407144 	.word	0x00407144

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407144 	.word	0x00407144
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00407144 	.word	0x00407144
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	204009ec 	.word	0x204009ec

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	204009ec 	.word	0x204009ec

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009ec 	.word	0x204009ec

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	204009ec 	.word	0x204009ec

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	0040132d 	.word	0x0040132d

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_set_framebuffer+0x8>)
  400792:	6018      	str	r0, [r3, #0]
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	204009f0 	.word	0x204009f0

0040079c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4007a4:	5442      	strb	r2, [r0, r1]
  4007a6:	4770      	bx	lr
  4007a8:	204009f0 	.word	0x204009f0

004007ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4007ac:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4007b4:	5c40      	ldrb	r0, [r0, r1]
  4007b6:	4770      	bx	lr
  4007b8:	204009f0 	.word	0x204009f0

004007bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4007c0:	1884      	adds	r4, r0, r2
  4007c2:	2c80      	cmp	r4, #128	; 0x80
  4007c4:	dd02      	ble.n	4007cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4007c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4007ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4007cc:	b322      	cbz	r2, 400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4007ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4007d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4007d4:	2601      	movs	r6, #1
  4007d6:	fa06 f101 	lsl.w	r1, r6, r1
  4007da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4007dc:	2b01      	cmp	r3, #1
  4007de:	d01d      	beq.n	40081c <gfx_mono_generic_draw_horizontal_line+0x60>
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d035      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x94>
  4007e4:	2b02      	cmp	r3, #2
  4007e6:	d117      	bne.n	400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4007e8:	3801      	subs	r0, #1
  4007ea:	b2c7      	uxtb	r7, r0
  4007ec:	19d4      	adds	r4, r2, r7
  4007ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4007f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4007f4:	f04f 0900 	mov.w	r9, #0
  4007f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007fc:	4621      	mov	r1, r4
  4007fe:	4628      	mov	r0, r5
  400800:	47d0      	blx	sl
			temp ^= pixelmask;
  400802:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400806:	464b      	mov	r3, r9
  400808:	b2d2      	uxtb	r2, r2
  40080a:	4621      	mov	r1, r4
  40080c:	4628      	mov	r0, r5
  40080e:	47c0      	blx	r8
  400810:	3c01      	subs	r4, #1
  400812:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400814:	42bc      	cmp	r4, r7
  400816:	d1f1      	bne.n	4007fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40081c:	3801      	subs	r0, #1
  40081e:	b2c7      	uxtb	r7, r0
  400820:	19d4      	adds	r4, r2, r7
  400822:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400824:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400828:	f04f 0900 	mov.w	r9, #0
  40082c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400830:	4621      	mov	r1, r4
  400832:	4628      	mov	r0, r5
  400834:	47d0      	blx	sl
			temp |= pixelmask;
  400836:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40083a:	464b      	mov	r3, r9
  40083c:	b2d2      	uxtb	r2, r2
  40083e:	4621      	mov	r1, r4
  400840:	4628      	mov	r0, r5
  400842:	47c0      	blx	r8
  400844:	3c01      	subs	r4, #1
  400846:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400848:	42bc      	cmp	r4, r7
  40084a:	d1f1      	bne.n	400830 <gfx_mono_generic_draw_horizontal_line+0x74>
  40084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400850:	3801      	subs	r0, #1
  400852:	b2c7      	uxtb	r7, r0
  400854:	19d4      	adds	r4, r2, r7
  400856:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400858:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40085c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40085e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400862:	4621      	mov	r1, r4
  400864:	4628      	mov	r0, r5
  400866:	47c0      	blx	r8
			temp &= ~pixelmask;
  400868:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40086c:	2300      	movs	r3, #0
  40086e:	b2d2      	uxtb	r2, r2
  400870:	4621      	mov	r1, r4
  400872:	4628      	mov	r0, r5
  400874:	47c8      	blx	r9
  400876:	3c01      	subs	r4, #1
  400878:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40087a:	42bc      	cmp	r4, r7
  40087c:	d1f1      	bne.n	400862 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400882:	bf00      	nop
  400884:	00400abd 	.word	0x00400abd
  400888:	004009b9 	.word	0x004009b9

0040088c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40088c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400890:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400894:	b18b      	cbz	r3, 4008ba <gfx_mono_generic_draw_filled_rect+0x2e>
  400896:	461c      	mov	r4, r3
  400898:	4690      	mov	r8, r2
  40089a:	4606      	mov	r6, r0
  40089c:	1e4d      	subs	r5, r1, #1
  40089e:	b2ed      	uxtb	r5, r5
  4008a0:	442c      	add	r4, r5
  4008a2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4008a4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4008c0 <gfx_mono_generic_draw_filled_rect+0x34>
  4008a8:	463b      	mov	r3, r7
  4008aa:	4642      	mov	r2, r8
  4008ac:	4621      	mov	r1, r4
  4008ae:	4630      	mov	r0, r6
  4008b0:	47c8      	blx	r9
  4008b2:	3c01      	subs	r4, #1
  4008b4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4008b6:	42ac      	cmp	r4, r5
  4008b8:	d1f6      	bne.n	4008a8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4008ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008be:	bf00      	nop
  4008c0:	004007bd 	.word	0x004007bd

004008c4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4008c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008c8:	b083      	sub	sp, #12
  4008ca:	4604      	mov	r4, r0
  4008cc:	4688      	mov	r8, r1
  4008ce:	4691      	mov	r9, r2
  4008d0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4008d2:	7a5b      	ldrb	r3, [r3, #9]
  4008d4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008d8:	2100      	movs	r1, #0
  4008da:	9100      	str	r1, [sp, #0]
  4008dc:	4649      	mov	r1, r9
  4008de:	4640      	mov	r0, r8
  4008e0:	4d21      	ldr	r5, [pc, #132]	; (400968 <gfx_mono_draw_char+0xa4>)
  4008e2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4008e4:	f89b 3000 	ldrb.w	r3, [fp]
  4008e8:	b113      	cbz	r3, 4008f0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4008ea:	b003      	add	sp, #12
  4008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008f0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008f4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008f6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4008fa:	bf18      	it	ne
  4008fc:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4008fe:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400902:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400906:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400908:	fb17 f70a 	smulbb	r7, r7, sl
  40090c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400910:	f8db 3004 	ldr.w	r3, [fp, #4]
  400914:	fa13 f787 	uxtah	r7, r3, r7
  400918:	e01f      	b.n	40095a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40091a:	0064      	lsls	r4, r4, #1
  40091c:	b2e4      	uxtb	r4, r4
  40091e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400920:	b2eb      	uxtb	r3, r5
  400922:	429e      	cmp	r6, r3
  400924:	d910      	bls.n	400948 <gfx_mono_draw_char+0x84>
  400926:	b2eb      	uxtb	r3, r5
  400928:	eb08 0003 	add.w	r0, r8, r3
  40092c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40092e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400932:	bf08      	it	eq
  400934:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400938:	f014 0f80 	tst.w	r4, #128	; 0x80
  40093c:	d0ed      	beq.n	40091a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40093e:	2201      	movs	r2, #1
  400940:	4649      	mov	r1, r9
  400942:	4b0a      	ldr	r3, [pc, #40]	; (40096c <gfx_mono_draw_char+0xa8>)
  400944:	4798      	blx	r3
  400946:	e7e8      	b.n	40091a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400948:	f109 0901 	add.w	r9, r9, #1
  40094c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400950:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400954:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400958:	d0c7      	beq.n	4008ea <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40095a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40095e:	2e00      	cmp	r6, #0
  400960:	d0f2      	beq.n	400948 <gfx_mono_draw_char+0x84>
  400962:	2500      	movs	r5, #0
  400964:	462c      	mov	r4, r5
  400966:	e7de      	b.n	400926 <gfx_mono_draw_char+0x62>
  400968:	0040088d 	.word	0x0040088d
  40096c:	00400a59 	.word	0x00400a59

00400970 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400974:	4604      	mov	r4, r0
  400976:	4690      	mov	r8, r2
  400978:	461d      	mov	r5, r3
  40097a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40097c:	4f0d      	ldr	r7, [pc, #52]	; (4009b4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40097e:	460e      	mov	r6, r1
  400980:	e008      	b.n	400994 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400982:	7a6a      	ldrb	r2, [r5, #9]
  400984:	3201      	adds	r2, #1
  400986:	4442      	add	r2, r8
  400988:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40098c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40098e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400992:	b16b      	cbz	r3, 4009b0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400994:	7820      	ldrb	r0, [r4, #0]
  400996:	280a      	cmp	r0, #10
  400998:	d0f3      	beq.n	400982 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40099a:	280d      	cmp	r0, #13
  40099c:	d0f7      	beq.n	40098e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40099e:	462b      	mov	r3, r5
  4009a0:	4642      	mov	r2, r8
  4009a2:	4649      	mov	r1, r9
  4009a4:	47b8      	blx	r7
			x += font->width;
  4009a6:	7a2b      	ldrb	r3, [r5, #8]
  4009a8:	4499      	add	r9, r3
  4009aa:	fa5f f989 	uxtb.w	r9, r9
  4009ae:	e7ee      	b.n	40098e <gfx_mono_draw_string+0x1e>
}
  4009b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009b4:	004008c5 	.word	0x004008c5

004009b8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4009b8:	b570      	push	{r4, r5, r6, lr}
  4009ba:	4604      	mov	r4, r0
  4009bc:	460d      	mov	r5, r1
  4009be:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4009c0:	b91b      	cbnz	r3, 4009ca <gfx_mono_ssd1306_put_byte+0x12>
  4009c2:	4b0d      	ldr	r3, [pc, #52]	; (4009f8 <gfx_mono_ssd1306_put_byte+0x40>)
  4009c4:	4798      	blx	r3
  4009c6:	42b0      	cmp	r0, r6
  4009c8:	d015      	beq.n	4009f6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4009ca:	4632      	mov	r2, r6
  4009cc:	4629      	mov	r1, r5
  4009ce:	4620      	mov	r0, r4
  4009d0:	4b0a      	ldr	r3, [pc, #40]	; (4009fc <gfx_mono_ssd1306_put_byte+0x44>)
  4009d2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4009d4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4009d8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4009dc:	4c08      	ldr	r4, [pc, #32]	; (400a00 <gfx_mono_ssd1306_put_byte+0x48>)
  4009de:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4009e0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4009e4:	f040 0010 	orr.w	r0, r0, #16
  4009e8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4009ea:	f005 000f 	and.w	r0, r5, #15
  4009ee:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4009f0:	4630      	mov	r0, r6
  4009f2:	4b04      	ldr	r3, [pc, #16]	; (400a04 <gfx_mono_ssd1306_put_byte+0x4c>)
  4009f4:	4798      	blx	r3
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
  4009f8:	004007ad 	.word	0x004007ad
  4009fc:	0040079d 	.word	0x0040079d
  400a00:	00400ac9 	.word	0x00400ac9
  400a04:	00400ce9 	.word	0x00400ce9

00400a08 <gfx_mono_ssd1306_init>:
{
  400a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400a0c:	480d      	ldr	r0, [pc, #52]	; (400a44 <gfx_mono_ssd1306_init+0x3c>)
  400a0e:	4b0e      	ldr	r3, [pc, #56]	; (400a48 <gfx_mono_ssd1306_init+0x40>)
  400a10:	4798      	blx	r3
	ssd1306_init();
  400a12:	4b0e      	ldr	r3, [pc, #56]	; (400a4c <gfx_mono_ssd1306_init+0x44>)
  400a14:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400a16:	2040      	movs	r0, #64	; 0x40
  400a18:	4b0d      	ldr	r3, [pc, #52]	; (400a50 <gfx_mono_ssd1306_init+0x48>)
  400a1a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a1c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a1e:	f04f 0801 	mov.w	r8, #1
  400a22:	462f      	mov	r7, r5
  400a24:	4e0b      	ldr	r6, [pc, #44]	; (400a54 <gfx_mono_ssd1306_init+0x4c>)
{
  400a26:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a28:	4643      	mov	r3, r8
  400a2a:	463a      	mov	r2, r7
  400a2c:	b2e1      	uxtb	r1, r4
  400a2e:	4628      	mov	r0, r5
  400a30:	47b0      	blx	r6
  400a32:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400a34:	2c80      	cmp	r4, #128	; 0x80
  400a36:	d1f7      	bne.n	400a28 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a38:	3501      	adds	r5, #1
  400a3a:	b2ed      	uxtb	r5, r5
  400a3c:	2d04      	cmp	r5, #4
  400a3e:	d1f2      	bne.n	400a26 <gfx_mono_ssd1306_init+0x1e>
  400a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a44:	204009f4 	.word	0x204009f4
  400a48:	00400791 	.word	0x00400791
  400a4c:	00400b09 	.word	0x00400b09
  400a50:	00400ac9 	.word	0x00400ac9
  400a54:	004009b9 	.word	0x004009b9

00400a58 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400a58:	09c3      	lsrs	r3, r0, #7
  400a5a:	d12a      	bne.n	400ab2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400a5c:	291f      	cmp	r1, #31
  400a5e:	d828      	bhi.n	400ab2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a64:	4614      	mov	r4, r2
  400a66:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400a68:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400a6a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400a6e:	2201      	movs	r2, #1
  400a70:	fa02 f701 	lsl.w	r7, r2, r1
  400a74:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400a78:	4601      	mov	r1, r0
  400a7a:	4630      	mov	r0, r6
  400a7c:	4b0d      	ldr	r3, [pc, #52]	; (400ab4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400a7e:	4798      	blx	r3
  400a80:	4602      	mov	r2, r0
	switch (color) {
  400a82:	2c01      	cmp	r4, #1
  400a84:	d009      	beq.n	400a9a <gfx_mono_ssd1306_draw_pixel+0x42>
  400a86:	b164      	cbz	r4, 400aa2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400a88:	2c02      	cmp	r4, #2
  400a8a:	d00e      	beq.n	400aaa <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400a8c:	2300      	movs	r3, #0
  400a8e:	4629      	mov	r1, r5
  400a90:	4630      	mov	r0, r6
  400a92:	4c09      	ldr	r4, [pc, #36]	; (400ab8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400a94:	47a0      	blx	r4
  400a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400a9a:	ea48 0200 	orr.w	r2, r8, r0
  400a9e:	b2d2      	uxtb	r2, r2
		break;
  400aa0:	e7f4      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400aa2:	ea20 0207 	bic.w	r2, r0, r7
  400aa6:	b2d2      	uxtb	r2, r2
		break;
  400aa8:	e7f0      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400aaa:	ea88 0200 	eor.w	r2, r8, r0
  400aae:	b2d2      	uxtb	r2, r2
		break;
  400ab0:	e7ec      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
  400ab2:	4770      	bx	lr
  400ab4:	004007ad 	.word	0x004007ad
  400ab8:	004009b9 	.word	0x004009b9

00400abc <gfx_mono_ssd1306_get_byte>:
{
  400abc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400abe:	4b01      	ldr	r3, [pc, #4]	; (400ac4 <gfx_mono_ssd1306_get_byte+0x8>)
  400ac0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400ac2:	bd08      	pop	{r3, pc}
  400ac4:	004007ad 	.word	0x004007ad

00400ac8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400ac8:	b538      	push	{r3, r4, r5, lr}
  400aca:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400acc:	2208      	movs	r2, #8
  400ace:	4b09      	ldr	r3, [pc, #36]	; (400af4 <ssd1306_write_command+0x2c>)
  400ad0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400ad2:	4c09      	ldr	r4, [pc, #36]	; (400af8 <ssd1306_write_command+0x30>)
  400ad4:	2101      	movs	r1, #1
  400ad6:	4620      	mov	r0, r4
  400ad8:	4b08      	ldr	r3, [pc, #32]	; (400afc <ssd1306_write_command+0x34>)
  400ada:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400adc:	2301      	movs	r3, #1
  400ade:	461a      	mov	r2, r3
  400ae0:	4629      	mov	r1, r5
  400ae2:	4620      	mov	r0, r4
  400ae4:	4c06      	ldr	r4, [pc, #24]	; (400b00 <ssd1306_write_command+0x38>)
  400ae6:	47a0      	blx	r4
	delay_us(10);
  400ae8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400aec:	4b05      	ldr	r3, [pc, #20]	; (400b04 <ssd1306_write_command+0x3c>)
  400aee:	4798      	blx	r3
  400af0:	bd38      	pop	{r3, r4, r5, pc}
  400af2:	bf00      	nop
  400af4:	400e1000 	.word	0x400e1000
  400af8:	40008000 	.word	0x40008000
  400afc:	004005c9 	.word	0x004005c9
  400b00:	004005df 	.word	0x004005df
  400b04:	20400001 	.word	0x20400001

00400b08 <ssd1306_init>:
{
  400b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b0c:	4d66      	ldr	r5, [pc, #408]	; (400ca8 <ssd1306_init+0x1a0>)
  400b0e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400b12:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b14:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b18:	4b64      	ldr	r3, [pc, #400]	; (400cac <ssd1306_init+0x1a4>)
  400b1a:	2708      	movs	r7, #8
  400b1c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b1e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b22:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b24:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b28:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b2a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b2c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b30:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400b32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b36:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b38:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400b3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b3e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400b40:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b42:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b46:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b48:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b4a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b50:	f022 0208 	bic.w	r2, r2, #8
  400b54:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b58:	f022 0208 	bic.w	r2, r2, #8
  400b5c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400b5e:	601f      	str	r7, [r3, #0]
  400b60:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b62:	631f      	str	r7, [r3, #48]	; 0x30
  400b64:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b66:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400ce4 <ssd1306_init+0x1dc>
  400b6a:	2300      	movs	r3, #0
  400b6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b74:	4640      	mov	r0, r8
  400b76:	4c4e      	ldr	r4, [pc, #312]	; (400cb0 <ssd1306_init+0x1a8>)
  400b78:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400b7a:	2300      	movs	r3, #0
  400b7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b84:	4640      	mov	r0, r8
  400b86:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400b88:	2300      	movs	r3, #0
  400b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400b8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b92:	4640      	mov	r0, r8
  400b94:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b96:	2300      	movs	r3, #0
  400b98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ba0:	4640      	mov	r0, r8
  400ba2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400ba4:	2300      	movs	r3, #0
  400ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400baa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bae:	4640      	mov	r0, r8
  400bb0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400bb2:	2300      	movs	r3, #0
  400bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400bb8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bbc:	4640      	mov	r0, r8
  400bbe:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400bc0:	4c3c      	ldr	r4, [pc, #240]	; (400cb4 <ssd1306_init+0x1ac>)
  400bc2:	f04f 0902 	mov.w	r9, #2
  400bc6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400bca:	f04f 0880 	mov.w	r8, #128	; 0x80
  400bce:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400bd2:	6863      	ldr	r3, [r4, #4]
  400bd4:	f043 0301 	orr.w	r3, r3, #1
  400bd8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400bda:	463a      	mov	r2, r7
  400bdc:	2101      	movs	r1, #1
  400bde:	4620      	mov	r0, r4
  400be0:	4b35      	ldr	r3, [pc, #212]	; (400cb8 <ssd1306_init+0x1b0>)
  400be2:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400be4:	2200      	movs	r2, #0
  400be6:	2101      	movs	r1, #1
  400be8:	4620      	mov	r0, r4
  400bea:	4b34      	ldr	r3, [pc, #208]	; (400cbc <ssd1306_init+0x1b4>)
  400bec:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400bee:	2200      	movs	r2, #0
  400bf0:	2101      	movs	r1, #1
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b32      	ldr	r3, [pc, #200]	; (400cc0 <ssd1306_init+0x1b8>)
  400bf6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400bf8:	6863      	ldr	r3, [r4, #4]
  400bfa:	f023 0302 	bic.w	r3, r3, #2
  400bfe:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400c00:	2200      	movs	r2, #0
  400c02:	2101      	movs	r1, #1
  400c04:	4620      	mov	r0, r4
  400c06:	4b2f      	ldr	r3, [pc, #188]	; (400cc4 <ssd1306_init+0x1bc>)
  400c08:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400c0a:	6863      	ldr	r3, [r4, #4]
  400c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400c10:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400c12:	6863      	ldr	r3, [r4, #4]
  400c14:	f043 0310 	orr.w	r3, r3, #16
  400c18:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400c1a:	492b      	ldr	r1, [pc, #172]	; (400cc8 <ssd1306_init+0x1c0>)
  400c1c:	482b      	ldr	r0, [pc, #172]	; (400ccc <ssd1306_init+0x1c4>)
  400c1e:	4b2c      	ldr	r3, [pc, #176]	; (400cd0 <ssd1306_init+0x1c8>)
  400c20:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400c22:	b2c2      	uxtb	r2, r0
  400c24:	2101      	movs	r1, #1
  400c26:	4620      	mov	r0, r4
  400c28:	4b2a      	ldr	r3, [pc, #168]	; (400cd4 <ssd1306_init+0x1cc>)
  400c2a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400c2c:	4620      	mov	r0, r4
  400c2e:	4b2a      	ldr	r3, [pc, #168]	; (400cd8 <ssd1306_init+0x1d0>)
  400c30:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400c32:	2301      	movs	r3, #1
  400c34:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c36:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400c38:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c3c:	4c27      	ldr	r4, [pc, #156]	; (400cdc <ssd1306_init+0x1d4>)
  400c3e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c40:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400c42:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c46:	47a0      	blx	r4
  400c48:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400c4a:	20a8      	movs	r0, #168	; 0xa8
  400c4c:	4c24      	ldr	r4, [pc, #144]	; (400ce0 <ssd1306_init+0x1d8>)
  400c4e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400c50:	201f      	movs	r0, #31
  400c52:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400c54:	20d3      	movs	r0, #211	; 0xd3
  400c56:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400c58:	2000      	movs	r0, #0
  400c5a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400c5c:	2040      	movs	r0, #64	; 0x40
  400c5e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400c60:	20a1      	movs	r0, #161	; 0xa1
  400c62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400c64:	20c8      	movs	r0, #200	; 0xc8
  400c66:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400c68:	20da      	movs	r0, #218	; 0xda
  400c6a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400c6c:	4648      	mov	r0, r9
  400c6e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400c70:	2081      	movs	r0, #129	; 0x81
  400c72:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400c74:	208f      	movs	r0, #143	; 0x8f
  400c76:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400c78:	20a4      	movs	r0, #164	; 0xa4
  400c7a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400c7c:	20a6      	movs	r0, #166	; 0xa6
  400c7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400c80:	20d5      	movs	r0, #213	; 0xd5
  400c82:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400c84:	4640      	mov	r0, r8
  400c86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400c88:	208d      	movs	r0, #141	; 0x8d
  400c8a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400c8c:	2014      	movs	r0, #20
  400c8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400c90:	20db      	movs	r0, #219	; 0xdb
  400c92:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400c94:	2040      	movs	r0, #64	; 0x40
  400c96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400c98:	20d9      	movs	r0, #217	; 0xd9
  400c9a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400c9c:	20f1      	movs	r0, #241	; 0xf1
  400c9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ca0:	20af      	movs	r0, #175	; 0xaf
  400ca2:	47a0      	blx	r4
  400ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ca8:	400e1200 	.word	0x400e1200
  400cac:	400e1000 	.word	0x400e1000
  400cb0:	004010b5 	.word	0x004010b5
  400cb4:	40008000 	.word	0x40008000
  400cb8:	0040064f 	.word	0x0040064f
  400cbc:	00400613 	.word	0x00400613
  400cc0:	00400631 	.word	0x00400631
  400cc4:	00400695 	.word	0x00400695
  400cc8:	08f0d180 	.word	0x08f0d180
  400ccc:	001e8480 	.word	0x001e8480
  400cd0:	004006a9 	.word	0x004006a9
  400cd4:	004006bf 	.word	0x004006bf
  400cd8:	0040059d 	.word	0x0040059d
  400cdc:	20400001 	.word	0x20400001
  400ce0:	00400ac9 	.word	0x00400ac9
  400ce4:	400e1400 	.word	0x400e1400

00400ce8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
  400cea:	4605      	mov	r5, r0
  400cec:	2208      	movs	r2, #8
  400cee:	4b09      	ldr	r3, [pc, #36]	; (400d14 <ssd1306_write_data+0x2c>)
  400cf0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400cf2:	4c09      	ldr	r4, [pc, #36]	; (400d18 <ssd1306_write_data+0x30>)
  400cf4:	2101      	movs	r1, #1
  400cf6:	4620      	mov	r0, r4
  400cf8:	4b08      	ldr	r3, [pc, #32]	; (400d1c <ssd1306_write_data+0x34>)
  400cfa:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400cfc:	2301      	movs	r3, #1
  400cfe:	461a      	mov	r2, r3
  400d00:	4629      	mov	r1, r5
  400d02:	4620      	mov	r0, r4
  400d04:	4c06      	ldr	r4, [pc, #24]	; (400d20 <ssd1306_write_data+0x38>)
  400d06:	47a0      	blx	r4
	delay_us(10);
  400d08:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400d0c:	4b05      	ldr	r3, [pc, #20]	; (400d24 <ssd1306_write_data+0x3c>)
  400d0e:	4798      	blx	r3
  400d10:	bd38      	pop	{r3, r4, r5, pc}
  400d12:	bf00      	nop
  400d14:	400e1000 	.word	0x400e1000
  400d18:	40008000 	.word	0x40008000
  400d1c:	004005c9 	.word	0x004005c9
  400d20:	004005df 	.word	0x004005df
  400d24:	20400001 	.word	0x20400001

00400d28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400d28:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400d2a:	4810      	ldr	r0, [pc, #64]	; (400d6c <sysclk_init+0x44>)
  400d2c:	4b10      	ldr	r3, [pc, #64]	; (400d70 <sysclk_init+0x48>)
  400d2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d30:	213e      	movs	r1, #62	; 0x3e
  400d32:	2000      	movs	r0, #0
  400d34:	4b0f      	ldr	r3, [pc, #60]	; (400d74 <sysclk_init+0x4c>)
  400d36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400d38:	4c0f      	ldr	r4, [pc, #60]	; (400d78 <sysclk_init+0x50>)
  400d3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400d3c:	2800      	cmp	r0, #0
  400d3e:	d0fc      	beq.n	400d3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400d40:	4b0e      	ldr	r3, [pc, #56]	; (400d7c <sysclk_init+0x54>)
  400d42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d44:	4a0e      	ldr	r2, [pc, #56]	; (400d80 <sysclk_init+0x58>)
  400d46:	4b0f      	ldr	r3, [pc, #60]	; (400d84 <sysclk_init+0x5c>)
  400d48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400d4a:	4c0f      	ldr	r4, [pc, #60]	; (400d88 <sysclk_init+0x60>)
  400d4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400d4e:	2800      	cmp	r0, #0
  400d50:	d0fc      	beq.n	400d4c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400d52:	2002      	movs	r0, #2
  400d54:	4b0d      	ldr	r3, [pc, #52]	; (400d8c <sysclk_init+0x64>)
  400d56:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400d58:	2000      	movs	r0, #0
  400d5a:	4b0d      	ldr	r3, [pc, #52]	; (400d90 <sysclk_init+0x68>)
  400d5c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400d5e:	4b0d      	ldr	r3, [pc, #52]	; (400d94 <sysclk_init+0x6c>)
  400d60:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400d62:	4802      	ldr	r0, [pc, #8]	; (400d6c <sysclk_init+0x44>)
  400d64:	4b02      	ldr	r3, [pc, #8]	; (400d70 <sysclk_init+0x48>)
  400d66:	4798      	blx	r3
  400d68:	bd10      	pop	{r4, pc}
  400d6a:	bf00      	nop
  400d6c:	11e1a300 	.word	0x11e1a300
  400d70:	0040168d 	.word	0x0040168d
  400d74:	004012a9 	.word	0x004012a9
  400d78:	004012fd 	.word	0x004012fd
  400d7c:	0040130d 	.word	0x0040130d
  400d80:	20183f01 	.word	0x20183f01
  400d84:	400e0600 	.word	0x400e0600
  400d88:	0040131d 	.word	0x0040131d
  400d8c:	0040120d 	.word	0x0040120d
  400d90:	00401245 	.word	0x00401245
  400d94:	00401581 	.word	0x00401581

00400d98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d9c:	b980      	cbnz	r0, 400dc0 <_read+0x28>
  400d9e:	460c      	mov	r4, r1
  400da0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400da2:	2a00      	cmp	r2, #0
  400da4:	dd0f      	ble.n	400dc6 <_read+0x2e>
  400da6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400da8:	4e08      	ldr	r6, [pc, #32]	; (400dcc <_read+0x34>)
  400daa:	4d09      	ldr	r5, [pc, #36]	; (400dd0 <_read+0x38>)
  400dac:	6830      	ldr	r0, [r6, #0]
  400dae:	4621      	mov	r1, r4
  400db0:	682b      	ldr	r3, [r5, #0]
  400db2:	4798      	blx	r3
		ptr++;
  400db4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400db6:	42bc      	cmp	r4, r7
  400db8:	d1f8      	bne.n	400dac <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400dba:	4640      	mov	r0, r8
  400dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400dc0:	f04f 38ff 	mov.w	r8, #4294967295
  400dc4:	e7f9      	b.n	400dba <_read+0x22>
	for (; len > 0; --len) {
  400dc6:	4680      	mov	r8, r0
  400dc8:	e7f7      	b.n	400dba <_read+0x22>
  400dca:	bf00      	nop
  400dcc:	20400de8 	.word	0x20400de8
  400dd0:	20400de0 	.word	0x20400de0

00400dd4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400dd4:	3801      	subs	r0, #1
  400dd6:	2802      	cmp	r0, #2
  400dd8:	d815      	bhi.n	400e06 <_write+0x32>
{
  400dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dde:	460e      	mov	r6, r1
  400de0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400de2:	b19a      	cbz	r2, 400e0c <_write+0x38>
  400de4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400de6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400e20 <_write+0x4c>
  400dea:	4f0c      	ldr	r7, [pc, #48]	; (400e1c <_write+0x48>)
  400dec:	f8d8 0000 	ldr.w	r0, [r8]
  400df0:	f815 1b01 	ldrb.w	r1, [r5], #1
  400df4:	683b      	ldr	r3, [r7, #0]
  400df6:	4798      	blx	r3
  400df8:	2800      	cmp	r0, #0
  400dfa:	db0a      	blt.n	400e12 <_write+0x3e>
  400dfc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400dfe:	3c01      	subs	r4, #1
  400e00:	d1f4      	bne.n	400dec <_write+0x18>
  400e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400e06:	f04f 30ff 	mov.w	r0, #4294967295
  400e0a:	4770      	bx	lr
	for (; len != 0; --len) {
  400e0c:	4610      	mov	r0, r2
  400e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400e12:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e1a:	bf00      	nop
  400e1c:	20400de4 	.word	0x20400de4
  400e20:	20400de8 	.word	0x20400de8

00400e24 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400e26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400e2a:	4b5c      	ldr	r3, [pc, #368]	; (400f9c <board_init+0x178>)
  400e2c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400e2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e32:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400e36:	4b5a      	ldr	r3, [pc, #360]	; (400fa0 <board_init+0x17c>)
  400e38:	2200      	movs	r2, #0
  400e3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400e3e:	695a      	ldr	r2, [r3, #20]
  400e40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400e44:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e4a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400e4e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400e52:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400e56:	f007 0007 	and.w	r0, r7, #7
  400e5a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400e5c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400e60:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400e64:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400e68:	f3bf 8f4f 	dsb	sy
  400e6c:	f04f 34ff 	mov.w	r4, #4294967295
  400e70:	fa04 fc00 	lsl.w	ip, r4, r0
  400e74:	fa06 f000 	lsl.w	r0, r6, r0
  400e78:	fa04 f40e 	lsl.w	r4, r4, lr
  400e7c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400e80:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400e82:	463a      	mov	r2, r7
  400e84:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400e86:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400e8a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e8e:	3a01      	subs	r2, #1
  400e90:	4423      	add	r3, r4
  400e92:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e96:	d1f6      	bne.n	400e86 <board_init+0x62>
        } while(sets--);
  400e98:	3e01      	subs	r6, #1
  400e9a:	4460      	add	r0, ip
  400e9c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ea0:	d1ef      	bne.n	400e82 <board_init+0x5e>
  400ea2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400ea6:	4b3e      	ldr	r3, [pc, #248]	; (400fa0 <board_init+0x17c>)
  400ea8:	695a      	ldr	r2, [r3, #20]
  400eaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400eae:	615a      	str	r2, [r3, #20]
  400eb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eb4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400eb8:	4a3a      	ldr	r2, [pc, #232]	; (400fa4 <board_init+0x180>)
  400eba:	493b      	ldr	r1, [pc, #236]	; (400fa8 <board_init+0x184>)
  400ebc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ebe:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400ec2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400ec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ec8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400ecc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400ed0:	f022 0201 	bic.w	r2, r2, #1
  400ed4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ed8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400edc:	f022 0201 	bic.w	r2, r2, #1
  400ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400ee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ee8:	f3bf 8f6f 	isb	sy
  400eec:	200a      	movs	r0, #10
  400eee:	4c2f      	ldr	r4, [pc, #188]	; (400fac <board_init+0x188>)
  400ef0:	47a0      	blx	r4
  400ef2:	200b      	movs	r0, #11
  400ef4:	47a0      	blx	r4
  400ef6:	200c      	movs	r0, #12
  400ef8:	47a0      	blx	r4
  400efa:	2010      	movs	r0, #16
  400efc:	47a0      	blx	r4
  400efe:	2011      	movs	r0, #17
  400f00:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f02:	4b2b      	ldr	r3, [pc, #172]	; (400fb0 <board_init+0x18c>)
  400f04:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f08:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f0e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400f18:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400f1e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f24:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400f26:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400f2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f2e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400f32:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f34:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f36:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400f3a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400f3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400f40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400f44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400f48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f4c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f52:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f54:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f5c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400f60:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f62:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f64:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400f68:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f6a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400f6c:	4a11      	ldr	r2, [pc, #68]	; (400fb4 <board_init+0x190>)
  400f6e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f72:	f043 0310 	orr.w	r3, r3, #16
  400f76:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400f7a:	4b0f      	ldr	r3, [pc, #60]	; (400fb8 <board_init+0x194>)
  400f7c:	2210      	movs	r2, #16
  400f7e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f84:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f86:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400f8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400f8e:	4311      	orrs	r1, r2
  400f90:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400f92:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400f94:	4311      	orrs	r1, r2
  400f96:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f98:	605a      	str	r2, [r3, #4]
  400f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f9c:	400e1850 	.word	0x400e1850
  400fa0:	e000ed00 	.word	0xe000ed00
  400fa4:	400e0c00 	.word	0x400e0c00
  400fa8:	5a00080c 	.word	0x5a00080c
  400fac:	0040132d 	.word	0x0040132d
  400fb0:	400e1200 	.word	0x400e1200
  400fb4:	40088000 	.word	0x40088000
  400fb8:	400e1000 	.word	0x400e1000

00400fbc <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400fbc:	6301      	str	r1, [r0, #48]	; 0x30
  400fbe:	4770      	bx	lr

00400fc0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400fc0:	6341      	str	r1, [r0, #52]	; 0x34
  400fc2:	4770      	bx	lr

00400fc4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400fc4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400fc6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400fca:	d03a      	beq.n	401042 <pio_set_peripheral+0x7e>
  400fcc:	d813      	bhi.n	400ff6 <pio_set_peripheral+0x32>
  400fce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400fd2:	d025      	beq.n	401020 <pio_set_peripheral+0x5c>
  400fd4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400fd8:	d10a      	bne.n	400ff0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fdc:	4313      	orrs	r3, r2
  400fde:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fe0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fe2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400fe4:	400b      	ands	r3, r1
  400fe6:	ea23 0302 	bic.w	r3, r3, r2
  400fea:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400fec:	6042      	str	r2, [r0, #4]
  400fee:	4770      	bx	lr
	switch (ul_type) {
  400ff0:	2900      	cmp	r1, #0
  400ff2:	d1fb      	bne.n	400fec <pio_set_peripheral+0x28>
  400ff4:	4770      	bx	lr
  400ff6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ffa:	d021      	beq.n	401040 <pio_set_peripheral+0x7c>
  400ffc:	d809      	bhi.n	401012 <pio_set_peripheral+0x4e>
  400ffe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401002:	d1f3      	bne.n	400fec <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401004:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401006:	4313      	orrs	r3, r2
  401008:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40100a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40100c:	4313      	orrs	r3, r2
  40100e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401010:	e7ec      	b.n	400fec <pio_set_peripheral+0x28>
	switch (ul_type) {
  401012:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401016:	d013      	beq.n	401040 <pio_set_peripheral+0x7c>
  401018:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40101c:	d010      	beq.n	401040 <pio_set_peripheral+0x7c>
  40101e:	e7e5      	b.n	400fec <pio_set_peripheral+0x28>
{
  401020:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401022:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401024:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401026:	43d3      	mvns	r3, r2
  401028:	4021      	ands	r1, r4
  40102a:	461c      	mov	r4, r3
  40102c:	4019      	ands	r1, r3
  40102e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401030:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401032:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401034:	400b      	ands	r3, r1
  401036:	4023      	ands	r3, r4
  401038:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40103a:	6042      	str	r2, [r0, #4]
}
  40103c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401040:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401042:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401044:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401046:	400b      	ands	r3, r1
  401048:	ea23 0302 	bic.w	r3, r3, r2
  40104c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40104e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401050:	4313      	orrs	r3, r2
  401052:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401054:	e7ca      	b.n	400fec <pio_set_peripheral+0x28>

00401056 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401056:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401058:	f012 0f01 	tst.w	r2, #1
  40105c:	d10d      	bne.n	40107a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40105e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401060:	f012 0f0a 	tst.w	r2, #10
  401064:	d00b      	beq.n	40107e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401066:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401068:	f012 0f02 	tst.w	r2, #2
  40106c:	d109      	bne.n	401082 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40106e:	f012 0f08 	tst.w	r2, #8
  401072:	d008      	beq.n	401086 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401074:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401078:	e005      	b.n	401086 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40107a:	6641      	str	r1, [r0, #100]	; 0x64
  40107c:	e7f0      	b.n	401060 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40107e:	6241      	str	r1, [r0, #36]	; 0x24
  401080:	e7f2      	b.n	401068 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401082:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401086:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401088:	6001      	str	r1, [r0, #0]
  40108a:	4770      	bx	lr

0040108c <pio_set_output>:
{
  40108c:	b410      	push	{r4}
  40108e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401090:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401092:	b94c      	cbnz	r4, 4010a8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401094:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401096:	b14b      	cbz	r3, 4010ac <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401098:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40109a:	b94a      	cbnz	r2, 4010b0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40109c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40109e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4010a0:	6001      	str	r1, [r0, #0]
}
  4010a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010a6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4010a8:	6641      	str	r1, [r0, #100]	; 0x64
  4010aa:	e7f4      	b.n	401096 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4010ac:	6541      	str	r1, [r0, #84]	; 0x54
  4010ae:	e7f4      	b.n	40109a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4010b0:	6301      	str	r1, [r0, #48]	; 0x30
  4010b2:	e7f4      	b.n	40109e <pio_set_output+0x12>

004010b4 <pio_configure>:
{
  4010b4:	b570      	push	{r4, r5, r6, lr}
  4010b6:	b082      	sub	sp, #8
  4010b8:	4605      	mov	r5, r0
  4010ba:	4616      	mov	r6, r2
  4010bc:	461c      	mov	r4, r3
	switch (ul_type) {
  4010be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4010c2:	d014      	beq.n	4010ee <pio_configure+0x3a>
  4010c4:	d90a      	bls.n	4010dc <pio_configure+0x28>
  4010c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4010ca:	d024      	beq.n	401116 <pio_configure+0x62>
  4010cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4010d0:	d021      	beq.n	401116 <pio_configure+0x62>
  4010d2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4010d6:	d017      	beq.n	401108 <pio_configure+0x54>
		return 0;
  4010d8:	2000      	movs	r0, #0
  4010da:	e01a      	b.n	401112 <pio_configure+0x5e>
	switch (ul_type) {
  4010dc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4010e0:	d005      	beq.n	4010ee <pio_configure+0x3a>
  4010e2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4010e6:	d002      	beq.n	4010ee <pio_configure+0x3a>
  4010e8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4010ec:	d1f4      	bne.n	4010d8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4010ee:	4632      	mov	r2, r6
  4010f0:	4628      	mov	r0, r5
  4010f2:	4b11      	ldr	r3, [pc, #68]	; (401138 <pio_configure+0x84>)
  4010f4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4010f6:	f014 0f01 	tst.w	r4, #1
  4010fa:	d102      	bne.n	401102 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4010fc:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4010fe:	2001      	movs	r0, #1
  401100:	e007      	b.n	401112 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401102:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401104:	2001      	movs	r0, #1
  401106:	e004      	b.n	401112 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401108:	461a      	mov	r2, r3
  40110a:	4631      	mov	r1, r6
  40110c:	4b0b      	ldr	r3, [pc, #44]	; (40113c <pio_configure+0x88>)
  40110e:	4798      	blx	r3
	return 1;
  401110:	2001      	movs	r0, #1
}
  401112:	b002      	add	sp, #8
  401114:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401116:	f004 0301 	and.w	r3, r4, #1
  40111a:	9300      	str	r3, [sp, #0]
  40111c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401120:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401124:	bf14      	ite	ne
  401126:	2200      	movne	r2, #0
  401128:	2201      	moveq	r2, #1
  40112a:	4631      	mov	r1, r6
  40112c:	4628      	mov	r0, r5
  40112e:	4c04      	ldr	r4, [pc, #16]	; (401140 <pio_configure+0x8c>)
  401130:	47a0      	blx	r4
	return 1;
  401132:	2001      	movs	r0, #1
		break;
  401134:	e7ed      	b.n	401112 <pio_configure+0x5e>
  401136:	bf00      	nop
  401138:	00400fc5 	.word	0x00400fc5
  40113c:	00401057 	.word	0x00401057
  401140:	0040108d 	.word	0x0040108d

00401144 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401144:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401146:	420b      	tst	r3, r1
}
  401148:	bf14      	ite	ne
  40114a:	2001      	movne	r0, #1
  40114c:	2000      	moveq	r0, #0
  40114e:	4770      	bx	lr

00401150 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401150:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401152:	4770      	bx	lr

00401154 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401154:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401156:	4770      	bx	lr

00401158 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40115c:	4604      	mov	r4, r0
  40115e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401160:	4b0e      	ldr	r3, [pc, #56]	; (40119c <pio_handler_process+0x44>)
  401162:	4798      	blx	r3
  401164:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401166:	4620      	mov	r0, r4
  401168:	4b0d      	ldr	r3, [pc, #52]	; (4011a0 <pio_handler_process+0x48>)
  40116a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40116c:	4005      	ands	r5, r0
  40116e:	d013      	beq.n	401198 <pio_handler_process+0x40>
  401170:	4c0c      	ldr	r4, [pc, #48]	; (4011a4 <pio_handler_process+0x4c>)
  401172:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401176:	e003      	b.n	401180 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401178:	42b4      	cmp	r4, r6
  40117a:	d00d      	beq.n	401198 <pio_handler_process+0x40>
  40117c:	3410      	adds	r4, #16
		while (status != 0) {
  40117e:	b15d      	cbz	r5, 401198 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401180:	6820      	ldr	r0, [r4, #0]
  401182:	4540      	cmp	r0, r8
  401184:	d1f8      	bne.n	401178 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401186:	6861      	ldr	r1, [r4, #4]
  401188:	4229      	tst	r1, r5
  40118a:	d0f5      	beq.n	401178 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40118c:	68e3      	ldr	r3, [r4, #12]
  40118e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401190:	6863      	ldr	r3, [r4, #4]
  401192:	ea25 0503 	bic.w	r5, r5, r3
  401196:	e7ef      	b.n	401178 <pio_handler_process+0x20>
  401198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40119c:	00401151 	.word	0x00401151
  4011a0:	00401155 	.word	0x00401155
  4011a4:	20400bf4 	.word	0x20400bf4

004011a8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4011a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4011aa:	210a      	movs	r1, #10
  4011ac:	4801      	ldr	r0, [pc, #4]	; (4011b4 <PIOA_Handler+0xc>)
  4011ae:	4b02      	ldr	r3, [pc, #8]	; (4011b8 <PIOA_Handler+0x10>)
  4011b0:	4798      	blx	r3
  4011b2:	bd08      	pop	{r3, pc}
  4011b4:	400e0e00 	.word	0x400e0e00
  4011b8:	00401159 	.word	0x00401159

004011bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4011bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4011be:	210b      	movs	r1, #11
  4011c0:	4801      	ldr	r0, [pc, #4]	; (4011c8 <PIOB_Handler+0xc>)
  4011c2:	4b02      	ldr	r3, [pc, #8]	; (4011cc <PIOB_Handler+0x10>)
  4011c4:	4798      	blx	r3
  4011c6:	bd08      	pop	{r3, pc}
  4011c8:	400e1000 	.word	0x400e1000
  4011cc:	00401159 	.word	0x00401159

004011d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4011d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4011d2:	210c      	movs	r1, #12
  4011d4:	4801      	ldr	r0, [pc, #4]	; (4011dc <PIOC_Handler+0xc>)
  4011d6:	4b02      	ldr	r3, [pc, #8]	; (4011e0 <PIOC_Handler+0x10>)
  4011d8:	4798      	blx	r3
  4011da:	bd08      	pop	{r3, pc}
  4011dc:	400e1200 	.word	0x400e1200
  4011e0:	00401159 	.word	0x00401159

004011e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4011e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4011e6:	2110      	movs	r1, #16
  4011e8:	4801      	ldr	r0, [pc, #4]	; (4011f0 <PIOD_Handler+0xc>)
  4011ea:	4b02      	ldr	r3, [pc, #8]	; (4011f4 <PIOD_Handler+0x10>)
  4011ec:	4798      	blx	r3
  4011ee:	bd08      	pop	{r3, pc}
  4011f0:	400e1400 	.word	0x400e1400
  4011f4:	00401159 	.word	0x00401159

004011f8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4011f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4011fa:	2111      	movs	r1, #17
  4011fc:	4801      	ldr	r0, [pc, #4]	; (401204 <PIOE_Handler+0xc>)
  4011fe:	4b02      	ldr	r3, [pc, #8]	; (401208 <PIOE_Handler+0x10>)
  401200:	4798      	blx	r3
  401202:	bd08      	pop	{r3, pc}
  401204:	400e1600 	.word	0x400e1600
  401208:	00401159 	.word	0x00401159

0040120c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40120c:	2803      	cmp	r0, #3
  40120e:	d011      	beq.n	401234 <pmc_mck_set_division+0x28>
  401210:	2804      	cmp	r0, #4
  401212:	d012      	beq.n	40123a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401214:	2802      	cmp	r0, #2
  401216:	bf0c      	ite	eq
  401218:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40121c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40121e:	4a08      	ldr	r2, [pc, #32]	; (401240 <pmc_mck_set_division+0x34>)
  401220:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401226:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401228:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40122a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40122c:	f013 0f08 	tst.w	r3, #8
  401230:	d0fb      	beq.n	40122a <pmc_mck_set_division+0x1e>
}
  401232:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401234:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401238:	e7f1      	b.n	40121e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40123a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40123e:	e7ee      	b.n	40121e <pmc_mck_set_division+0x12>
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401244:	4a17      	ldr	r2, [pc, #92]	; (4012a4 <pmc_switch_mck_to_pllack+0x60>)
  401246:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40124c:	4318      	orrs	r0, r3
  40124e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401250:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401252:	f013 0f08 	tst.w	r3, #8
  401256:	d10a      	bne.n	40126e <pmc_switch_mck_to_pllack+0x2a>
  401258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40125c:	4911      	ldr	r1, [pc, #68]	; (4012a4 <pmc_switch_mck_to_pllack+0x60>)
  40125e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401260:	f012 0f08 	tst.w	r2, #8
  401264:	d103      	bne.n	40126e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401266:	3b01      	subs	r3, #1
  401268:	d1f9      	bne.n	40125e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40126a:	2001      	movs	r0, #1
  40126c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40126e:	4a0d      	ldr	r2, [pc, #52]	; (4012a4 <pmc_switch_mck_to_pllack+0x60>)
  401270:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401272:	f023 0303 	bic.w	r3, r3, #3
  401276:	f043 0302 	orr.w	r3, r3, #2
  40127a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40127c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40127e:	f013 0f08 	tst.w	r3, #8
  401282:	d10a      	bne.n	40129a <pmc_switch_mck_to_pllack+0x56>
  401284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401288:	4906      	ldr	r1, [pc, #24]	; (4012a4 <pmc_switch_mck_to_pllack+0x60>)
  40128a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40128c:	f012 0f08 	tst.w	r2, #8
  401290:	d105      	bne.n	40129e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401292:	3b01      	subs	r3, #1
  401294:	d1f9      	bne.n	40128a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401296:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401298:	4770      	bx	lr
	return 0;
  40129a:	2000      	movs	r0, #0
  40129c:	4770      	bx	lr
  40129e:	2000      	movs	r0, #0
  4012a0:	4770      	bx	lr
  4012a2:	bf00      	nop
  4012a4:	400e0600 	.word	0x400e0600

004012a8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012a8:	b9a0      	cbnz	r0, 4012d4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012aa:	480e      	ldr	r0, [pc, #56]	; (4012e4 <pmc_switch_mainck_to_xtal+0x3c>)
  4012ac:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4012ae:	0209      	lsls	r1, r1, #8
  4012b0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012b2:	4a0d      	ldr	r2, [pc, #52]	; (4012e8 <pmc_switch_mainck_to_xtal+0x40>)
  4012b4:	401a      	ands	r2, r3
  4012b6:	4b0d      	ldr	r3, [pc, #52]	; (4012ec <pmc_switch_mainck_to_xtal+0x44>)
  4012b8:	4313      	orrs	r3, r2
  4012ba:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012bc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4012be:	4602      	mov	r2, r0
  4012c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012c2:	f013 0f01 	tst.w	r3, #1
  4012c6:	d0fb      	beq.n	4012c0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4012c8:	4a06      	ldr	r2, [pc, #24]	; (4012e4 <pmc_switch_mainck_to_xtal+0x3c>)
  4012ca:	6a11      	ldr	r1, [r2, #32]
  4012cc:	4b08      	ldr	r3, [pc, #32]	; (4012f0 <pmc_switch_mainck_to_xtal+0x48>)
  4012ce:	430b      	orrs	r3, r1
  4012d0:	6213      	str	r3, [r2, #32]
  4012d2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012d4:	4903      	ldr	r1, [pc, #12]	; (4012e4 <pmc_switch_mainck_to_xtal+0x3c>)
  4012d6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4012d8:	4a06      	ldr	r2, [pc, #24]	; (4012f4 <pmc_switch_mainck_to_xtal+0x4c>)
  4012da:	401a      	ands	r2, r3
  4012dc:	4b06      	ldr	r3, [pc, #24]	; (4012f8 <pmc_switch_mainck_to_xtal+0x50>)
  4012de:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012e0:	620b      	str	r3, [r1, #32]
  4012e2:	4770      	bx	lr
  4012e4:	400e0600 	.word	0x400e0600
  4012e8:	ffc8fffc 	.word	0xffc8fffc
  4012ec:	00370001 	.word	0x00370001
  4012f0:	01370000 	.word	0x01370000
  4012f4:	fec8fffc 	.word	0xfec8fffc
  4012f8:	01370002 	.word	0x01370002

004012fc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4012fc:	4b02      	ldr	r3, [pc, #8]	; (401308 <pmc_osc_is_ready_mainck+0xc>)
  4012fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401300:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401304:	4770      	bx	lr
  401306:	bf00      	nop
  401308:	400e0600 	.word	0x400e0600

0040130c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40130c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401310:	4b01      	ldr	r3, [pc, #4]	; (401318 <pmc_disable_pllack+0xc>)
  401312:	629a      	str	r2, [r3, #40]	; 0x28
  401314:	4770      	bx	lr
  401316:	bf00      	nop
  401318:	400e0600 	.word	0x400e0600

0040131c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40131c:	4b02      	ldr	r3, [pc, #8]	; (401328 <pmc_is_locked_pllack+0xc>)
  40131e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401320:	f000 0002 	and.w	r0, r0, #2
  401324:	4770      	bx	lr
  401326:	bf00      	nop
  401328:	400e0600 	.word	0x400e0600

0040132c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40132c:	283f      	cmp	r0, #63	; 0x3f
  40132e:	d81e      	bhi.n	40136e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401330:	281f      	cmp	r0, #31
  401332:	d80c      	bhi.n	40134e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401334:	4b11      	ldr	r3, [pc, #68]	; (40137c <pmc_enable_periph_clk+0x50>)
  401336:	699a      	ldr	r2, [r3, #24]
  401338:	2301      	movs	r3, #1
  40133a:	4083      	lsls	r3, r0
  40133c:	4393      	bics	r3, r2
  40133e:	d018      	beq.n	401372 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401340:	2301      	movs	r3, #1
  401342:	fa03 f000 	lsl.w	r0, r3, r0
  401346:	4b0d      	ldr	r3, [pc, #52]	; (40137c <pmc_enable_periph_clk+0x50>)
  401348:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40134a:	2000      	movs	r0, #0
  40134c:	4770      	bx	lr
		ul_id -= 32;
  40134e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401350:	4b0a      	ldr	r3, [pc, #40]	; (40137c <pmc_enable_periph_clk+0x50>)
  401352:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401356:	2301      	movs	r3, #1
  401358:	4083      	lsls	r3, r0
  40135a:	4393      	bics	r3, r2
  40135c:	d00b      	beq.n	401376 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40135e:	2301      	movs	r3, #1
  401360:	fa03 f000 	lsl.w	r0, r3, r0
  401364:	4b05      	ldr	r3, [pc, #20]	; (40137c <pmc_enable_periph_clk+0x50>)
  401366:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40136a:	2000      	movs	r0, #0
  40136c:	4770      	bx	lr
		return 1;
  40136e:	2001      	movs	r0, #1
  401370:	4770      	bx	lr
	return 0;
  401372:	2000      	movs	r0, #0
  401374:	4770      	bx	lr
  401376:	2000      	movs	r0, #0
}
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	400e0600 	.word	0x400e0600

00401380 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401380:	6943      	ldr	r3, [r0, #20]
  401382:	f013 0f02 	tst.w	r3, #2
  401386:	d002      	beq.n	40138e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401388:	61c1      	str	r1, [r0, #28]
	return 0;
  40138a:	2000      	movs	r0, #0
  40138c:	4770      	bx	lr
		return 1;
  40138e:	2001      	movs	r0, #1
}
  401390:	4770      	bx	lr

00401392 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401392:	6943      	ldr	r3, [r0, #20]
  401394:	f013 0f01 	tst.w	r3, #1
  401398:	d003      	beq.n	4013a2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40139a:	6983      	ldr	r3, [r0, #24]
  40139c:	700b      	strb	r3, [r1, #0]
	return 0;
  40139e:	2000      	movs	r0, #0
  4013a0:	4770      	bx	lr
		return 1;
  4013a2:	2001      	movs	r0, #1
}
  4013a4:	4770      	bx	lr

004013a6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013a6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4013a8:	010b      	lsls	r3, r1, #4
  4013aa:	4293      	cmp	r3, r2
  4013ac:	d914      	bls.n	4013d8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4013ae:	00c9      	lsls	r1, r1, #3
  4013b0:	084b      	lsrs	r3, r1, #1
  4013b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4013b6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4013ba:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013bc:	1e5c      	subs	r4, r3, #1
  4013be:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4013c2:	428c      	cmp	r4, r1
  4013c4:	d901      	bls.n	4013ca <usart_set_async_baudrate+0x24>
		return 1;
  4013c6:	2001      	movs	r0, #1
  4013c8:	e017      	b.n	4013fa <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4013ca:	6841      	ldr	r1, [r0, #4]
  4013cc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4013d0:	6041      	str	r1, [r0, #4]
  4013d2:	e00c      	b.n	4013ee <usart_set_async_baudrate+0x48>
		return 1;
  4013d4:	2001      	movs	r0, #1
  4013d6:	e010      	b.n	4013fa <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4013d8:	0859      	lsrs	r1, r3, #1
  4013da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4013de:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4013e2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4013e4:	1e5c      	subs	r4, r3, #1
  4013e6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4013ea:	428c      	cmp	r4, r1
  4013ec:	d8f2      	bhi.n	4013d4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4013ee:	0412      	lsls	r2, r2, #16
  4013f0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4013f4:	431a      	orrs	r2, r3
  4013f6:	6202      	str	r2, [r0, #32]

	return 0;
  4013f8:	2000      	movs	r0, #0
}
  4013fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013fe:	4770      	bx	lr

00401400 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401400:	4b08      	ldr	r3, [pc, #32]	; (401424 <usart_reset+0x24>)
  401402:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401406:	2300      	movs	r3, #0
  401408:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40140a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40140c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40140e:	2388      	movs	r3, #136	; 0x88
  401410:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401412:	2324      	movs	r3, #36	; 0x24
  401414:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401416:	f44f 7380 	mov.w	r3, #256	; 0x100
  40141a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40141c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401420:	6003      	str	r3, [r0, #0]
  401422:	4770      	bx	lr
  401424:	55534100 	.word	0x55534100

00401428 <usart_init_rs232>:
{
  401428:	b570      	push	{r4, r5, r6, lr}
  40142a:	4605      	mov	r5, r0
  40142c:	460c      	mov	r4, r1
  40142e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401430:	4b0f      	ldr	r3, [pc, #60]	; (401470 <usart_init_rs232+0x48>)
  401432:	4798      	blx	r3
	ul_reg_val = 0;
  401434:	2200      	movs	r2, #0
  401436:	4b0f      	ldr	r3, [pc, #60]	; (401474 <usart_init_rs232+0x4c>)
  401438:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40143a:	b1a4      	cbz	r4, 401466 <usart_init_rs232+0x3e>
  40143c:	4632      	mov	r2, r6
  40143e:	6821      	ldr	r1, [r4, #0]
  401440:	4628      	mov	r0, r5
  401442:	4b0d      	ldr	r3, [pc, #52]	; (401478 <usart_init_rs232+0x50>)
  401444:	4798      	blx	r3
  401446:	4602      	mov	r2, r0
  401448:	b978      	cbnz	r0, 40146a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40144a:	6863      	ldr	r3, [r4, #4]
  40144c:	68a1      	ldr	r1, [r4, #8]
  40144e:	430b      	orrs	r3, r1
  401450:	6921      	ldr	r1, [r4, #16]
  401452:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401454:	68e1      	ldr	r1, [r4, #12]
  401456:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401458:	4906      	ldr	r1, [pc, #24]	; (401474 <usart_init_rs232+0x4c>)
  40145a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40145c:	6869      	ldr	r1, [r5, #4]
  40145e:	430b      	orrs	r3, r1
  401460:	606b      	str	r3, [r5, #4]
}
  401462:	4610      	mov	r0, r2
  401464:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401466:	2201      	movs	r2, #1
  401468:	e7fb      	b.n	401462 <usart_init_rs232+0x3a>
  40146a:	2201      	movs	r2, #1
  40146c:	e7f9      	b.n	401462 <usart_init_rs232+0x3a>
  40146e:	bf00      	nop
  401470:	00401401 	.word	0x00401401
  401474:	20400c64 	.word	0x20400c64
  401478:	004013a7 	.word	0x004013a7

0040147c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40147c:	2340      	movs	r3, #64	; 0x40
  40147e:	6003      	str	r3, [r0, #0]
  401480:	4770      	bx	lr

00401482 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401482:	2310      	movs	r3, #16
  401484:	6003      	str	r3, [r0, #0]
  401486:	4770      	bx	lr

00401488 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401488:	6943      	ldr	r3, [r0, #20]
  40148a:	f013 0f02 	tst.w	r3, #2
  40148e:	d004      	beq.n	40149a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401490:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401494:	61c1      	str	r1, [r0, #28]
	return 0;
  401496:	2000      	movs	r0, #0
  401498:	4770      	bx	lr
		return 1;
  40149a:	2001      	movs	r0, #1
}
  40149c:	4770      	bx	lr

0040149e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40149e:	6943      	ldr	r3, [r0, #20]
  4014a0:	f013 0f01 	tst.w	r3, #1
  4014a4:	d005      	beq.n	4014b2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4014a6:	6983      	ldr	r3, [r0, #24]
  4014a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4014ac:	600b      	str	r3, [r1, #0]
	return 0;
  4014ae:	2000      	movs	r0, #0
  4014b0:	4770      	bx	lr
		return 1;
  4014b2:	2001      	movs	r0, #1
}
  4014b4:	4770      	bx	lr

004014b6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4014b6:	e7fe      	b.n	4014b6 <Dummy_Handler>

004014b8 <Reset_Handler>:
{
  4014b8:	b500      	push	{lr}
  4014ba:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4014bc:	4b25      	ldr	r3, [pc, #148]	; (401554 <Reset_Handler+0x9c>)
  4014be:	4a26      	ldr	r2, [pc, #152]	; (401558 <Reset_Handler+0xa0>)
  4014c0:	429a      	cmp	r2, r3
  4014c2:	d010      	beq.n	4014e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4014c4:	4b25      	ldr	r3, [pc, #148]	; (40155c <Reset_Handler+0xa4>)
  4014c6:	4a23      	ldr	r2, [pc, #140]	; (401554 <Reset_Handler+0x9c>)
  4014c8:	429a      	cmp	r2, r3
  4014ca:	d20c      	bcs.n	4014e6 <Reset_Handler+0x2e>
  4014cc:	3b01      	subs	r3, #1
  4014ce:	1a9b      	subs	r3, r3, r2
  4014d0:	f023 0303 	bic.w	r3, r3, #3
  4014d4:	3304      	adds	r3, #4
  4014d6:	4413      	add	r3, r2
  4014d8:	491f      	ldr	r1, [pc, #124]	; (401558 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4014da:	f851 0b04 	ldr.w	r0, [r1], #4
  4014de:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4014e2:	429a      	cmp	r2, r3
  4014e4:	d1f9      	bne.n	4014da <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4014e6:	4b1e      	ldr	r3, [pc, #120]	; (401560 <Reset_Handler+0xa8>)
  4014e8:	4a1e      	ldr	r2, [pc, #120]	; (401564 <Reset_Handler+0xac>)
  4014ea:	429a      	cmp	r2, r3
  4014ec:	d20a      	bcs.n	401504 <Reset_Handler+0x4c>
  4014ee:	3b01      	subs	r3, #1
  4014f0:	1a9b      	subs	r3, r3, r2
  4014f2:	f023 0303 	bic.w	r3, r3, #3
  4014f6:	3304      	adds	r3, #4
  4014f8:	4413      	add	r3, r2
                *pDest++ = 0;
  4014fa:	2100      	movs	r1, #0
  4014fc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401500:	4293      	cmp	r3, r2
  401502:	d1fb      	bne.n	4014fc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401504:	4a18      	ldr	r2, [pc, #96]	; (401568 <Reset_Handler+0xb0>)
  401506:	4b19      	ldr	r3, [pc, #100]	; (40156c <Reset_Handler+0xb4>)
  401508:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40150c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40150e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401512:	fab3 f383 	clz	r3, r3
  401516:	095b      	lsrs	r3, r3, #5
  401518:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40151a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40151c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401520:	2200      	movs	r2, #0
  401522:	4b13      	ldr	r3, [pc, #76]	; (401570 <Reset_Handler+0xb8>)
  401524:	701a      	strb	r2, [r3, #0]
	return flags;
  401526:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401528:	4a12      	ldr	r2, [pc, #72]	; (401574 <Reset_Handler+0xbc>)
  40152a:	6813      	ldr	r3, [r2, #0]
  40152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401530:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401532:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401536:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40153a:	b129      	cbz	r1, 401548 <Reset_Handler+0x90>
		cpu_irq_enable();
  40153c:	2201      	movs	r2, #1
  40153e:	4b0c      	ldr	r3, [pc, #48]	; (401570 <Reset_Handler+0xb8>)
  401540:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401542:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401546:	b662      	cpsie	i
        __libc_init_array();
  401548:	4b0b      	ldr	r3, [pc, #44]	; (401578 <Reset_Handler+0xc0>)
  40154a:	4798      	blx	r3
        main();
  40154c:	4b0b      	ldr	r3, [pc, #44]	; (40157c <Reset_Handler+0xc4>)
  40154e:	4798      	blx	r3
  401550:	e7fe      	b.n	401550 <Reset_Handler+0x98>
  401552:	bf00      	nop
  401554:	20400000 	.word	0x20400000
  401558:	00407144 	.word	0x00407144
  40155c:	204009d0 	.word	0x204009d0
  401560:	20400e60 	.word	0x20400e60
  401564:	204009d0 	.word	0x204009d0
  401568:	e000ed00 	.word	0xe000ed00
  40156c:	00400000 	.word	0x00400000
  401570:	20400018 	.word	0x20400018
  401574:	e000ed88 	.word	0xe000ed88
  401578:	00403c61 	.word	0x00403c61
  40157c:	00403a95 	.word	0x00403a95

00401580 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401580:	4b3b      	ldr	r3, [pc, #236]	; (401670 <SystemCoreClockUpdate+0xf0>)
  401582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401584:	f003 0303 	and.w	r3, r3, #3
  401588:	2b01      	cmp	r3, #1
  40158a:	d01d      	beq.n	4015c8 <SystemCoreClockUpdate+0x48>
  40158c:	b183      	cbz	r3, 4015b0 <SystemCoreClockUpdate+0x30>
  40158e:	2b02      	cmp	r3, #2
  401590:	d036      	beq.n	401600 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401592:	4b37      	ldr	r3, [pc, #220]	; (401670 <SystemCoreClockUpdate+0xf0>)
  401594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401596:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40159a:	2b70      	cmp	r3, #112	; 0x70
  40159c:	d05f      	beq.n	40165e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40159e:	4b34      	ldr	r3, [pc, #208]	; (401670 <SystemCoreClockUpdate+0xf0>)
  4015a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015a2:	4934      	ldr	r1, [pc, #208]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015a4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4015a8:	680b      	ldr	r3, [r1, #0]
  4015aa:	40d3      	lsrs	r3, r2
  4015ac:	600b      	str	r3, [r1, #0]
  4015ae:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4015b0:	4b31      	ldr	r3, [pc, #196]	; (401678 <SystemCoreClockUpdate+0xf8>)
  4015b2:	695b      	ldr	r3, [r3, #20]
  4015b4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4015b8:	bf14      	ite	ne
  4015ba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4015be:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4015c2:	4b2c      	ldr	r3, [pc, #176]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015c4:	601a      	str	r2, [r3, #0]
  4015c6:	e7e4      	b.n	401592 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015c8:	4b29      	ldr	r3, [pc, #164]	; (401670 <SystemCoreClockUpdate+0xf0>)
  4015ca:	6a1b      	ldr	r3, [r3, #32]
  4015cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015d0:	d003      	beq.n	4015da <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4015d2:	4a2a      	ldr	r2, [pc, #168]	; (40167c <SystemCoreClockUpdate+0xfc>)
  4015d4:	4b27      	ldr	r3, [pc, #156]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015d6:	601a      	str	r2, [r3, #0]
  4015d8:	e7db      	b.n	401592 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015da:	4a29      	ldr	r2, [pc, #164]	; (401680 <SystemCoreClockUpdate+0x100>)
  4015dc:	4b25      	ldr	r3, [pc, #148]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015de:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015e0:	4b23      	ldr	r3, [pc, #140]	; (401670 <SystemCoreClockUpdate+0xf0>)
  4015e2:	6a1b      	ldr	r3, [r3, #32]
  4015e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015e8:	2b10      	cmp	r3, #16
  4015ea:	d005      	beq.n	4015f8 <SystemCoreClockUpdate+0x78>
  4015ec:	2b20      	cmp	r3, #32
  4015ee:	d1d0      	bne.n	401592 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4015f0:	4a22      	ldr	r2, [pc, #136]	; (40167c <SystemCoreClockUpdate+0xfc>)
  4015f2:	4b20      	ldr	r3, [pc, #128]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015f4:	601a      	str	r2, [r3, #0]
          break;
  4015f6:	e7cc      	b.n	401592 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4015f8:	4a22      	ldr	r2, [pc, #136]	; (401684 <SystemCoreClockUpdate+0x104>)
  4015fa:	4b1e      	ldr	r3, [pc, #120]	; (401674 <SystemCoreClockUpdate+0xf4>)
  4015fc:	601a      	str	r2, [r3, #0]
          break;
  4015fe:	e7c8      	b.n	401592 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401600:	4b1b      	ldr	r3, [pc, #108]	; (401670 <SystemCoreClockUpdate+0xf0>)
  401602:	6a1b      	ldr	r3, [r3, #32]
  401604:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401608:	d016      	beq.n	401638 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40160a:	4a1c      	ldr	r2, [pc, #112]	; (40167c <SystemCoreClockUpdate+0xfc>)
  40160c:	4b19      	ldr	r3, [pc, #100]	; (401674 <SystemCoreClockUpdate+0xf4>)
  40160e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401610:	4b17      	ldr	r3, [pc, #92]	; (401670 <SystemCoreClockUpdate+0xf0>)
  401612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401614:	f003 0303 	and.w	r3, r3, #3
  401618:	2b02      	cmp	r3, #2
  40161a:	d1ba      	bne.n	401592 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40161c:	4a14      	ldr	r2, [pc, #80]	; (401670 <SystemCoreClockUpdate+0xf0>)
  40161e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401620:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401622:	4814      	ldr	r0, [pc, #80]	; (401674 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401624:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401628:	6803      	ldr	r3, [r0, #0]
  40162a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40162e:	b2d2      	uxtb	r2, r2
  401630:	fbb3 f3f2 	udiv	r3, r3, r2
  401634:	6003      	str	r3, [r0, #0]
  401636:	e7ac      	b.n	401592 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401638:	4a11      	ldr	r2, [pc, #68]	; (401680 <SystemCoreClockUpdate+0x100>)
  40163a:	4b0e      	ldr	r3, [pc, #56]	; (401674 <SystemCoreClockUpdate+0xf4>)
  40163c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40163e:	4b0c      	ldr	r3, [pc, #48]	; (401670 <SystemCoreClockUpdate+0xf0>)
  401640:	6a1b      	ldr	r3, [r3, #32]
  401642:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401646:	2b10      	cmp	r3, #16
  401648:	d005      	beq.n	401656 <SystemCoreClockUpdate+0xd6>
  40164a:	2b20      	cmp	r3, #32
  40164c:	d1e0      	bne.n	401610 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40164e:	4a0b      	ldr	r2, [pc, #44]	; (40167c <SystemCoreClockUpdate+0xfc>)
  401650:	4b08      	ldr	r3, [pc, #32]	; (401674 <SystemCoreClockUpdate+0xf4>)
  401652:	601a      	str	r2, [r3, #0]
          break;
  401654:	e7dc      	b.n	401610 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401656:	4a0b      	ldr	r2, [pc, #44]	; (401684 <SystemCoreClockUpdate+0x104>)
  401658:	4b06      	ldr	r3, [pc, #24]	; (401674 <SystemCoreClockUpdate+0xf4>)
  40165a:	601a      	str	r2, [r3, #0]
          break;
  40165c:	e7d8      	b.n	401610 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40165e:	4a05      	ldr	r2, [pc, #20]	; (401674 <SystemCoreClockUpdate+0xf4>)
  401660:	6813      	ldr	r3, [r2, #0]
  401662:	4909      	ldr	r1, [pc, #36]	; (401688 <SystemCoreClockUpdate+0x108>)
  401664:	fba1 1303 	umull	r1, r3, r1, r3
  401668:	085b      	lsrs	r3, r3, #1
  40166a:	6013      	str	r3, [r2, #0]
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop
  401670:	400e0600 	.word	0x400e0600
  401674:	2040001c 	.word	0x2040001c
  401678:	400e1810 	.word	0x400e1810
  40167c:	00b71b00 	.word	0x00b71b00
  401680:	003d0900 	.word	0x003d0900
  401684:	007a1200 	.word	0x007a1200
  401688:	aaaaaaab 	.word	0xaaaaaaab

0040168c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40168c:	4b16      	ldr	r3, [pc, #88]	; (4016e8 <system_init_flash+0x5c>)
  40168e:	4298      	cmp	r0, r3
  401690:	d913      	bls.n	4016ba <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401692:	4b16      	ldr	r3, [pc, #88]	; (4016ec <system_init_flash+0x60>)
  401694:	4298      	cmp	r0, r3
  401696:	d915      	bls.n	4016c4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401698:	4b15      	ldr	r3, [pc, #84]	; (4016f0 <system_init_flash+0x64>)
  40169a:	4298      	cmp	r0, r3
  40169c:	d916      	bls.n	4016cc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40169e:	4b15      	ldr	r3, [pc, #84]	; (4016f4 <system_init_flash+0x68>)
  4016a0:	4298      	cmp	r0, r3
  4016a2:	d917      	bls.n	4016d4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4016a4:	4b14      	ldr	r3, [pc, #80]	; (4016f8 <system_init_flash+0x6c>)
  4016a6:	4298      	cmp	r0, r3
  4016a8:	d918      	bls.n	4016dc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4016aa:	4b14      	ldr	r3, [pc, #80]	; (4016fc <system_init_flash+0x70>)
  4016ac:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016ae:	bf94      	ite	ls
  4016b0:	4a13      	ldrls	r2, [pc, #76]	; (401700 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4016b2:	4a14      	ldrhi	r2, [pc, #80]	; (401704 <system_init_flash+0x78>)
  4016b4:	4b14      	ldr	r3, [pc, #80]	; (401708 <system_init_flash+0x7c>)
  4016b6:	601a      	str	r2, [r3, #0]
  4016b8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016be:	4b12      	ldr	r3, [pc, #72]	; (401708 <system_init_flash+0x7c>)
  4016c0:	601a      	str	r2, [r3, #0]
  4016c2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016c4:	4a11      	ldr	r2, [pc, #68]	; (40170c <system_init_flash+0x80>)
  4016c6:	4b10      	ldr	r3, [pc, #64]	; (401708 <system_init_flash+0x7c>)
  4016c8:	601a      	str	r2, [r3, #0]
  4016ca:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4016cc:	4a10      	ldr	r2, [pc, #64]	; (401710 <system_init_flash+0x84>)
  4016ce:	4b0e      	ldr	r3, [pc, #56]	; (401708 <system_init_flash+0x7c>)
  4016d0:	601a      	str	r2, [r3, #0]
  4016d2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4016d4:	4a0f      	ldr	r2, [pc, #60]	; (401714 <system_init_flash+0x88>)
  4016d6:	4b0c      	ldr	r3, [pc, #48]	; (401708 <system_init_flash+0x7c>)
  4016d8:	601a      	str	r2, [r3, #0]
  4016da:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4016dc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4016e0:	4b09      	ldr	r3, [pc, #36]	; (401708 <system_init_flash+0x7c>)
  4016e2:	601a      	str	r2, [r3, #0]
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	015ef3bf 	.word	0x015ef3bf
  4016ec:	02bde77f 	.word	0x02bde77f
  4016f0:	041cdb3f 	.word	0x041cdb3f
  4016f4:	057bceff 	.word	0x057bceff
  4016f8:	06dac2bf 	.word	0x06dac2bf
  4016fc:	0839b67f 	.word	0x0839b67f
  401700:	04000500 	.word	0x04000500
  401704:	04000600 	.word	0x04000600
  401708:	400e0c00 	.word	0x400e0c00
  40170c:	04000100 	.word	0x04000100
  401710:	04000200 	.word	0x04000200
  401714:	04000300 	.word	0x04000300

00401718 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401718:	4b0a      	ldr	r3, [pc, #40]	; (401744 <_sbrk+0x2c>)
  40171a:	681b      	ldr	r3, [r3, #0]
  40171c:	b153      	cbz	r3, 401734 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40171e:	4b09      	ldr	r3, [pc, #36]	; (401744 <_sbrk+0x2c>)
  401720:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401722:	181a      	adds	r2, r3, r0
  401724:	4908      	ldr	r1, [pc, #32]	; (401748 <_sbrk+0x30>)
  401726:	4291      	cmp	r1, r2
  401728:	db08      	blt.n	40173c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40172a:	4610      	mov	r0, r2
  40172c:	4a05      	ldr	r2, [pc, #20]	; (401744 <_sbrk+0x2c>)
  40172e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401730:	4618      	mov	r0, r3
  401732:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401734:	4a05      	ldr	r2, [pc, #20]	; (40174c <_sbrk+0x34>)
  401736:	4b03      	ldr	r3, [pc, #12]	; (401744 <_sbrk+0x2c>)
  401738:	601a      	str	r2, [r3, #0]
  40173a:	e7f0      	b.n	40171e <_sbrk+0x6>
		return (caddr_t) -1;	
  40173c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401740:	4770      	bx	lr
  401742:	bf00      	nop
  401744:	20400c68 	.word	0x20400c68
  401748:	2045fffc 	.word	0x2045fffc
  40174c:	20403060 	.word	0x20403060

00401750 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401750:	f04f 30ff 	mov.w	r0, #4294967295
  401754:	4770      	bx	lr

00401756 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40175a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40175c:	2000      	movs	r0, #0
  40175e:	4770      	bx	lr

00401760 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401760:	2001      	movs	r0, #1
  401762:	4770      	bx	lr

00401764 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401764:	2000      	movs	r0, #0
  401766:	4770      	bx	lr

00401768 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401768:	f100 0308 	add.w	r3, r0, #8
  40176c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40176e:	f04f 32ff 	mov.w	r2, #4294967295
  401772:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401774:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401776:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401778:	2300      	movs	r3, #0
  40177a:	6003      	str	r3, [r0, #0]
  40177c:	4770      	bx	lr

0040177e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40177e:	2300      	movs	r3, #0
  401780:	6103      	str	r3, [r0, #16]
  401782:	4770      	bx	lr

00401784 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401784:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401786:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401788:	689a      	ldr	r2, [r3, #8]
  40178a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40178c:	689a      	ldr	r2, [r3, #8]
  40178e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401790:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401792:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401794:	6803      	ldr	r3, [r0, #0]
  401796:	3301      	adds	r3, #1
  401798:	6003      	str	r3, [r0, #0]
  40179a:	4770      	bx	lr

0040179c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40179c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40179e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4017a0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017a4:	d002      	beq.n	4017ac <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017a6:	f100 0208 	add.w	r2, r0, #8
  4017aa:	e002      	b.n	4017b2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4017ac:	6902      	ldr	r2, [r0, #16]
  4017ae:	e004      	b.n	4017ba <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4017b0:	461a      	mov	r2, r3
  4017b2:	6853      	ldr	r3, [r2, #4]
  4017b4:	681c      	ldr	r4, [r3, #0]
  4017b6:	42a5      	cmp	r5, r4
  4017b8:	d2fa      	bcs.n	4017b0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4017ba:	6853      	ldr	r3, [r2, #4]
  4017bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4017be:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4017c0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4017c2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4017c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4017c6:	6803      	ldr	r3, [r0, #0]
  4017c8:	3301      	adds	r3, #1
  4017ca:	6003      	str	r3, [r0, #0]
}
  4017cc:	bc30      	pop	{r4, r5}
  4017ce:	4770      	bx	lr

004017d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4017d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4017d2:	6842      	ldr	r2, [r0, #4]
  4017d4:	6881      	ldr	r1, [r0, #8]
  4017d6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4017d8:	6882      	ldr	r2, [r0, #8]
  4017da:	6841      	ldr	r1, [r0, #4]
  4017dc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4017de:	685a      	ldr	r2, [r3, #4]
  4017e0:	4290      	cmp	r0, r2
  4017e2:	d005      	beq.n	4017f0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4017e4:	2200      	movs	r2, #0
  4017e6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4017e8:	6818      	ldr	r0, [r3, #0]
  4017ea:	3801      	subs	r0, #1
  4017ec:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4017ee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4017f0:	6882      	ldr	r2, [r0, #8]
  4017f2:	605a      	str	r2, [r3, #4]
  4017f4:	e7f6      	b.n	4017e4 <uxListRemove+0x14>
	...

004017f8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4017f8:	4b0d      	ldr	r3, [pc, #52]	; (401830 <prvTaskExitError+0x38>)
  4017fa:	681b      	ldr	r3, [r3, #0]
  4017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401800:	d00a      	beq.n	401818 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401802:	f04f 0380 	mov.w	r3, #128	; 0x80
  401806:	b672      	cpsid	i
  401808:	f383 8811 	msr	BASEPRI, r3
  40180c:	f3bf 8f6f 	isb	sy
  401810:	f3bf 8f4f 	dsb	sy
  401814:	b662      	cpsie	i
  401816:	e7fe      	b.n	401816 <prvTaskExitError+0x1e>
  401818:	f04f 0380 	mov.w	r3, #128	; 0x80
  40181c:	b672      	cpsid	i
  40181e:	f383 8811 	msr	BASEPRI, r3
  401822:	f3bf 8f6f 	isb	sy
  401826:	f3bf 8f4f 	dsb	sy
  40182a:	b662      	cpsie	i
  40182c:	e7fe      	b.n	40182c <prvTaskExitError+0x34>
  40182e:	bf00      	nop
  401830:	20400020 	.word	0x20400020

00401834 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401834:	4806      	ldr	r0, [pc, #24]	; (401850 <prvPortStartFirstTask+0x1c>)
  401836:	6800      	ldr	r0, [r0, #0]
  401838:	6800      	ldr	r0, [r0, #0]
  40183a:	f380 8808 	msr	MSP, r0
  40183e:	b662      	cpsie	i
  401840:	b661      	cpsie	f
  401842:	f3bf 8f4f 	dsb	sy
  401846:	f3bf 8f6f 	isb	sy
  40184a:	df00      	svc	0
  40184c:	bf00      	nop
  40184e:	0000      	.short	0x0000
  401850:	e000ed08 	.word	0xe000ed08

00401854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401864 <vPortEnableVFP+0x10>
  401858:	6801      	ldr	r1, [r0, #0]
  40185a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40185e:	6001      	str	r1, [r0, #0]
  401860:	4770      	bx	lr
  401862:	0000      	.short	0x0000
  401864:	e000ed88 	.word	0xe000ed88

00401868 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40186c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401870:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401874:	4b05      	ldr	r3, [pc, #20]	; (40188c <pxPortInitialiseStack+0x24>)
  401876:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40187a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40187e:	f06f 0302 	mvn.w	r3, #2
  401882:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401886:	3844      	subs	r0, #68	; 0x44
  401888:	4770      	bx	lr
  40188a:	bf00      	nop
  40188c:	004017f9 	.word	0x004017f9

00401890 <SVC_Handler>:
	__asm volatile (
  401890:	4b06      	ldr	r3, [pc, #24]	; (4018ac <pxCurrentTCBConst2>)
  401892:	6819      	ldr	r1, [r3, #0]
  401894:	6808      	ldr	r0, [r1, #0]
  401896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40189a:	f380 8809 	msr	PSP, r0
  40189e:	f3bf 8f6f 	isb	sy
  4018a2:	f04f 0000 	mov.w	r0, #0
  4018a6:	f380 8811 	msr	BASEPRI, r0
  4018aa:	4770      	bx	lr

004018ac <pxCurrentTCBConst2>:
  4018ac:	20400c74 	.word	0x20400c74
  4018b0:	4770      	bx	lr
  4018b2:	bf00      	nop

004018b4 <vPortEnterCritical>:
  4018b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018b8:	b672      	cpsid	i
  4018ba:	f383 8811 	msr	BASEPRI, r3
  4018be:	f3bf 8f6f 	isb	sy
  4018c2:	f3bf 8f4f 	dsb	sy
  4018c6:	b662      	cpsie	i
	uxCriticalNesting++;
  4018c8:	4a0b      	ldr	r2, [pc, #44]	; (4018f8 <vPortEnterCritical+0x44>)
  4018ca:	6813      	ldr	r3, [r2, #0]
  4018cc:	3301      	adds	r3, #1
  4018ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4018d0:	2b01      	cmp	r3, #1
  4018d2:	d10f      	bne.n	4018f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4018d4:	4b09      	ldr	r3, [pc, #36]	; (4018fc <vPortEnterCritical+0x48>)
  4018d6:	681b      	ldr	r3, [r3, #0]
  4018d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4018dc:	d00a      	beq.n	4018f4 <vPortEnterCritical+0x40>
  4018de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018e2:	b672      	cpsid	i
  4018e4:	f383 8811 	msr	BASEPRI, r3
  4018e8:	f3bf 8f6f 	isb	sy
  4018ec:	f3bf 8f4f 	dsb	sy
  4018f0:	b662      	cpsie	i
  4018f2:	e7fe      	b.n	4018f2 <vPortEnterCritical+0x3e>
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop
  4018f8:	20400020 	.word	0x20400020
  4018fc:	e000ed04 	.word	0xe000ed04

00401900 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401900:	4b0a      	ldr	r3, [pc, #40]	; (40192c <vPortExitCritical+0x2c>)
  401902:	681b      	ldr	r3, [r3, #0]
  401904:	b953      	cbnz	r3, 40191c <vPortExitCritical+0x1c>
  401906:	f04f 0380 	mov.w	r3, #128	; 0x80
  40190a:	b672      	cpsid	i
  40190c:	f383 8811 	msr	BASEPRI, r3
  401910:	f3bf 8f6f 	isb	sy
  401914:	f3bf 8f4f 	dsb	sy
  401918:	b662      	cpsie	i
  40191a:	e7fe      	b.n	40191a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40191c:	3b01      	subs	r3, #1
  40191e:	4a03      	ldr	r2, [pc, #12]	; (40192c <vPortExitCritical+0x2c>)
  401920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401922:	b90b      	cbnz	r3, 401928 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401924:	f383 8811 	msr	BASEPRI, r3
  401928:	4770      	bx	lr
  40192a:	bf00      	nop
  40192c:	20400020 	.word	0x20400020

00401930 <PendSV_Handler>:
	__asm volatile
  401930:	f3ef 8009 	mrs	r0, PSP
  401934:	f3bf 8f6f 	isb	sy
  401938:	4b15      	ldr	r3, [pc, #84]	; (401990 <pxCurrentTCBConst>)
  40193a:	681a      	ldr	r2, [r3, #0]
  40193c:	f01e 0f10 	tst.w	lr, #16
  401940:	bf08      	it	eq
  401942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40194a:	6010      	str	r0, [r2, #0]
  40194c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401950:	f04f 0080 	mov.w	r0, #128	; 0x80
  401954:	b672      	cpsid	i
  401956:	f380 8811 	msr	BASEPRI, r0
  40195a:	f3bf 8f4f 	dsb	sy
  40195e:	f3bf 8f6f 	isb	sy
  401962:	b662      	cpsie	i
  401964:	f001 f8b8 	bl	402ad8 <vTaskSwitchContext>
  401968:	f04f 0000 	mov.w	r0, #0
  40196c:	f380 8811 	msr	BASEPRI, r0
  401970:	bc08      	pop	{r3}
  401972:	6819      	ldr	r1, [r3, #0]
  401974:	6808      	ldr	r0, [r1, #0]
  401976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40197a:	f01e 0f10 	tst.w	lr, #16
  40197e:	bf08      	it	eq
  401980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401984:	f380 8809 	msr	PSP, r0
  401988:	f3bf 8f6f 	isb	sy
  40198c:	4770      	bx	lr
  40198e:	bf00      	nop

00401990 <pxCurrentTCBConst>:
  401990:	20400c74 	.word	0x20400c74
  401994:	4770      	bx	lr
  401996:	bf00      	nop

00401998 <SysTick_Handler>:
{
  401998:	b508      	push	{r3, lr}
	__asm volatile
  40199a:	f3ef 8311 	mrs	r3, BASEPRI
  40199e:	f04f 0280 	mov.w	r2, #128	; 0x80
  4019a2:	b672      	cpsid	i
  4019a4:	f382 8811 	msr	BASEPRI, r2
  4019a8:	f3bf 8f6f 	isb	sy
  4019ac:	f3bf 8f4f 	dsb	sy
  4019b0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4019b2:	4b05      	ldr	r3, [pc, #20]	; (4019c8 <SysTick_Handler+0x30>)
  4019b4:	4798      	blx	r3
  4019b6:	b118      	cbz	r0, 4019c0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4019b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019bc:	4b03      	ldr	r3, [pc, #12]	; (4019cc <SysTick_Handler+0x34>)
  4019be:	601a      	str	r2, [r3, #0]
	__asm volatile
  4019c0:	2300      	movs	r3, #0
  4019c2:	f383 8811 	msr	BASEPRI, r3
  4019c6:	bd08      	pop	{r3, pc}
  4019c8:	004027d5 	.word	0x004027d5
  4019cc:	e000ed04 	.word	0xe000ed04

004019d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4019d0:	4a03      	ldr	r2, [pc, #12]	; (4019e0 <vPortSetupTimerInterrupt+0x10>)
  4019d2:	4b04      	ldr	r3, [pc, #16]	; (4019e4 <vPortSetupTimerInterrupt+0x14>)
  4019d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4019d6:	2207      	movs	r2, #7
  4019d8:	3b04      	subs	r3, #4
  4019da:	601a      	str	r2, [r3, #0]
  4019dc:	4770      	bx	lr
  4019de:	bf00      	nop
  4019e0:	000927bf 	.word	0x000927bf
  4019e4:	e000e014 	.word	0xe000e014

004019e8 <xPortStartScheduler>:
{
  4019e8:	b500      	push	{lr}
  4019ea:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4019ec:	4b25      	ldr	r3, [pc, #148]	; (401a84 <xPortStartScheduler+0x9c>)
  4019ee:	781a      	ldrb	r2, [r3, #0]
  4019f0:	b2d2      	uxtb	r2, r2
  4019f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4019f4:	22ff      	movs	r2, #255	; 0xff
  4019f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4019f8:	781b      	ldrb	r3, [r3, #0]
  4019fa:	b2db      	uxtb	r3, r3
  4019fc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401a00:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a08:	4a1f      	ldr	r2, [pc, #124]	; (401a88 <xPortStartScheduler+0xa0>)
  401a0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401a0c:	2207      	movs	r2, #7
  401a0e:	4b1f      	ldr	r3, [pc, #124]	; (401a8c <xPortStartScheduler+0xa4>)
  401a10:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a12:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a16:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a1a:	d010      	beq.n	401a3e <xPortStartScheduler+0x56>
  401a1c:	2206      	movs	r2, #6
  401a1e:	e000      	b.n	401a22 <xPortStartScheduler+0x3a>
  401a20:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401a22:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a26:	005b      	lsls	r3, r3, #1
  401a28:	b2db      	uxtb	r3, r3
  401a2a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401a2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a32:	1e51      	subs	r1, r2, #1
  401a34:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a38:	d1f2      	bne.n	401a20 <xPortStartScheduler+0x38>
  401a3a:	4b14      	ldr	r3, [pc, #80]	; (401a8c <xPortStartScheduler+0xa4>)
  401a3c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401a3e:	4a13      	ldr	r2, [pc, #76]	; (401a8c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401a40:	6813      	ldr	r3, [r2, #0]
  401a42:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a48:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401a4a:	9b01      	ldr	r3, [sp, #4]
  401a4c:	b2db      	uxtb	r3, r3
  401a4e:	4a0d      	ldr	r2, [pc, #52]	; (401a84 <xPortStartScheduler+0x9c>)
  401a50:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401a52:	4b0f      	ldr	r3, [pc, #60]	; (401a90 <xPortStartScheduler+0xa8>)
  401a54:	681a      	ldr	r2, [r3, #0]
  401a56:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401a5a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401a5c:	681a      	ldr	r2, [r3, #0]
  401a5e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401a62:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401a64:	4b0b      	ldr	r3, [pc, #44]	; (401a94 <xPortStartScheduler+0xac>)
  401a66:	4798      	blx	r3
	uxCriticalNesting = 0;
  401a68:	2200      	movs	r2, #0
  401a6a:	4b0b      	ldr	r3, [pc, #44]	; (401a98 <xPortStartScheduler+0xb0>)
  401a6c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401a6e:	4b0b      	ldr	r3, [pc, #44]	; (401a9c <xPortStartScheduler+0xb4>)
  401a70:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401a72:	4a0b      	ldr	r2, [pc, #44]	; (401aa0 <xPortStartScheduler+0xb8>)
  401a74:	6813      	ldr	r3, [r2, #0]
  401a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401a7a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401a7c:	4b09      	ldr	r3, [pc, #36]	; (401aa4 <xPortStartScheduler+0xbc>)
  401a7e:	4798      	blx	r3
	prvTaskExitError();
  401a80:	4b09      	ldr	r3, [pc, #36]	; (401aa8 <xPortStartScheduler+0xc0>)
  401a82:	4798      	blx	r3
  401a84:	e000e400 	.word	0xe000e400
  401a88:	20400c6c 	.word	0x20400c6c
  401a8c:	20400c70 	.word	0x20400c70
  401a90:	e000ed20 	.word	0xe000ed20
  401a94:	004019d1 	.word	0x004019d1
  401a98:	20400020 	.word	0x20400020
  401a9c:	00401855 	.word	0x00401855
  401aa0:	e000ef34 	.word	0xe000ef34
  401aa4:	00401835 	.word	0x00401835
  401aa8:	004017f9 	.word	0x004017f9

00401aac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401aac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401ab0:	2b0f      	cmp	r3, #15
  401ab2:	d911      	bls.n	401ad8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401ab4:	4a12      	ldr	r2, [pc, #72]	; (401b00 <vPortValidateInterruptPriority+0x54>)
  401ab6:	5c9b      	ldrb	r3, [r3, r2]
  401ab8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401aba:	4a12      	ldr	r2, [pc, #72]	; (401b04 <vPortValidateInterruptPriority+0x58>)
  401abc:	7812      	ldrb	r2, [r2, #0]
  401abe:	429a      	cmp	r2, r3
  401ac0:	d90a      	bls.n	401ad8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac6:	b672      	cpsid	i
  401ac8:	f383 8811 	msr	BASEPRI, r3
  401acc:	f3bf 8f6f 	isb	sy
  401ad0:	f3bf 8f4f 	dsb	sy
  401ad4:	b662      	cpsie	i
  401ad6:	e7fe      	b.n	401ad6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401ad8:	4b0b      	ldr	r3, [pc, #44]	; (401b08 <vPortValidateInterruptPriority+0x5c>)
  401ada:	681b      	ldr	r3, [r3, #0]
  401adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401ae0:	4a0a      	ldr	r2, [pc, #40]	; (401b0c <vPortValidateInterruptPriority+0x60>)
  401ae2:	6812      	ldr	r2, [r2, #0]
  401ae4:	4293      	cmp	r3, r2
  401ae6:	d90a      	bls.n	401afe <vPortValidateInterruptPriority+0x52>
  401ae8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aec:	b672      	cpsid	i
  401aee:	f383 8811 	msr	BASEPRI, r3
  401af2:	f3bf 8f6f 	isb	sy
  401af6:	f3bf 8f4f 	dsb	sy
  401afa:	b662      	cpsie	i
  401afc:	e7fe      	b.n	401afc <vPortValidateInterruptPriority+0x50>
  401afe:	4770      	bx	lr
  401b00:	e000e3f0 	.word	0xe000e3f0
  401b04:	20400c6c 	.word	0x20400c6c
  401b08:	e000ed0c 	.word	0xe000ed0c
  401b0c:	20400c70 	.word	0x20400c70

00401b10 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401b10:	b510      	push	{r4, lr}
  401b12:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401b14:	4b06      	ldr	r3, [pc, #24]	; (401b30 <pvPortMalloc+0x20>)
  401b16:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401b18:	4620      	mov	r0, r4
  401b1a:	4b06      	ldr	r3, [pc, #24]	; (401b34 <pvPortMalloc+0x24>)
  401b1c:	4798      	blx	r3
  401b1e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401b20:	4b05      	ldr	r3, [pc, #20]	; (401b38 <pvPortMalloc+0x28>)
  401b22:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401b24:	b10c      	cbz	r4, 401b2a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401b26:	4620      	mov	r0, r4
  401b28:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401b2a:	4b04      	ldr	r3, [pc, #16]	; (401b3c <pvPortMalloc+0x2c>)
  401b2c:	4798      	blx	r3
	return pvReturn;
  401b2e:	e7fa      	b.n	401b26 <pvPortMalloc+0x16>
  401b30:	004027b9 	.word	0x004027b9
  401b34:	00403cd9 	.word	0x00403cd9
  401b38:	00402921 	.word	0x00402921
  401b3c:	0040360b 	.word	0x0040360b

00401b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401b40:	b148      	cbz	r0, 401b56 <vPortFree+0x16>
{
  401b42:	b510      	push	{r4, lr}
  401b44:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401b46:	4b04      	ldr	r3, [pc, #16]	; (401b58 <vPortFree+0x18>)
  401b48:	4798      	blx	r3
		{
			free( pv );
  401b4a:	4620      	mov	r0, r4
  401b4c:	4b03      	ldr	r3, [pc, #12]	; (401b5c <vPortFree+0x1c>)
  401b4e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401b50:	4b03      	ldr	r3, [pc, #12]	; (401b60 <vPortFree+0x20>)
  401b52:	4798      	blx	r3
  401b54:	bd10      	pop	{r4, pc}
  401b56:	4770      	bx	lr
  401b58:	004027b9 	.word	0x004027b9
  401b5c:	00403ce9 	.word	0x00403ce9
  401b60:	00402921 	.word	0x00402921

00401b64 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401b64:	b538      	push	{r3, r4, r5, lr}
  401b66:	4604      	mov	r4, r0
  401b68:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401b6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b6c:	b95a      	cbnz	r2, 401b86 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b6e:	6803      	ldr	r3, [r0, #0]
  401b70:	2b00      	cmp	r3, #0
  401b72:	d12e      	bne.n	401bd2 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401b74:	6840      	ldr	r0, [r0, #4]
  401b76:	4b1b      	ldr	r3, [pc, #108]	; (401be4 <prvCopyDataToQueue+0x80>)
  401b78:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401b7a:	2300      	movs	r3, #0
  401b7c:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b80:	3301      	adds	r3, #1
  401b82:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401b84:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401b86:	b96d      	cbnz	r5, 401ba4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401b88:	6880      	ldr	r0, [r0, #8]
  401b8a:	4b17      	ldr	r3, [pc, #92]	; (401be8 <prvCopyDataToQueue+0x84>)
  401b8c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401b8e:	68a3      	ldr	r3, [r4, #8]
  401b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401b92:	4413      	add	r3, r2
  401b94:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401b96:	6862      	ldr	r2, [r4, #4]
  401b98:	4293      	cmp	r3, r2
  401b9a:	d31c      	bcc.n	401bd6 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401b9c:	6823      	ldr	r3, [r4, #0]
  401b9e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401ba0:	2000      	movs	r0, #0
  401ba2:	e7ec      	b.n	401b7e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ba4:	68c0      	ldr	r0, [r0, #12]
  401ba6:	4b10      	ldr	r3, [pc, #64]	; (401be8 <prvCopyDataToQueue+0x84>)
  401ba8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401bac:	425b      	negs	r3, r3
  401bae:	68e2      	ldr	r2, [r4, #12]
  401bb0:	441a      	add	r2, r3
  401bb2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401bb4:	6821      	ldr	r1, [r4, #0]
  401bb6:	428a      	cmp	r2, r1
  401bb8:	d202      	bcs.n	401bc0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401bba:	6862      	ldr	r2, [r4, #4]
  401bbc:	4413      	add	r3, r2
  401bbe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401bc0:	2d02      	cmp	r5, #2
  401bc2:	d10a      	bne.n	401bda <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bc6:	b153      	cbz	r3, 401bde <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bca:	3b01      	subs	r3, #1
  401bcc:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401bce:	2000      	movs	r0, #0
  401bd0:	e7d5      	b.n	401b7e <prvCopyDataToQueue+0x1a>
  401bd2:	2000      	movs	r0, #0
  401bd4:	e7d3      	b.n	401b7e <prvCopyDataToQueue+0x1a>
  401bd6:	2000      	movs	r0, #0
  401bd8:	e7d1      	b.n	401b7e <prvCopyDataToQueue+0x1a>
  401bda:	2000      	movs	r0, #0
  401bdc:	e7cf      	b.n	401b7e <prvCopyDataToQueue+0x1a>
  401bde:	2000      	movs	r0, #0
  401be0:	e7cd      	b.n	401b7e <prvCopyDataToQueue+0x1a>
  401be2:	bf00      	nop
  401be4:	00402ed9 	.word	0x00402ed9
  401be8:	00404259 	.word	0x00404259

00401bec <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401bec:	b530      	push	{r4, r5, lr}
  401bee:	b083      	sub	sp, #12
  401bf0:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401bf2:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401bf4:	b174      	cbz	r4, 401c14 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d315      	bcc.n	401c2a <prvNotifyQueueSetContainer+0x3e>
  401bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c02:	b672      	cpsid	i
  401c04:	f383 8811 	msr	BASEPRI, r3
  401c08:	f3bf 8f6f 	isb	sy
  401c0c:	f3bf 8f4f 	dsb	sy
  401c10:	b662      	cpsie	i
  401c12:	e7fe      	b.n	401c12 <prvNotifyQueueSetContainer+0x26>
  401c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c18:	b672      	cpsid	i
  401c1a:	f383 8811 	msr	BASEPRI, r3
  401c1e:	f3bf 8f6f 	isb	sy
  401c22:	f3bf 8f4f 	dsb	sy
  401c26:	b662      	cpsie	i
  401c28:	e7fe      	b.n	401c28 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401c2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c2c:	4293      	cmp	r3, r2
  401c2e:	d803      	bhi.n	401c38 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401c30:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401c32:	4628      	mov	r0, r5
  401c34:	b003      	add	sp, #12
  401c36:	bd30      	pop	{r4, r5, pc}
  401c38:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401c3a:	a901      	add	r1, sp, #4
  401c3c:	4620      	mov	r0, r4
  401c3e:	4b0b      	ldr	r3, [pc, #44]	; (401c6c <prvNotifyQueueSetContainer+0x80>)
  401c40:	4798      	blx	r3
  401c42:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401c44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c4a:	d10a      	bne.n	401c62 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c4e:	2b00      	cmp	r3, #0
  401c50:	d0ef      	beq.n	401c32 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401c52:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c56:	4b06      	ldr	r3, [pc, #24]	; (401c70 <prvNotifyQueueSetContainer+0x84>)
  401c58:	4798      	blx	r3
  401c5a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401c5c:	bf18      	it	ne
  401c5e:	2501      	movne	r5, #1
  401c60:	e7e7      	b.n	401c32 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401c62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c64:	3301      	adds	r3, #1
  401c66:	64a3      	str	r3, [r4, #72]	; 0x48
  401c68:	e7e3      	b.n	401c32 <prvNotifyQueueSetContainer+0x46>
  401c6a:	bf00      	nop
  401c6c:	00401b65 	.word	0x00401b65
  401c70:	00402cad 	.word	0x00402cad

00401c74 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401c74:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c76:	b172      	cbz	r2, 401c96 <prvCopyDataFromQueue+0x22>
{
  401c78:	b510      	push	{r4, lr}
  401c7a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401c7c:	68c4      	ldr	r4, [r0, #12]
  401c7e:	4414      	add	r4, r2
  401c80:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401c82:	6840      	ldr	r0, [r0, #4]
  401c84:	4284      	cmp	r4, r0
  401c86:	d301      	bcc.n	401c8c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401c88:	6818      	ldr	r0, [r3, #0]
  401c8a:	60d8      	str	r0, [r3, #12]
  401c8c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401c8e:	68d9      	ldr	r1, [r3, #12]
  401c90:	4b01      	ldr	r3, [pc, #4]	; (401c98 <prvCopyDataFromQueue+0x24>)
  401c92:	4798      	blx	r3
  401c94:	bd10      	pop	{r4, pc}
  401c96:	4770      	bx	lr
  401c98:	00404259 	.word	0x00404259

00401c9c <prvUnlockQueue>:
{
  401c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c9e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401ca0:	4b22      	ldr	r3, [pc, #136]	; (401d2c <prvUnlockQueue+0x90>)
  401ca2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401ca4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ca6:	2b00      	cmp	r3, #0
  401ca8:	dd1b      	ble.n	401ce2 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401caa:	4d21      	ldr	r5, [pc, #132]	; (401d30 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401cac:	4f21      	ldr	r7, [pc, #132]	; (401d34 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401cae:	4e22      	ldr	r6, [pc, #136]	; (401d38 <prvUnlockQueue+0x9c>)
  401cb0:	e00b      	b.n	401cca <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cb4:	b1ab      	cbz	r3, 401ce2 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401cb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cba:	47b0      	blx	r6
  401cbc:	b978      	cbnz	r0, 401cde <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401cbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cc0:	3b01      	subs	r3, #1
  401cc2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401cc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cc6:	2b00      	cmp	r3, #0
  401cc8:	dd0b      	ble.n	401ce2 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401cca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ccc:	2b00      	cmp	r3, #0
  401cce:	d0f0      	beq.n	401cb2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401cd0:	2100      	movs	r1, #0
  401cd2:	4620      	mov	r0, r4
  401cd4:	47a8      	blx	r5
  401cd6:	2801      	cmp	r0, #1
  401cd8:	d1f1      	bne.n	401cbe <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401cda:	47b8      	blx	r7
  401cdc:	e7ef      	b.n	401cbe <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401cde:	47b8      	blx	r7
  401ce0:	e7ed      	b.n	401cbe <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401ce2:	f04f 33ff 	mov.w	r3, #4294967295
  401ce6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401ce8:	4b14      	ldr	r3, [pc, #80]	; (401d3c <prvUnlockQueue+0xa0>)
  401cea:	4798      	blx	r3
	taskENTER_CRITICAL();
  401cec:	4b0f      	ldr	r3, [pc, #60]	; (401d2c <prvUnlockQueue+0x90>)
  401cee:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cf2:	2b00      	cmp	r3, #0
  401cf4:	dd14      	ble.n	401d20 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401cf6:	6923      	ldr	r3, [r4, #16]
  401cf8:	b193      	cbz	r3, 401d20 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401cfa:	f104 0610 	add.w	r6, r4, #16
  401cfe:	4d0e      	ldr	r5, [pc, #56]	; (401d38 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401d00:	4f0c      	ldr	r7, [pc, #48]	; (401d34 <prvUnlockQueue+0x98>)
  401d02:	e007      	b.n	401d14 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401d04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d06:	3b01      	subs	r3, #1
  401d08:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401d0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d0c:	2b00      	cmp	r3, #0
  401d0e:	dd07      	ble.n	401d20 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d10:	6923      	ldr	r3, [r4, #16]
  401d12:	b12b      	cbz	r3, 401d20 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401d14:	4630      	mov	r0, r6
  401d16:	47a8      	blx	r5
  401d18:	2800      	cmp	r0, #0
  401d1a:	d0f3      	beq.n	401d04 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401d1c:	47b8      	blx	r7
  401d1e:	e7f1      	b.n	401d04 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401d20:	f04f 33ff 	mov.w	r3, #4294967295
  401d24:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401d26:	4b05      	ldr	r3, [pc, #20]	; (401d3c <prvUnlockQueue+0xa0>)
  401d28:	4798      	blx	r3
  401d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d2c:	004018b5 	.word	0x004018b5
  401d30:	00401bed 	.word	0x00401bed
  401d34:	00402e09 	.word	0x00402e09
  401d38:	00402cad 	.word	0x00402cad
  401d3c:	00401901 	.word	0x00401901

00401d40 <xQueueGenericReset>:
{
  401d40:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401d42:	b308      	cbz	r0, 401d88 <xQueueGenericReset+0x48>
  401d44:	4604      	mov	r4, r0
  401d46:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401d48:	4b1d      	ldr	r3, [pc, #116]	; (401dc0 <xQueueGenericReset+0x80>)
  401d4a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401d4c:	6822      	ldr	r2, [r4, #0]
  401d4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401d50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d52:	fb03 f301 	mul.w	r3, r3, r1
  401d56:	18d0      	adds	r0, r2, r3
  401d58:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401d5a:	2000      	movs	r0, #0
  401d5c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401d5e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401d60:	1a5b      	subs	r3, r3, r1
  401d62:	4413      	add	r3, r2
  401d64:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401d66:	f04f 33ff 	mov.w	r3, #4294967295
  401d6a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401d6c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401d6e:	b9fd      	cbnz	r5, 401db0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d70:	6923      	ldr	r3, [r4, #16]
  401d72:	b12b      	cbz	r3, 401d80 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401d74:	f104 0010 	add.w	r0, r4, #16
  401d78:	4b12      	ldr	r3, [pc, #72]	; (401dc4 <xQueueGenericReset+0x84>)
  401d7a:	4798      	blx	r3
  401d7c:	2801      	cmp	r0, #1
  401d7e:	d00e      	beq.n	401d9e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401d80:	4b11      	ldr	r3, [pc, #68]	; (401dc8 <xQueueGenericReset+0x88>)
  401d82:	4798      	blx	r3
}
  401d84:	2001      	movs	r0, #1
  401d86:	bd38      	pop	{r3, r4, r5, pc}
  401d88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8c:	b672      	cpsid	i
  401d8e:	f383 8811 	msr	BASEPRI, r3
  401d92:	f3bf 8f6f 	isb	sy
  401d96:	f3bf 8f4f 	dsb	sy
  401d9a:	b662      	cpsie	i
  401d9c:	e7fe      	b.n	401d9c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401da2:	4b0a      	ldr	r3, [pc, #40]	; (401dcc <xQueueGenericReset+0x8c>)
  401da4:	601a      	str	r2, [r3, #0]
  401da6:	f3bf 8f4f 	dsb	sy
  401daa:	f3bf 8f6f 	isb	sy
  401dae:	e7e7      	b.n	401d80 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401db0:	f104 0010 	add.w	r0, r4, #16
  401db4:	4d06      	ldr	r5, [pc, #24]	; (401dd0 <xQueueGenericReset+0x90>)
  401db6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401dbc:	47a8      	blx	r5
  401dbe:	e7df      	b.n	401d80 <xQueueGenericReset+0x40>
  401dc0:	004018b5 	.word	0x004018b5
  401dc4:	00402cad 	.word	0x00402cad
  401dc8:	00401901 	.word	0x00401901
  401dcc:	e000ed04 	.word	0xe000ed04
  401dd0:	00401769 	.word	0x00401769

00401dd4 <xQueueGenericCreate>:
{
  401dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401dd6:	b950      	cbnz	r0, 401dee <xQueueGenericCreate+0x1a>
  401dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ddc:	b672      	cpsid	i
  401dde:	f383 8811 	msr	BASEPRI, r3
  401de2:	f3bf 8f6f 	isb	sy
  401de6:	f3bf 8f4f 	dsb	sy
  401dea:	b662      	cpsie	i
  401dec:	e7fe      	b.n	401dec <xQueueGenericCreate+0x18>
  401dee:	4606      	mov	r6, r0
  401df0:	4617      	mov	r7, r2
  401df2:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401df4:	b189      	cbz	r1, 401e1a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401df6:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401dfa:	3059      	adds	r0, #89	; 0x59
  401dfc:	4b12      	ldr	r3, [pc, #72]	; (401e48 <xQueueGenericCreate+0x74>)
  401dfe:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401e00:	4604      	mov	r4, r0
  401e02:	b9e8      	cbnz	r0, 401e40 <xQueueGenericCreate+0x6c>
  401e04:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e08:	b672      	cpsid	i
  401e0a:	f383 8811 	msr	BASEPRI, r3
  401e0e:	f3bf 8f6f 	isb	sy
  401e12:	f3bf 8f4f 	dsb	sy
  401e16:	b662      	cpsie	i
  401e18:	e7fe      	b.n	401e18 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401e1a:	2058      	movs	r0, #88	; 0x58
  401e1c:	4b0a      	ldr	r3, [pc, #40]	; (401e48 <xQueueGenericCreate+0x74>)
  401e1e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401e20:	4604      	mov	r4, r0
  401e22:	2800      	cmp	r0, #0
  401e24:	d0ee      	beq.n	401e04 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401e26:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401e28:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401e2a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401e2c:	2101      	movs	r1, #1
  401e2e:	4620      	mov	r0, r4
  401e30:	4b06      	ldr	r3, [pc, #24]	; (401e4c <xQueueGenericCreate+0x78>)
  401e32:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401e34:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401e38:	2300      	movs	r3, #0
  401e3a:	6563      	str	r3, [r4, #84]	; 0x54
}
  401e3c:	4620      	mov	r0, r4
  401e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401e40:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401e44:	6003      	str	r3, [r0, #0]
  401e46:	e7ef      	b.n	401e28 <xQueueGenericCreate+0x54>
  401e48:	00401b11 	.word	0x00401b11
  401e4c:	00401d41 	.word	0x00401d41

00401e50 <xQueueGenericSend>:
{
  401e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e54:	b085      	sub	sp, #20
  401e56:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401e58:	b1b8      	cbz	r0, 401e8a <xQueueGenericSend+0x3a>
  401e5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e5c:	b301      	cbz	r1, 401ea0 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e5e:	2b02      	cmp	r3, #2
  401e60:	d02c      	beq.n	401ebc <xQueueGenericSend+0x6c>
  401e62:	461d      	mov	r5, r3
  401e64:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401e66:	4b66      	ldr	r3, [pc, #408]	; (402000 <xQueueGenericSend+0x1b0>)
  401e68:	4798      	blx	r3
  401e6a:	2800      	cmp	r0, #0
  401e6c:	d134      	bne.n	401ed8 <xQueueGenericSend+0x88>
  401e6e:	9b01      	ldr	r3, [sp, #4]
  401e70:	2b00      	cmp	r3, #0
  401e72:	d038      	beq.n	401ee6 <xQueueGenericSend+0x96>
  401e74:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e78:	b672      	cpsid	i
  401e7a:	f383 8811 	msr	BASEPRI, r3
  401e7e:	f3bf 8f6f 	isb	sy
  401e82:	f3bf 8f4f 	dsb	sy
  401e86:	b662      	cpsie	i
  401e88:	e7fe      	b.n	401e88 <xQueueGenericSend+0x38>
  401e8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e8e:	b672      	cpsid	i
  401e90:	f383 8811 	msr	BASEPRI, r3
  401e94:	f3bf 8f6f 	isb	sy
  401e98:	f3bf 8f4f 	dsb	sy
  401e9c:	b662      	cpsie	i
  401e9e:	e7fe      	b.n	401e9e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ea0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ea2:	2a00      	cmp	r2, #0
  401ea4:	d0db      	beq.n	401e5e <xQueueGenericSend+0xe>
  401ea6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eaa:	b672      	cpsid	i
  401eac:	f383 8811 	msr	BASEPRI, r3
  401eb0:	f3bf 8f6f 	isb	sy
  401eb4:	f3bf 8f4f 	dsb	sy
  401eb8:	b662      	cpsie	i
  401eba:	e7fe      	b.n	401eba <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401ebc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401ebe:	2a01      	cmp	r2, #1
  401ec0:	d0cf      	beq.n	401e62 <xQueueGenericSend+0x12>
  401ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ec6:	b672      	cpsid	i
  401ec8:	f383 8811 	msr	BASEPRI, r3
  401ecc:	f3bf 8f6f 	isb	sy
  401ed0:	f3bf 8f4f 	dsb	sy
  401ed4:	b662      	cpsie	i
  401ed6:	e7fe      	b.n	401ed6 <xQueueGenericSend+0x86>
  401ed8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401eda:	4e4a      	ldr	r6, [pc, #296]	; (402004 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401edc:	f8df a150 	ldr.w	sl, [pc, #336]	; 402030 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401ee0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402010 <xQueueGenericSend+0x1c0>
  401ee4:	e042      	b.n	401f6c <xQueueGenericSend+0x11c>
  401ee6:	2700      	movs	r7, #0
  401ee8:	e7f7      	b.n	401eda <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401eea:	462a      	mov	r2, r5
  401eec:	4641      	mov	r1, r8
  401eee:	4620      	mov	r0, r4
  401ef0:	4b45      	ldr	r3, [pc, #276]	; (402008 <xQueueGenericSend+0x1b8>)
  401ef2:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ef6:	b19b      	cbz	r3, 401f20 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401ef8:	4629      	mov	r1, r5
  401efa:	4620      	mov	r0, r4
  401efc:	4b43      	ldr	r3, [pc, #268]	; (40200c <xQueueGenericSend+0x1bc>)
  401efe:	4798      	blx	r3
  401f00:	2801      	cmp	r0, #1
  401f02:	d107      	bne.n	401f14 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f08:	4b41      	ldr	r3, [pc, #260]	; (402010 <xQueueGenericSend+0x1c0>)
  401f0a:	601a      	str	r2, [r3, #0]
  401f0c:	f3bf 8f4f 	dsb	sy
  401f10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401f14:	4b3f      	ldr	r3, [pc, #252]	; (402014 <xQueueGenericSend+0x1c4>)
  401f16:	4798      	blx	r3
				return pdPASS;
  401f18:	2001      	movs	r0, #1
}
  401f1a:	b005      	add	sp, #20
  401f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f22:	b173      	cbz	r3, 401f42 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401f24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f28:	4b3b      	ldr	r3, [pc, #236]	; (402018 <xQueueGenericSend+0x1c8>)
  401f2a:	4798      	blx	r3
  401f2c:	2801      	cmp	r0, #1
  401f2e:	d1f1      	bne.n	401f14 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f34:	4b36      	ldr	r3, [pc, #216]	; (402010 <xQueueGenericSend+0x1c0>)
  401f36:	601a      	str	r2, [r3, #0]
  401f38:	f3bf 8f4f 	dsb	sy
  401f3c:	f3bf 8f6f 	isb	sy
  401f40:	e7e8      	b.n	401f14 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401f42:	2800      	cmp	r0, #0
  401f44:	d0e6      	beq.n	401f14 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f4a:	4b31      	ldr	r3, [pc, #196]	; (402010 <xQueueGenericSend+0x1c0>)
  401f4c:	601a      	str	r2, [r3, #0]
  401f4e:	f3bf 8f4f 	dsb	sy
  401f52:	f3bf 8f6f 	isb	sy
  401f56:	e7dd      	b.n	401f14 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401f58:	4b2e      	ldr	r3, [pc, #184]	; (402014 <xQueueGenericSend+0x1c4>)
  401f5a:	4798      	blx	r3
					return errQUEUE_FULL;
  401f5c:	2000      	movs	r0, #0
  401f5e:	e7dc      	b.n	401f1a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401f60:	4620      	mov	r0, r4
  401f62:	4b2e      	ldr	r3, [pc, #184]	; (40201c <xQueueGenericSend+0x1cc>)
  401f64:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401f66:	4b2e      	ldr	r3, [pc, #184]	; (402020 <xQueueGenericSend+0x1d0>)
  401f68:	4798      	blx	r3
  401f6a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401f6c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401f70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f72:	429a      	cmp	r2, r3
  401f74:	d3b9      	bcc.n	401eea <xQueueGenericSend+0x9a>
  401f76:	2d02      	cmp	r5, #2
  401f78:	d0b7      	beq.n	401eea <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401f7a:	9b01      	ldr	r3, [sp, #4]
  401f7c:	2b00      	cmp	r3, #0
  401f7e:	d0eb      	beq.n	401f58 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401f80:	b90f      	cbnz	r7, 401f86 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401f82:	a802      	add	r0, sp, #8
  401f84:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401f86:	4b23      	ldr	r3, [pc, #140]	; (402014 <xQueueGenericSend+0x1c4>)
  401f88:	4798      	blx	r3
		vTaskSuspendAll();
  401f8a:	4b26      	ldr	r3, [pc, #152]	; (402024 <xQueueGenericSend+0x1d4>)
  401f8c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401f8e:	47b0      	blx	r6
  401f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f92:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f96:	d101      	bne.n	401f9c <xQueueGenericSend+0x14c>
  401f98:	2300      	movs	r3, #0
  401f9a:	6463      	str	r3, [r4, #68]	; 0x44
  401f9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fa2:	d101      	bne.n	401fa8 <xQueueGenericSend+0x158>
  401fa4:	2300      	movs	r3, #0
  401fa6:	64a3      	str	r3, [r4, #72]	; 0x48
  401fa8:	4b1a      	ldr	r3, [pc, #104]	; (402014 <xQueueGenericSend+0x1c4>)
  401faa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401fac:	a901      	add	r1, sp, #4
  401fae:	a802      	add	r0, sp, #8
  401fb0:	4b1d      	ldr	r3, [pc, #116]	; (402028 <xQueueGenericSend+0x1d8>)
  401fb2:	4798      	blx	r3
  401fb4:	b9e0      	cbnz	r0, 401ff0 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401fb6:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401fb8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401fbc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401fbe:	4b15      	ldr	r3, [pc, #84]	; (402014 <xQueueGenericSend+0x1c4>)
  401fc0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401fc2:	45bb      	cmp	fp, r7
  401fc4:	d1cc      	bne.n	401f60 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401fc6:	9901      	ldr	r1, [sp, #4]
  401fc8:	f104 0010 	add.w	r0, r4, #16
  401fcc:	4b17      	ldr	r3, [pc, #92]	; (40202c <xQueueGenericSend+0x1dc>)
  401fce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401fd0:	4620      	mov	r0, r4
  401fd2:	4b12      	ldr	r3, [pc, #72]	; (40201c <xQueueGenericSend+0x1cc>)
  401fd4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fd6:	4b12      	ldr	r3, [pc, #72]	; (402020 <xQueueGenericSend+0x1d0>)
  401fd8:	4798      	blx	r3
  401fda:	2800      	cmp	r0, #0
  401fdc:	d1c5      	bne.n	401f6a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fe2:	f8c9 3000 	str.w	r3, [r9]
  401fe6:	f3bf 8f4f 	dsb	sy
  401fea:	f3bf 8f6f 	isb	sy
  401fee:	e7bc      	b.n	401f6a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401ff0:	4620      	mov	r0, r4
  401ff2:	4b0a      	ldr	r3, [pc, #40]	; (40201c <xQueueGenericSend+0x1cc>)
  401ff4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ff6:	4b0a      	ldr	r3, [pc, #40]	; (402020 <xQueueGenericSend+0x1d0>)
  401ff8:	4798      	blx	r3
			return errQUEUE_FULL;
  401ffa:	2000      	movs	r0, #0
  401ffc:	e78d      	b.n	401f1a <xQueueGenericSend+0xca>
  401ffe:	bf00      	nop
  402000:	00402e15 	.word	0x00402e15
  402004:	004018b5 	.word	0x004018b5
  402008:	00401b65 	.word	0x00401b65
  40200c:	00401bed 	.word	0x00401bed
  402010:	e000ed04 	.word	0xe000ed04
  402014:	00401901 	.word	0x00401901
  402018:	00402cad 	.word	0x00402cad
  40201c:	00401c9d 	.word	0x00401c9d
  402020:	00402921 	.word	0x00402921
  402024:	004027b9 	.word	0x004027b9
  402028:	00402d75 	.word	0x00402d75
  40202c:	00402ba9 	.word	0x00402ba9
  402030:	00402d45 	.word	0x00402d45

00402034 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402034:	2800      	cmp	r0, #0
  402036:	d036      	beq.n	4020a6 <xQueueGenericSendFromISR+0x72>
{
  402038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40203c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40203e:	2900      	cmp	r1, #0
  402040:	d03c      	beq.n	4020bc <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402042:	2b02      	cmp	r3, #2
  402044:	d048      	beq.n	4020d8 <xQueueGenericSendFromISR+0xa4>
  402046:	461e      	mov	r6, r3
  402048:	4615      	mov	r5, r2
  40204a:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40204c:	4b35      	ldr	r3, [pc, #212]	; (402124 <xQueueGenericSendFromISR+0xf0>)
  40204e:	4798      	blx	r3
	__asm volatile
  402050:	f3ef 8711 	mrs	r7, BASEPRI
  402054:	f04f 0380 	mov.w	r3, #128	; 0x80
  402058:	b672      	cpsid	i
  40205a:	f383 8811 	msr	BASEPRI, r3
  40205e:	f3bf 8f6f 	isb	sy
  402062:	f3bf 8f4f 	dsb	sy
  402066:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402068:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40206a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40206c:	429a      	cmp	r2, r3
  40206e:	d301      	bcc.n	402074 <xQueueGenericSendFromISR+0x40>
  402070:	2e02      	cmp	r6, #2
  402072:	d14f      	bne.n	402114 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402074:	4632      	mov	r2, r6
  402076:	4641      	mov	r1, r8
  402078:	4620      	mov	r0, r4
  40207a:	4b2b      	ldr	r3, [pc, #172]	; (402128 <xQueueGenericSendFromISR+0xf4>)
  40207c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40207e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402080:	f1b3 3fff 	cmp.w	r3, #4294967295
  402084:	d141      	bne.n	40210a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402086:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402088:	2b00      	cmp	r3, #0
  40208a:	d033      	beq.n	4020f4 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40208c:	4631      	mov	r1, r6
  40208e:	4620      	mov	r0, r4
  402090:	4b26      	ldr	r3, [pc, #152]	; (40212c <xQueueGenericSendFromISR+0xf8>)
  402092:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402094:	2d00      	cmp	r5, #0
  402096:	d03f      	beq.n	402118 <xQueueGenericSendFromISR+0xe4>
  402098:	2801      	cmp	r0, #1
  40209a:	d13d      	bne.n	402118 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40209c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40209e:	f387 8811 	msr	BASEPRI, r7
}
  4020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4020a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020aa:	b672      	cpsid	i
  4020ac:	f383 8811 	msr	BASEPRI, r3
  4020b0:	f3bf 8f6f 	isb	sy
  4020b4:	f3bf 8f4f 	dsb	sy
  4020b8:	b662      	cpsie	i
  4020ba:	e7fe      	b.n	4020ba <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4020be:	2800      	cmp	r0, #0
  4020c0:	d0bf      	beq.n	402042 <xQueueGenericSendFromISR+0xe>
  4020c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c6:	b672      	cpsid	i
  4020c8:	f383 8811 	msr	BASEPRI, r3
  4020cc:	f3bf 8f6f 	isb	sy
  4020d0:	f3bf 8f4f 	dsb	sy
  4020d4:	b662      	cpsie	i
  4020d6:	e7fe      	b.n	4020d6 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4020d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4020da:	2801      	cmp	r0, #1
  4020dc:	d0b3      	beq.n	402046 <xQueueGenericSendFromISR+0x12>
  4020de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020e2:	b672      	cpsid	i
  4020e4:	f383 8811 	msr	BASEPRI, r3
  4020e8:	f3bf 8f6f 	isb	sy
  4020ec:	f3bf 8f4f 	dsb	sy
  4020f0:	b662      	cpsie	i
  4020f2:	e7fe      	b.n	4020f2 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4020f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020f6:	b18b      	cbz	r3, 40211c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4020f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020fc:	4b0c      	ldr	r3, [pc, #48]	; (402130 <xQueueGenericSendFromISR+0xfc>)
  4020fe:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402100:	b175      	cbz	r5, 402120 <xQueueGenericSendFromISR+0xec>
  402102:	b168      	cbz	r0, 402120 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402104:	2001      	movs	r0, #1
  402106:	6028      	str	r0, [r5, #0]
  402108:	e7c9      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40210a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40210c:	3301      	adds	r3, #1
  40210e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402110:	2001      	movs	r0, #1
  402112:	e7c4      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402114:	2000      	movs	r0, #0
  402116:	e7c2      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402118:	2001      	movs	r0, #1
  40211a:	e7c0      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
  40211c:	2001      	movs	r0, #1
  40211e:	e7be      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
  402120:	2001      	movs	r0, #1
  402122:	e7bc      	b.n	40209e <xQueueGenericSendFromISR+0x6a>
  402124:	00401aad 	.word	0x00401aad
  402128:	00401b65 	.word	0x00401b65
  40212c:	00401bed 	.word	0x00401bed
  402130:	00402cad 	.word	0x00402cad

00402134 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402134:	b170      	cbz	r0, 402154 <xQueueGiveFromISR+0x20>
{
  402136:	b570      	push	{r4, r5, r6, lr}
  402138:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  40213a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40213c:	b1ab      	cbz	r3, 40216a <xQueueGiveFromISR+0x36>
  40213e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402142:	b672      	cpsid	i
  402144:	f383 8811 	msr	BASEPRI, r3
  402148:	f3bf 8f6f 	isb	sy
  40214c:	f3bf 8f4f 	dsb	sy
  402150:	b662      	cpsie	i
  402152:	e7fe      	b.n	402152 <xQueueGiveFromISR+0x1e>
  402154:	f04f 0380 	mov.w	r3, #128	; 0x80
  402158:	b672      	cpsid	i
  40215a:	f383 8811 	msr	BASEPRI, r3
  40215e:	f3bf 8f6f 	isb	sy
  402162:	f3bf 8f4f 	dsb	sy
  402166:	b662      	cpsie	i
  402168:	e7fe      	b.n	402168 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  40216a:	6803      	ldr	r3, [r0, #0]
  40216c:	b333      	cbz	r3, 4021bc <xQueueGiveFromISR+0x88>
  40216e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402170:	4b25      	ldr	r3, [pc, #148]	; (402208 <xQueueGiveFromISR+0xd4>)
  402172:	4798      	blx	r3
	__asm volatile
  402174:	f3ef 8611 	mrs	r6, BASEPRI
  402178:	f04f 0380 	mov.w	r3, #128	; 0x80
  40217c:	b672      	cpsid	i
  40217e:	f383 8811 	msr	BASEPRI, r3
  402182:	f3bf 8f6f 	isb	sy
  402186:	f3bf 8f4f 	dsb	sy
  40218a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40218c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40218e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402190:	429a      	cmp	r2, r3
  402192:	d231      	bcs.n	4021f8 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  402194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402196:	3301      	adds	r3, #1
  402198:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  40219a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40219c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021a0:	d125      	bne.n	4021ee <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4021a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4021a4:	b1c3      	cbz	r3, 4021d8 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4021a6:	2100      	movs	r1, #0
  4021a8:	4620      	mov	r0, r4
  4021aa:	4b18      	ldr	r3, [pc, #96]	; (40220c <xQueueGiveFromISR+0xd8>)
  4021ac:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4021ae:	b32d      	cbz	r5, 4021fc <xQueueGiveFromISR+0xc8>
  4021b0:	2801      	cmp	r0, #1
  4021b2:	d123      	bne.n	4021fc <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4021b4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4021b6:	f386 8811 	msr	BASEPRI, r6
}
  4021ba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4021bc:	6843      	ldr	r3, [r0, #4]
  4021be:	2b00      	cmp	r3, #0
  4021c0:	d0d5      	beq.n	40216e <xQueueGiveFromISR+0x3a>
	__asm volatile
  4021c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021c6:	b672      	cpsid	i
  4021c8:	f383 8811 	msr	BASEPRI, r3
  4021cc:	f3bf 8f6f 	isb	sy
  4021d0:	f3bf 8f4f 	dsb	sy
  4021d4:	b662      	cpsie	i
  4021d6:	e7fe      	b.n	4021d6 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4021d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4021da:	b18b      	cbz	r3, 402200 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4021dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4021e0:	4b0b      	ldr	r3, [pc, #44]	; (402210 <xQueueGiveFromISR+0xdc>)
  4021e2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4021e4:	b175      	cbz	r5, 402204 <xQueueGiveFromISR+0xd0>
  4021e6:	b168      	cbz	r0, 402204 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4021e8:	2001      	movs	r0, #1
  4021ea:	6028      	str	r0, [r5, #0]
  4021ec:	e7e3      	b.n	4021b6 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4021ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021f0:	3301      	adds	r3, #1
  4021f2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4021f4:	2001      	movs	r0, #1
  4021f6:	e7de      	b.n	4021b6 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  4021f8:	2000      	movs	r0, #0
  4021fa:	e7dc      	b.n	4021b6 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  4021fc:	2001      	movs	r0, #1
  4021fe:	e7da      	b.n	4021b6 <xQueueGiveFromISR+0x82>
  402200:	2001      	movs	r0, #1
  402202:	e7d8      	b.n	4021b6 <xQueueGiveFromISR+0x82>
  402204:	2001      	movs	r0, #1
  402206:	e7d6      	b.n	4021b6 <xQueueGiveFromISR+0x82>
  402208:	00401aad 	.word	0x00401aad
  40220c:	00401bed 	.word	0x00401bed
  402210:	00402cad 	.word	0x00402cad

00402214 <xQueueGenericReceive>:
{
  402214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402218:	b084      	sub	sp, #16
  40221a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40221c:	b198      	cbz	r0, 402246 <xQueueGenericReceive+0x32>
  40221e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402220:	b1e1      	cbz	r1, 40225c <xQueueGenericReceive+0x48>
  402222:	4698      	mov	r8, r3
  402224:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402226:	4b61      	ldr	r3, [pc, #388]	; (4023ac <xQueueGenericReceive+0x198>)
  402228:	4798      	blx	r3
  40222a:	bb28      	cbnz	r0, 402278 <xQueueGenericReceive+0x64>
  40222c:	9b01      	ldr	r3, [sp, #4]
  40222e:	b353      	cbz	r3, 402286 <xQueueGenericReceive+0x72>
  402230:	f04f 0380 	mov.w	r3, #128	; 0x80
  402234:	b672      	cpsid	i
  402236:	f383 8811 	msr	BASEPRI, r3
  40223a:	f3bf 8f6f 	isb	sy
  40223e:	f3bf 8f4f 	dsb	sy
  402242:	b662      	cpsie	i
  402244:	e7fe      	b.n	402244 <xQueueGenericReceive+0x30>
  402246:	f04f 0380 	mov.w	r3, #128	; 0x80
  40224a:	b672      	cpsid	i
  40224c:	f383 8811 	msr	BASEPRI, r3
  402250:	f3bf 8f6f 	isb	sy
  402254:	f3bf 8f4f 	dsb	sy
  402258:	b662      	cpsie	i
  40225a:	e7fe      	b.n	40225a <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40225c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40225e:	2a00      	cmp	r2, #0
  402260:	d0df      	beq.n	402222 <xQueueGenericReceive+0xe>
  402262:	f04f 0380 	mov.w	r3, #128	; 0x80
  402266:	b672      	cpsid	i
  402268:	f383 8811 	msr	BASEPRI, r3
  40226c:	f3bf 8f6f 	isb	sy
  402270:	f3bf 8f4f 	dsb	sy
  402274:	b662      	cpsie	i
  402276:	e7fe      	b.n	402276 <xQueueGenericReceive+0x62>
  402278:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  40227a:	4d4d      	ldr	r5, [pc, #308]	; (4023b0 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  40227c:	f8df a160 	ldr.w	sl, [pc, #352]	; 4023e0 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402280:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4023c0 <xQueueGenericReceive+0x1ac>
  402284:	e04b      	b.n	40231e <xQueueGenericReceive+0x10a>
  402286:	2600      	movs	r6, #0
  402288:	e7f7      	b.n	40227a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40228a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40228c:	4639      	mov	r1, r7
  40228e:	4620      	mov	r0, r4
  402290:	4b48      	ldr	r3, [pc, #288]	; (4023b4 <xQueueGenericReceive+0x1a0>)
  402292:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402294:	f1b8 0f00 	cmp.w	r8, #0
  402298:	d11d      	bne.n	4022d6 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  40229a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40229c:	3b01      	subs	r3, #1
  40229e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4022a0:	6823      	ldr	r3, [r4, #0]
  4022a2:	b913      	cbnz	r3, 4022aa <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4022a4:	4b44      	ldr	r3, [pc, #272]	; (4023b8 <xQueueGenericReceive+0x1a4>)
  4022a6:	4798      	blx	r3
  4022a8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4022aa:	6923      	ldr	r3, [r4, #16]
  4022ac:	b16b      	cbz	r3, 4022ca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4022ae:	f104 0010 	add.w	r0, r4, #16
  4022b2:	4b42      	ldr	r3, [pc, #264]	; (4023bc <xQueueGenericReceive+0x1a8>)
  4022b4:	4798      	blx	r3
  4022b6:	2801      	cmp	r0, #1
  4022b8:	d107      	bne.n	4022ca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022be:	4b40      	ldr	r3, [pc, #256]	; (4023c0 <xQueueGenericReceive+0x1ac>)
  4022c0:	601a      	str	r2, [r3, #0]
  4022c2:	f3bf 8f4f 	dsb	sy
  4022c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4022ca:	4b3e      	ldr	r3, [pc, #248]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  4022cc:	4798      	blx	r3
				return pdPASS;
  4022ce:	2001      	movs	r0, #1
}
  4022d0:	b004      	add	sp, #16
  4022d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4022d6:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4022d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022da:	2b00      	cmp	r3, #0
  4022dc:	d0f5      	beq.n	4022ca <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4022de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4022e2:	4b36      	ldr	r3, [pc, #216]	; (4023bc <xQueueGenericReceive+0x1a8>)
  4022e4:	4798      	blx	r3
  4022e6:	2800      	cmp	r0, #0
  4022e8:	d0ef      	beq.n	4022ca <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022ee:	4b34      	ldr	r3, [pc, #208]	; (4023c0 <xQueueGenericReceive+0x1ac>)
  4022f0:	601a      	str	r2, [r3, #0]
  4022f2:	f3bf 8f4f 	dsb	sy
  4022f6:	f3bf 8f6f 	isb	sy
  4022fa:	e7e6      	b.n	4022ca <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4022fc:	4b31      	ldr	r3, [pc, #196]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  4022fe:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402300:	2000      	movs	r0, #0
  402302:	e7e5      	b.n	4022d0 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  402304:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402306:	6860      	ldr	r0, [r4, #4]
  402308:	4b2f      	ldr	r3, [pc, #188]	; (4023c8 <xQueueGenericReceive+0x1b4>)
  40230a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40230c:	4b2d      	ldr	r3, [pc, #180]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  40230e:	4798      	blx	r3
  402310:	e030      	b.n	402374 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  402312:	4620      	mov	r0, r4
  402314:	4b2d      	ldr	r3, [pc, #180]	; (4023cc <xQueueGenericReceive+0x1b8>)
  402316:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402318:	4b2d      	ldr	r3, [pc, #180]	; (4023d0 <xQueueGenericReceive+0x1bc>)
  40231a:	4798      	blx	r3
  40231c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  40231e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402322:	2b00      	cmp	r3, #0
  402324:	d1b1      	bne.n	40228a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402326:	9b01      	ldr	r3, [sp, #4]
  402328:	2b00      	cmp	r3, #0
  40232a:	d0e7      	beq.n	4022fc <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  40232c:	b90e      	cbnz	r6, 402332 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40232e:	a802      	add	r0, sp, #8
  402330:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402332:	4b24      	ldr	r3, [pc, #144]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  402334:	4798      	blx	r3
		vTaskSuspendAll();
  402336:	4b27      	ldr	r3, [pc, #156]	; (4023d4 <xQueueGenericReceive+0x1c0>)
  402338:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40233a:	47a8      	blx	r5
  40233c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40233e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402342:	d101      	bne.n	402348 <xQueueGenericReceive+0x134>
  402344:	2300      	movs	r3, #0
  402346:	6463      	str	r3, [r4, #68]	; 0x44
  402348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40234a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40234e:	d101      	bne.n	402354 <xQueueGenericReceive+0x140>
  402350:	2300      	movs	r3, #0
  402352:	64a3      	str	r3, [r4, #72]	; 0x48
  402354:	4b1b      	ldr	r3, [pc, #108]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  402356:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402358:	a901      	add	r1, sp, #4
  40235a:	a802      	add	r0, sp, #8
  40235c:	4b1e      	ldr	r3, [pc, #120]	; (4023d8 <xQueueGenericReceive+0x1c4>)
  40235e:	4798      	blx	r3
  402360:	b9e8      	cbnz	r0, 40239e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402362:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402364:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402366:	4b17      	ldr	r3, [pc, #92]	; (4023c4 <xQueueGenericReceive+0x1b0>)
  402368:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40236a:	2e00      	cmp	r6, #0
  40236c:	d1d1      	bne.n	402312 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40236e:	6823      	ldr	r3, [r4, #0]
  402370:	2b00      	cmp	r3, #0
  402372:	d0c7      	beq.n	402304 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402374:	9901      	ldr	r1, [sp, #4]
  402376:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40237a:	4b18      	ldr	r3, [pc, #96]	; (4023dc <xQueueGenericReceive+0x1c8>)
  40237c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40237e:	4620      	mov	r0, r4
  402380:	4b12      	ldr	r3, [pc, #72]	; (4023cc <xQueueGenericReceive+0x1b8>)
  402382:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402384:	4b12      	ldr	r3, [pc, #72]	; (4023d0 <xQueueGenericReceive+0x1bc>)
  402386:	4798      	blx	r3
  402388:	2800      	cmp	r0, #0
  40238a:	d1c7      	bne.n	40231c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  40238c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402390:	f8c9 3000 	str.w	r3, [r9]
  402394:	f3bf 8f4f 	dsb	sy
  402398:	f3bf 8f6f 	isb	sy
  40239c:	e7be      	b.n	40231c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40239e:	4620      	mov	r0, r4
  4023a0:	4b0a      	ldr	r3, [pc, #40]	; (4023cc <xQueueGenericReceive+0x1b8>)
  4023a2:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4023a4:	4b0a      	ldr	r3, [pc, #40]	; (4023d0 <xQueueGenericReceive+0x1bc>)
  4023a6:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4023a8:	2000      	movs	r0, #0
  4023aa:	e791      	b.n	4022d0 <xQueueGenericReceive+0xbc>
  4023ac:	00402e15 	.word	0x00402e15
  4023b0:	004018b5 	.word	0x004018b5
  4023b4:	00401c75 	.word	0x00401c75
  4023b8:	00402f95 	.word	0x00402f95
  4023bc:	00402cad 	.word	0x00402cad
  4023c0:	e000ed04 	.word	0xe000ed04
  4023c4:	00401901 	.word	0x00401901
  4023c8:	00402e35 	.word	0x00402e35
  4023cc:	00401c9d 	.word	0x00401c9d
  4023d0:	00402921 	.word	0x00402921
  4023d4:	004027b9 	.word	0x004027b9
  4023d8:	00402d75 	.word	0x00402d75
  4023dc:	00402ba9 	.word	0x00402ba9
  4023e0:	00402d45 	.word	0x00402d45

004023e4 <vQueueAddToRegistry>:
	{
  4023e4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4023e6:	4b0b      	ldr	r3, [pc, #44]	; (402414 <vQueueAddToRegistry+0x30>)
  4023e8:	681b      	ldr	r3, [r3, #0]
  4023ea:	b153      	cbz	r3, 402402 <vQueueAddToRegistry+0x1e>
  4023ec:	2301      	movs	r3, #1
  4023ee:	4c09      	ldr	r4, [pc, #36]	; (402414 <vQueueAddToRegistry+0x30>)
  4023f0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4023f4:	b132      	cbz	r2, 402404 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4023f6:	3301      	adds	r3, #1
  4023f8:	2b08      	cmp	r3, #8
  4023fa:	d1f9      	bne.n	4023f0 <vQueueAddToRegistry+0xc>
	}
  4023fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  402400:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402402:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402404:	4a03      	ldr	r2, [pc, #12]	; (402414 <vQueueAddToRegistry+0x30>)
  402406:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40240a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40240e:	6058      	str	r0, [r3, #4]
				break;
  402410:	e7f4      	b.n	4023fc <vQueueAddToRegistry+0x18>
  402412:	bf00      	nop
  402414:	20400dec 	.word	0x20400dec

00402418 <vQueueWaitForMessageRestricted>:
	{
  402418:	b570      	push	{r4, r5, r6, lr}
  40241a:	4604      	mov	r4, r0
  40241c:	460d      	mov	r5, r1
  40241e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402420:	4b0f      	ldr	r3, [pc, #60]	; (402460 <vQueueWaitForMessageRestricted+0x48>)
  402422:	4798      	blx	r3
  402424:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402426:	f1b3 3fff 	cmp.w	r3, #4294967295
  40242a:	d00b      	beq.n	402444 <vQueueWaitForMessageRestricted+0x2c>
  40242c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40242e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402432:	d00a      	beq.n	40244a <vQueueWaitForMessageRestricted+0x32>
  402434:	4b0b      	ldr	r3, [pc, #44]	; (402464 <vQueueWaitForMessageRestricted+0x4c>)
  402436:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40243a:	b14b      	cbz	r3, 402450 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40243c:	4620      	mov	r0, r4
  40243e:	4b0a      	ldr	r3, [pc, #40]	; (402468 <vQueueWaitForMessageRestricted+0x50>)
  402440:	4798      	blx	r3
  402442:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402444:	2300      	movs	r3, #0
  402446:	6463      	str	r3, [r4, #68]	; 0x44
  402448:	e7f0      	b.n	40242c <vQueueWaitForMessageRestricted+0x14>
  40244a:	2300      	movs	r3, #0
  40244c:	64a3      	str	r3, [r4, #72]	; 0x48
  40244e:	e7f1      	b.n	402434 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402450:	4632      	mov	r2, r6
  402452:	4629      	mov	r1, r5
  402454:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402458:	4b04      	ldr	r3, [pc, #16]	; (40246c <vQueueWaitForMessageRestricted+0x54>)
  40245a:	4798      	blx	r3
  40245c:	e7ee      	b.n	40243c <vQueueWaitForMessageRestricted+0x24>
  40245e:	bf00      	nop
  402460:	004018b5 	.word	0x004018b5
  402464:	00401901 	.word	0x00401901
  402468:	00401c9d 	.word	0x00401c9d
  40246c:	00402c2d 	.word	0x00402c2d

00402470 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402470:	4b08      	ldr	r3, [pc, #32]	; (402494 <prvResetNextTaskUnblockTime+0x24>)
  402472:	681b      	ldr	r3, [r3, #0]
  402474:	681b      	ldr	r3, [r3, #0]
  402476:	b13b      	cbz	r3, 402488 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402478:	4b06      	ldr	r3, [pc, #24]	; (402494 <prvResetNextTaskUnblockTime+0x24>)
  40247a:	681b      	ldr	r3, [r3, #0]
  40247c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40247e:	68db      	ldr	r3, [r3, #12]
  402480:	685a      	ldr	r2, [r3, #4]
  402482:	4b05      	ldr	r3, [pc, #20]	; (402498 <prvResetNextTaskUnblockTime+0x28>)
  402484:	601a      	str	r2, [r3, #0]
  402486:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402488:	f04f 32ff 	mov.w	r2, #4294967295
  40248c:	4b02      	ldr	r3, [pc, #8]	; (402498 <prvResetNextTaskUnblockTime+0x28>)
  40248e:	601a      	str	r2, [r3, #0]
  402490:	4770      	bx	lr
  402492:	bf00      	nop
  402494:	20400c78 	.word	0x20400c78
  402498:	20400d24 	.word	0x20400d24

0040249c <prvAddCurrentTaskToDelayedList>:
{
  40249c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40249e:	4b0f      	ldr	r3, [pc, #60]	; (4024dc <prvAddCurrentTaskToDelayedList+0x40>)
  4024a0:	681b      	ldr	r3, [r3, #0]
  4024a2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4024a4:	4b0e      	ldr	r3, [pc, #56]	; (4024e0 <prvAddCurrentTaskToDelayedList+0x44>)
  4024a6:	681b      	ldr	r3, [r3, #0]
  4024a8:	4298      	cmp	r0, r3
  4024aa:	d30e      	bcc.n	4024ca <prvAddCurrentTaskToDelayedList+0x2e>
  4024ac:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024ae:	4b0d      	ldr	r3, [pc, #52]	; (4024e4 <prvAddCurrentTaskToDelayedList+0x48>)
  4024b0:	6818      	ldr	r0, [r3, #0]
  4024b2:	4b0a      	ldr	r3, [pc, #40]	; (4024dc <prvAddCurrentTaskToDelayedList+0x40>)
  4024b4:	6819      	ldr	r1, [r3, #0]
  4024b6:	3104      	adds	r1, #4
  4024b8:	4b0b      	ldr	r3, [pc, #44]	; (4024e8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4024ba:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4024bc:	4b0b      	ldr	r3, [pc, #44]	; (4024ec <prvAddCurrentTaskToDelayedList+0x50>)
  4024be:	681b      	ldr	r3, [r3, #0]
  4024c0:	429c      	cmp	r4, r3
  4024c2:	d201      	bcs.n	4024c8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4024c4:	4b09      	ldr	r3, [pc, #36]	; (4024ec <prvAddCurrentTaskToDelayedList+0x50>)
  4024c6:	601c      	str	r4, [r3, #0]
  4024c8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024ca:	4b09      	ldr	r3, [pc, #36]	; (4024f0 <prvAddCurrentTaskToDelayedList+0x54>)
  4024cc:	6818      	ldr	r0, [r3, #0]
  4024ce:	4b03      	ldr	r3, [pc, #12]	; (4024dc <prvAddCurrentTaskToDelayedList+0x40>)
  4024d0:	6819      	ldr	r1, [r3, #0]
  4024d2:	3104      	adds	r1, #4
  4024d4:	4b04      	ldr	r3, [pc, #16]	; (4024e8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4024d6:	4798      	blx	r3
  4024d8:	bd10      	pop	{r4, pc}
  4024da:	bf00      	nop
  4024dc:	20400c74 	.word	0x20400c74
  4024e0:	20400d6c 	.word	0x20400d6c
  4024e4:	20400c78 	.word	0x20400c78
  4024e8:	0040179d 	.word	0x0040179d
  4024ec:	20400d24 	.word	0x20400d24
  4024f0:	20400c7c 	.word	0x20400c7c

004024f4 <xTaskGenericCreate>:
{
  4024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024f8:	b083      	sub	sp, #12
  4024fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4024fc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402500:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402502:	b160      	cbz	r0, 40251e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402504:	2d04      	cmp	r5, #4
  402506:	d915      	bls.n	402534 <xTaskGenericCreate+0x40>
  402508:	f04f 0380 	mov.w	r3, #128	; 0x80
  40250c:	b672      	cpsid	i
  40250e:	f383 8811 	msr	BASEPRI, r3
  402512:	f3bf 8f6f 	isb	sy
  402516:	f3bf 8f4f 	dsb	sy
  40251a:	b662      	cpsie	i
  40251c:	e7fe      	b.n	40251c <xTaskGenericCreate+0x28>
  40251e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402522:	b672      	cpsid	i
  402524:	f383 8811 	msr	BASEPRI, r3
  402528:	f3bf 8f6f 	isb	sy
  40252c:	f3bf 8f4f 	dsb	sy
  402530:	b662      	cpsie	i
  402532:	e7fe      	b.n	402532 <xTaskGenericCreate+0x3e>
  402534:	9001      	str	r0, [sp, #4]
  402536:	4698      	mov	r8, r3
  402538:	4691      	mov	r9, r2
  40253a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40253c:	b936      	cbnz	r6, 40254c <xTaskGenericCreate+0x58>
  40253e:	0090      	lsls	r0, r2, #2
  402540:	4b62      	ldr	r3, [pc, #392]	; (4026cc <xTaskGenericCreate+0x1d8>)
  402542:	4798      	blx	r3
		if( pxStack != NULL )
  402544:	4606      	mov	r6, r0
  402546:	2800      	cmp	r0, #0
  402548:	f000 809e 	beq.w	402688 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40254c:	2058      	movs	r0, #88	; 0x58
  40254e:	4b5f      	ldr	r3, [pc, #380]	; (4026cc <xTaskGenericCreate+0x1d8>)
  402550:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402552:	4604      	mov	r4, r0
  402554:	2800      	cmp	r0, #0
  402556:	f000 8094 	beq.w	402682 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40255a:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40255c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402560:	21a5      	movs	r1, #165	; 0xa5
  402562:	4630      	mov	r0, r6
  402564:	4b5a      	ldr	r3, [pc, #360]	; (4026d0 <xTaskGenericCreate+0x1dc>)
  402566:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402568:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40256c:	444e      	add	r6, r9
  40256e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402570:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402574:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402578:	783b      	ldrb	r3, [r7, #0]
  40257a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40257e:	783b      	ldrb	r3, [r7, #0]
  402580:	2b00      	cmp	r3, #0
  402582:	f040 8084 	bne.w	40268e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402586:	2700      	movs	r7, #0
  402588:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40258c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40258e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402590:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402592:	f104 0904 	add.w	r9, r4, #4
  402596:	4648      	mov	r0, r9
  402598:	f8df b184 	ldr.w	fp, [pc, #388]	; 402720 <xTaskGenericCreate+0x22c>
  40259c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40259e:	f104 0018 	add.w	r0, r4, #24
  4025a2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4025a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025a6:	f1c5 0305 	rsb	r3, r5, #5
  4025aa:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4025ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4025ae:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4025b0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4025b4:	4642      	mov	r2, r8
  4025b6:	9901      	ldr	r1, [sp, #4]
  4025b8:	4630      	mov	r0, r6
  4025ba:	4b46      	ldr	r3, [pc, #280]	; (4026d4 <xTaskGenericCreate+0x1e0>)
  4025bc:	4798      	blx	r3
  4025be:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4025c0:	f1ba 0f00 	cmp.w	sl, #0
  4025c4:	d001      	beq.n	4025ca <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4025c6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4025ca:	4b43      	ldr	r3, [pc, #268]	; (4026d8 <xTaskGenericCreate+0x1e4>)
  4025cc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4025ce:	4a43      	ldr	r2, [pc, #268]	; (4026dc <xTaskGenericCreate+0x1e8>)
  4025d0:	6813      	ldr	r3, [r2, #0]
  4025d2:	3301      	adds	r3, #1
  4025d4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4025d6:	4b42      	ldr	r3, [pc, #264]	; (4026e0 <xTaskGenericCreate+0x1ec>)
  4025d8:	681b      	ldr	r3, [r3, #0]
  4025da:	2b00      	cmp	r3, #0
  4025dc:	d166      	bne.n	4026ac <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4025de:	4b40      	ldr	r3, [pc, #256]	; (4026e0 <xTaskGenericCreate+0x1ec>)
  4025e0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4025e2:	6813      	ldr	r3, [r2, #0]
  4025e4:	2b01      	cmp	r3, #1
  4025e6:	d121      	bne.n	40262c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4025e8:	4f3e      	ldr	r7, [pc, #248]	; (4026e4 <xTaskGenericCreate+0x1f0>)
  4025ea:	4638      	mov	r0, r7
  4025ec:	4e3e      	ldr	r6, [pc, #248]	; (4026e8 <xTaskGenericCreate+0x1f4>)
  4025ee:	47b0      	blx	r6
  4025f0:	f107 0014 	add.w	r0, r7, #20
  4025f4:	47b0      	blx	r6
  4025f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4025fa:	47b0      	blx	r6
  4025fc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402600:	47b0      	blx	r6
  402602:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402606:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402608:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402724 <xTaskGenericCreate+0x230>
  40260c:	4640      	mov	r0, r8
  40260e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402610:	4f36      	ldr	r7, [pc, #216]	; (4026ec <xTaskGenericCreate+0x1f8>)
  402612:	4638      	mov	r0, r7
  402614:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402616:	4836      	ldr	r0, [pc, #216]	; (4026f0 <xTaskGenericCreate+0x1fc>)
  402618:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40261a:	4836      	ldr	r0, [pc, #216]	; (4026f4 <xTaskGenericCreate+0x200>)
  40261c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40261e:	4836      	ldr	r0, [pc, #216]	; (4026f8 <xTaskGenericCreate+0x204>)
  402620:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402622:	4b36      	ldr	r3, [pc, #216]	; (4026fc <xTaskGenericCreate+0x208>)
  402624:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402628:	4b35      	ldr	r3, [pc, #212]	; (402700 <xTaskGenericCreate+0x20c>)
  40262a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40262c:	4a35      	ldr	r2, [pc, #212]	; (402704 <xTaskGenericCreate+0x210>)
  40262e:	6813      	ldr	r3, [r2, #0]
  402630:	3301      	adds	r3, #1
  402632:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402634:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402636:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402638:	4a33      	ldr	r2, [pc, #204]	; (402708 <xTaskGenericCreate+0x214>)
  40263a:	6811      	ldr	r1, [r2, #0]
  40263c:	2301      	movs	r3, #1
  40263e:	4083      	lsls	r3, r0
  402640:	430b      	orrs	r3, r1
  402642:	6013      	str	r3, [r2, #0]
  402644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402648:	4649      	mov	r1, r9
  40264a:	4b26      	ldr	r3, [pc, #152]	; (4026e4 <xTaskGenericCreate+0x1f0>)
  40264c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402650:	4b2e      	ldr	r3, [pc, #184]	; (40270c <xTaskGenericCreate+0x218>)
  402652:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402654:	4b2e      	ldr	r3, [pc, #184]	; (402710 <xTaskGenericCreate+0x21c>)
  402656:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402658:	4b2e      	ldr	r3, [pc, #184]	; (402714 <xTaskGenericCreate+0x220>)
  40265a:	681b      	ldr	r3, [r3, #0]
  40265c:	2b00      	cmp	r3, #0
  40265e:	d031      	beq.n	4026c4 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402660:	4b1f      	ldr	r3, [pc, #124]	; (4026e0 <xTaskGenericCreate+0x1ec>)
  402662:	681b      	ldr	r3, [r3, #0]
  402664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402666:	429d      	cmp	r5, r3
  402668:	d92e      	bls.n	4026c8 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40266a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40266e:	4b2a      	ldr	r3, [pc, #168]	; (402718 <xTaskGenericCreate+0x224>)
  402670:	601a      	str	r2, [r3, #0]
  402672:	f3bf 8f4f 	dsb	sy
  402676:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40267a:	2001      	movs	r0, #1
}
  40267c:	b003      	add	sp, #12
  40267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402682:	4630      	mov	r0, r6
  402684:	4b25      	ldr	r3, [pc, #148]	; (40271c <xTaskGenericCreate+0x228>)
  402686:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402688:	f04f 30ff 	mov.w	r0, #4294967295
  40268c:	e7f6      	b.n	40267c <xTaskGenericCreate+0x188>
  40268e:	463b      	mov	r3, r7
  402690:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402694:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402696:	7859      	ldrb	r1, [r3, #1]
  402698:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40269c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4026a0:	2900      	cmp	r1, #0
  4026a2:	f43f af70 	beq.w	402586 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4026a6:	42bb      	cmp	r3, r7
  4026a8:	d1f5      	bne.n	402696 <xTaskGenericCreate+0x1a2>
  4026aa:	e76c      	b.n	402586 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4026ac:	4b19      	ldr	r3, [pc, #100]	; (402714 <xTaskGenericCreate+0x220>)
  4026ae:	681b      	ldr	r3, [r3, #0]
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d1bb      	bne.n	40262c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4026b4:	4b0a      	ldr	r3, [pc, #40]	; (4026e0 <xTaskGenericCreate+0x1ec>)
  4026b6:	681b      	ldr	r3, [r3, #0]
  4026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026ba:	429d      	cmp	r5, r3
  4026bc:	d3b6      	bcc.n	40262c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4026be:	4b08      	ldr	r3, [pc, #32]	; (4026e0 <xTaskGenericCreate+0x1ec>)
  4026c0:	601c      	str	r4, [r3, #0]
  4026c2:	e7b3      	b.n	40262c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4026c4:	2001      	movs	r0, #1
  4026c6:	e7d9      	b.n	40267c <xTaskGenericCreate+0x188>
  4026c8:	2001      	movs	r0, #1
	return xReturn;
  4026ca:	e7d7      	b.n	40267c <xTaskGenericCreate+0x188>
  4026cc:	00401b11 	.word	0x00401b11
  4026d0:	0040438d 	.word	0x0040438d
  4026d4:	00401869 	.word	0x00401869
  4026d8:	004018b5 	.word	0x004018b5
  4026dc:	20400ce4 	.word	0x20400ce4
  4026e0:	20400c74 	.word	0x20400c74
  4026e4:	20400c80 	.word	0x20400c80
  4026e8:	00401769 	.word	0x00401769
  4026ec:	20400d10 	.word	0x20400d10
  4026f0:	20400d2c 	.word	0x20400d2c
  4026f4:	20400d58 	.word	0x20400d58
  4026f8:	20400d44 	.word	0x20400d44
  4026fc:	20400c78 	.word	0x20400c78
  402700:	20400c7c 	.word	0x20400c7c
  402704:	20400cf0 	.word	0x20400cf0
  402708:	20400cf8 	.word	0x20400cf8
  40270c:	00401785 	.word	0x00401785
  402710:	00401901 	.word	0x00401901
  402714:	20400d40 	.word	0x20400d40
  402718:	e000ed04 	.word	0xe000ed04
  40271c:	00401b41 	.word	0x00401b41
  402720:	0040177f 	.word	0x0040177f
  402724:	20400cfc 	.word	0x20400cfc

00402728 <vTaskStartScheduler>:
{
  402728:	b510      	push	{r4, lr}
  40272a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40272c:	2300      	movs	r3, #0
  40272e:	9303      	str	r3, [sp, #12]
  402730:	9302      	str	r3, [sp, #8]
  402732:	9301      	str	r3, [sp, #4]
  402734:	9300      	str	r3, [sp, #0]
  402736:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40273a:	4917      	ldr	r1, [pc, #92]	; (402798 <vTaskStartScheduler+0x70>)
  40273c:	4817      	ldr	r0, [pc, #92]	; (40279c <vTaskStartScheduler+0x74>)
  40273e:	4c18      	ldr	r4, [pc, #96]	; (4027a0 <vTaskStartScheduler+0x78>)
  402740:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402742:	2801      	cmp	r0, #1
  402744:	d00b      	beq.n	40275e <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402746:	bb20      	cbnz	r0, 402792 <vTaskStartScheduler+0x6a>
  402748:	f04f 0380 	mov.w	r3, #128	; 0x80
  40274c:	b672      	cpsid	i
  40274e:	f383 8811 	msr	BASEPRI, r3
  402752:	f3bf 8f6f 	isb	sy
  402756:	f3bf 8f4f 	dsb	sy
  40275a:	b662      	cpsie	i
  40275c:	e7fe      	b.n	40275c <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  40275e:	4b11      	ldr	r3, [pc, #68]	; (4027a4 <vTaskStartScheduler+0x7c>)
  402760:	4798      	blx	r3
	if( xReturn == pdPASS )
  402762:	2801      	cmp	r0, #1
  402764:	d1ef      	bne.n	402746 <vTaskStartScheduler+0x1e>
  402766:	f04f 0380 	mov.w	r3, #128	; 0x80
  40276a:	b672      	cpsid	i
  40276c:	f383 8811 	msr	BASEPRI, r3
  402770:	f3bf 8f6f 	isb	sy
  402774:	f3bf 8f4f 	dsb	sy
  402778:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40277a:	f04f 32ff 	mov.w	r2, #4294967295
  40277e:	4b0a      	ldr	r3, [pc, #40]	; (4027a8 <vTaskStartScheduler+0x80>)
  402780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402782:	2201      	movs	r2, #1
  402784:	4b09      	ldr	r3, [pc, #36]	; (4027ac <vTaskStartScheduler+0x84>)
  402786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402788:	2200      	movs	r2, #0
  40278a:	4b09      	ldr	r3, [pc, #36]	; (4027b0 <vTaskStartScheduler+0x88>)
  40278c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40278e:	4b09      	ldr	r3, [pc, #36]	; (4027b4 <vTaskStartScheduler+0x8c>)
  402790:	4798      	blx	r3
}
  402792:	b004      	add	sp, #16
  402794:	bd10      	pop	{r4, pc}
  402796:	bf00      	nop
  402798:	00406eac 	.word	0x00406eac
  40279c:	00402a41 	.word	0x00402a41
  4027a0:	004024f5 	.word	0x004024f5
  4027a4:	00403081 	.word	0x00403081
  4027a8:	20400d24 	.word	0x20400d24
  4027ac:	20400d40 	.word	0x20400d40
  4027b0:	20400d6c 	.word	0x20400d6c
  4027b4:	004019e9 	.word	0x004019e9

004027b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4027b8:	4a02      	ldr	r2, [pc, #8]	; (4027c4 <vTaskSuspendAll+0xc>)
  4027ba:	6813      	ldr	r3, [r2, #0]
  4027bc:	3301      	adds	r3, #1
  4027be:	6013      	str	r3, [r2, #0]
  4027c0:	4770      	bx	lr
  4027c2:	bf00      	nop
  4027c4:	20400cec 	.word	0x20400cec

004027c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4027c8:	4b01      	ldr	r3, [pc, #4]	; (4027d0 <xTaskGetTickCount+0x8>)
  4027ca:	6818      	ldr	r0, [r3, #0]
}
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	20400d6c 	.word	0x20400d6c

004027d4 <xTaskIncrementTick>:
{
  4027d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027d8:	4b42      	ldr	r3, [pc, #264]	; (4028e4 <xTaskIncrementTick+0x110>)
  4027da:	681b      	ldr	r3, [r3, #0]
  4027dc:	2b00      	cmp	r3, #0
  4027de:	d178      	bne.n	4028d2 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4027e0:	4b41      	ldr	r3, [pc, #260]	; (4028e8 <xTaskIncrementTick+0x114>)
  4027e2:	681a      	ldr	r2, [r3, #0]
  4027e4:	3201      	adds	r2, #1
  4027e6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4027e8:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4027ea:	b9d6      	cbnz	r6, 402822 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4027ec:	4b3f      	ldr	r3, [pc, #252]	; (4028ec <xTaskIncrementTick+0x118>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	681b      	ldr	r3, [r3, #0]
  4027f2:	b153      	cbz	r3, 40280a <xTaskIncrementTick+0x36>
  4027f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f8:	b672      	cpsid	i
  4027fa:	f383 8811 	msr	BASEPRI, r3
  4027fe:	f3bf 8f6f 	isb	sy
  402802:	f3bf 8f4f 	dsb	sy
  402806:	b662      	cpsie	i
  402808:	e7fe      	b.n	402808 <xTaskIncrementTick+0x34>
  40280a:	4a38      	ldr	r2, [pc, #224]	; (4028ec <xTaskIncrementTick+0x118>)
  40280c:	6811      	ldr	r1, [r2, #0]
  40280e:	4b38      	ldr	r3, [pc, #224]	; (4028f0 <xTaskIncrementTick+0x11c>)
  402810:	6818      	ldr	r0, [r3, #0]
  402812:	6010      	str	r0, [r2, #0]
  402814:	6019      	str	r1, [r3, #0]
  402816:	4a37      	ldr	r2, [pc, #220]	; (4028f4 <xTaskIncrementTick+0x120>)
  402818:	6813      	ldr	r3, [r2, #0]
  40281a:	3301      	adds	r3, #1
  40281c:	6013      	str	r3, [r2, #0]
  40281e:	4b36      	ldr	r3, [pc, #216]	; (4028f8 <xTaskIncrementTick+0x124>)
  402820:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402822:	4b36      	ldr	r3, [pc, #216]	; (4028fc <xTaskIncrementTick+0x128>)
  402824:	681b      	ldr	r3, [r3, #0]
  402826:	429e      	cmp	r6, r3
  402828:	d218      	bcs.n	40285c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40282a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40282c:	4b34      	ldr	r3, [pc, #208]	; (402900 <xTaskIncrementTick+0x12c>)
  40282e:	681b      	ldr	r3, [r3, #0]
  402830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402836:	4a33      	ldr	r2, [pc, #204]	; (402904 <xTaskIncrementTick+0x130>)
  402838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  40283c:	2b02      	cmp	r3, #2
  40283e:	bf28      	it	cs
  402840:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402842:	4b31      	ldr	r3, [pc, #196]	; (402908 <xTaskIncrementTick+0x134>)
  402844:	681b      	ldr	r3, [r3, #0]
  402846:	b90b      	cbnz	r3, 40284c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402848:	4b30      	ldr	r3, [pc, #192]	; (40290c <xTaskIncrementTick+0x138>)
  40284a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40284c:	4b30      	ldr	r3, [pc, #192]	; (402910 <xTaskIncrementTick+0x13c>)
  40284e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402850:	2b00      	cmp	r3, #0
}
  402852:	bf0c      	ite	eq
  402854:	4620      	moveq	r0, r4
  402856:	2001      	movne	r0, #1
  402858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40285c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40285e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4028ec <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402862:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40291c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402866:	4f2b      	ldr	r7, [pc, #172]	; (402914 <xTaskIncrementTick+0x140>)
  402868:	e01f      	b.n	4028aa <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40286a:	f04f 32ff 	mov.w	r2, #4294967295
  40286e:	4b23      	ldr	r3, [pc, #140]	; (4028fc <xTaskIncrementTick+0x128>)
  402870:	601a      	str	r2, [r3, #0]
						break;
  402872:	e7db      	b.n	40282c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402874:	4a21      	ldr	r2, [pc, #132]	; (4028fc <xTaskIncrementTick+0x128>)
  402876:	6013      	str	r3, [r2, #0]
							break;
  402878:	e7d8      	b.n	40282c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40287a:	f105 0018 	add.w	r0, r5, #24
  40287e:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402880:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402882:	683a      	ldr	r2, [r7, #0]
  402884:	2301      	movs	r3, #1
  402886:	4083      	lsls	r3, r0
  402888:	4313      	orrs	r3, r2
  40288a:	603b      	str	r3, [r7, #0]
  40288c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402890:	4651      	mov	r1, sl
  402892:	4b1c      	ldr	r3, [pc, #112]	; (402904 <xTaskIncrementTick+0x130>)
  402894:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402898:	4b1f      	ldr	r3, [pc, #124]	; (402918 <xTaskIncrementTick+0x144>)
  40289a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40289c:	4b18      	ldr	r3, [pc, #96]	; (402900 <xTaskIncrementTick+0x12c>)
  40289e:	681b      	ldr	r3, [r3, #0]
  4028a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4028a4:	429a      	cmp	r2, r3
  4028a6:	bf28      	it	cs
  4028a8:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4028aa:	f8d9 3000 	ldr.w	r3, [r9]
  4028ae:	681b      	ldr	r3, [r3, #0]
  4028b0:	2b00      	cmp	r3, #0
  4028b2:	d0da      	beq.n	40286a <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4028b4:	f8d9 3000 	ldr.w	r3, [r9]
  4028b8:	68db      	ldr	r3, [r3, #12]
  4028ba:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4028bc:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4028be:	429e      	cmp	r6, r3
  4028c0:	d3d8      	bcc.n	402874 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4028c2:	f105 0a04 	add.w	sl, r5, #4
  4028c6:	4650      	mov	r0, sl
  4028c8:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4028ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	d1d4      	bne.n	40287a <xTaskIncrementTick+0xa6>
  4028d0:	e7d6      	b.n	402880 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4028d2:	4a0d      	ldr	r2, [pc, #52]	; (402908 <xTaskIncrementTick+0x134>)
  4028d4:	6813      	ldr	r3, [r2, #0]
  4028d6:	3301      	adds	r3, #1
  4028d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4028da:	4b0c      	ldr	r3, [pc, #48]	; (40290c <xTaskIncrementTick+0x138>)
  4028dc:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4028de:	2400      	movs	r4, #0
  4028e0:	e7b4      	b.n	40284c <xTaskIncrementTick+0x78>
  4028e2:	bf00      	nop
  4028e4:	20400cec 	.word	0x20400cec
  4028e8:	20400d6c 	.word	0x20400d6c
  4028ec:	20400c78 	.word	0x20400c78
  4028f0:	20400c7c 	.word	0x20400c7c
  4028f4:	20400d28 	.word	0x20400d28
  4028f8:	00402471 	.word	0x00402471
  4028fc:	20400d24 	.word	0x20400d24
  402900:	20400c74 	.word	0x20400c74
  402904:	20400c80 	.word	0x20400c80
  402908:	20400ce8 	.word	0x20400ce8
  40290c:	00403609 	.word	0x00403609
  402910:	20400d70 	.word	0x20400d70
  402914:	20400cf8 	.word	0x20400cf8
  402918:	00401785 	.word	0x00401785
  40291c:	004017d1 	.word	0x004017d1

00402920 <xTaskResumeAll>:
{
  402920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402924:	4b38      	ldr	r3, [pc, #224]	; (402a08 <xTaskResumeAll+0xe8>)
  402926:	681b      	ldr	r3, [r3, #0]
  402928:	b953      	cbnz	r3, 402940 <xTaskResumeAll+0x20>
  40292a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40292e:	b672      	cpsid	i
  402930:	f383 8811 	msr	BASEPRI, r3
  402934:	f3bf 8f6f 	isb	sy
  402938:	f3bf 8f4f 	dsb	sy
  40293c:	b662      	cpsie	i
  40293e:	e7fe      	b.n	40293e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402940:	4b32      	ldr	r3, [pc, #200]	; (402a0c <xTaskResumeAll+0xec>)
  402942:	4798      	blx	r3
		--uxSchedulerSuspended;
  402944:	4b30      	ldr	r3, [pc, #192]	; (402a08 <xTaskResumeAll+0xe8>)
  402946:	681a      	ldr	r2, [r3, #0]
  402948:	3a01      	subs	r2, #1
  40294a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40294c:	681b      	ldr	r3, [r3, #0]
  40294e:	2b00      	cmp	r3, #0
  402950:	d155      	bne.n	4029fe <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402952:	4b2f      	ldr	r3, [pc, #188]	; (402a10 <xTaskResumeAll+0xf0>)
  402954:	681b      	ldr	r3, [r3, #0]
  402956:	2b00      	cmp	r3, #0
  402958:	d132      	bne.n	4029c0 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40295a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40295c:	4b2d      	ldr	r3, [pc, #180]	; (402a14 <xTaskResumeAll+0xf4>)
  40295e:	4798      	blx	r3
}
  402960:	4620      	mov	r0, r4
  402962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402966:	68fb      	ldr	r3, [r7, #12]
  402968:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40296a:	f104 0018 	add.w	r0, r4, #24
  40296e:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402970:	f104 0804 	add.w	r8, r4, #4
  402974:	4640      	mov	r0, r8
  402976:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402978:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40297a:	682a      	ldr	r2, [r5, #0]
  40297c:	2301      	movs	r3, #1
  40297e:	4083      	lsls	r3, r0
  402980:	4313      	orrs	r3, r2
  402982:	602b      	str	r3, [r5, #0]
  402984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402988:	4641      	mov	r1, r8
  40298a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40298e:	4b22      	ldr	r3, [pc, #136]	; (402a18 <xTaskResumeAll+0xf8>)
  402990:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402992:	4b22      	ldr	r3, [pc, #136]	; (402a1c <xTaskResumeAll+0xfc>)
  402994:	681b      	ldr	r3, [r3, #0]
  402996:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40299a:	429a      	cmp	r2, r3
  40299c:	d20c      	bcs.n	4029b8 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40299e:	683b      	ldr	r3, [r7, #0]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d1e0      	bne.n	402966 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4029a4:	4b1e      	ldr	r3, [pc, #120]	; (402a20 <xTaskResumeAll+0x100>)
  4029a6:	681b      	ldr	r3, [r3, #0]
  4029a8:	b1db      	cbz	r3, 4029e2 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4029aa:	4b1d      	ldr	r3, [pc, #116]	; (402a20 <xTaskResumeAll+0x100>)
  4029ac:	681b      	ldr	r3, [r3, #0]
  4029ae:	b1c3      	cbz	r3, 4029e2 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4029b0:	4e1c      	ldr	r6, [pc, #112]	; (402a24 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4029b2:	4d1d      	ldr	r5, [pc, #116]	; (402a28 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4029b4:	4c1a      	ldr	r4, [pc, #104]	; (402a20 <xTaskResumeAll+0x100>)
  4029b6:	e00e      	b.n	4029d6 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4029b8:	2201      	movs	r2, #1
  4029ba:	4b1b      	ldr	r3, [pc, #108]	; (402a28 <xTaskResumeAll+0x108>)
  4029bc:	601a      	str	r2, [r3, #0]
  4029be:	e7ee      	b.n	40299e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4029c0:	4f1a      	ldr	r7, [pc, #104]	; (402a2c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4029c2:	4e1b      	ldr	r6, [pc, #108]	; (402a30 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4029c4:	4d1b      	ldr	r5, [pc, #108]	; (402a34 <xTaskResumeAll+0x114>)
  4029c6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402a3c <xTaskResumeAll+0x11c>
  4029ca:	e7e8      	b.n	40299e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4029cc:	6823      	ldr	r3, [r4, #0]
  4029ce:	3b01      	subs	r3, #1
  4029d0:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4029d2:	6823      	ldr	r3, [r4, #0]
  4029d4:	b12b      	cbz	r3, 4029e2 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4029d6:	47b0      	blx	r6
  4029d8:	2800      	cmp	r0, #0
  4029da:	d0f7      	beq.n	4029cc <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4029dc:	2301      	movs	r3, #1
  4029de:	602b      	str	r3, [r5, #0]
  4029e0:	e7f4      	b.n	4029cc <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4029e2:	4b11      	ldr	r3, [pc, #68]	; (402a28 <xTaskResumeAll+0x108>)
  4029e4:	681b      	ldr	r3, [r3, #0]
  4029e6:	2b01      	cmp	r3, #1
  4029e8:	d10b      	bne.n	402a02 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4029ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029ee:	4b12      	ldr	r3, [pc, #72]	; (402a38 <xTaskResumeAll+0x118>)
  4029f0:	601a      	str	r2, [r3, #0]
  4029f2:	f3bf 8f4f 	dsb	sy
  4029f6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4029fa:	2401      	movs	r4, #1
  4029fc:	e7ae      	b.n	40295c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4029fe:	2400      	movs	r4, #0
  402a00:	e7ac      	b.n	40295c <xTaskResumeAll+0x3c>
  402a02:	2400      	movs	r4, #0
  402a04:	e7aa      	b.n	40295c <xTaskResumeAll+0x3c>
  402a06:	bf00      	nop
  402a08:	20400cec 	.word	0x20400cec
  402a0c:	004018b5 	.word	0x004018b5
  402a10:	20400ce4 	.word	0x20400ce4
  402a14:	00401901 	.word	0x00401901
  402a18:	00401785 	.word	0x00401785
  402a1c:	20400c74 	.word	0x20400c74
  402a20:	20400ce8 	.word	0x20400ce8
  402a24:	004027d5 	.word	0x004027d5
  402a28:	20400d70 	.word	0x20400d70
  402a2c:	20400d2c 	.word	0x20400d2c
  402a30:	004017d1 	.word	0x004017d1
  402a34:	20400cf8 	.word	0x20400cf8
  402a38:	e000ed04 	.word	0xe000ed04
  402a3c:	20400c80 	.word	0x20400c80

00402a40 <prvIdleTask>:
{
  402a40:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402a42:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402acc <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402a46:	4e19      	ldr	r6, [pc, #100]	; (402aac <prvIdleTask+0x6c>)
				taskYIELD();
  402a48:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402ad0 <prvIdleTask+0x90>
  402a4c:	e02a      	b.n	402aa4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402a4e:	4b18      	ldr	r3, [pc, #96]	; (402ab0 <prvIdleTask+0x70>)
  402a50:	681b      	ldr	r3, [r3, #0]
  402a52:	2b01      	cmp	r3, #1
  402a54:	d81e      	bhi.n	402a94 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a56:	682b      	ldr	r3, [r5, #0]
  402a58:	2b00      	cmp	r3, #0
  402a5a:	d0f8      	beq.n	402a4e <prvIdleTask+0xe>
			vTaskSuspendAll();
  402a5c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402a5e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402a60:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402a62:	2c00      	cmp	r4, #0
  402a64:	d0f7      	beq.n	402a56 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402a66:	4b13      	ldr	r3, [pc, #76]	; (402ab4 <prvIdleTask+0x74>)
  402a68:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402a6a:	68f3      	ldr	r3, [r6, #12]
  402a6c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a6e:	1d20      	adds	r0, r4, #4
  402a70:	4b11      	ldr	r3, [pc, #68]	; (402ab8 <prvIdleTask+0x78>)
  402a72:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402a74:	4a11      	ldr	r2, [pc, #68]	; (402abc <prvIdleTask+0x7c>)
  402a76:	6813      	ldr	r3, [r2, #0]
  402a78:	3b01      	subs	r3, #1
  402a7a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402a7c:	682b      	ldr	r3, [r5, #0]
  402a7e:	3b01      	subs	r3, #1
  402a80:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402a82:	4b0f      	ldr	r3, [pc, #60]	; (402ac0 <prvIdleTask+0x80>)
  402a84:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402a86:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402a88:	f8df a048 	ldr.w	sl, [pc, #72]	; 402ad4 <prvIdleTask+0x94>
  402a8c:	47d0      	blx	sl
		vPortFree( pxTCB );
  402a8e:	4620      	mov	r0, r4
  402a90:	47d0      	blx	sl
  402a92:	e7e0      	b.n	402a56 <prvIdleTask+0x16>
				taskYIELD();
  402a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402a98:	f8c9 3000 	str.w	r3, [r9]
  402a9c:	f3bf 8f4f 	dsb	sy
  402aa0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402aa4:	4d07      	ldr	r5, [pc, #28]	; (402ac4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402aa6:	4f08      	ldr	r7, [pc, #32]	; (402ac8 <prvIdleTask+0x88>)
  402aa8:	e7d5      	b.n	402a56 <prvIdleTask+0x16>
  402aaa:	bf00      	nop
  402aac:	20400d58 	.word	0x20400d58
  402ab0:	20400c80 	.word	0x20400c80
  402ab4:	004018b5 	.word	0x004018b5
  402ab8:	004017d1 	.word	0x004017d1
  402abc:	20400ce4 	.word	0x20400ce4
  402ac0:	00401901 	.word	0x00401901
  402ac4:	20400cf4 	.word	0x20400cf4
  402ac8:	00402921 	.word	0x00402921
  402acc:	004027b9 	.word	0x004027b9
  402ad0:	e000ed04 	.word	0xe000ed04
  402ad4:	00401b41 	.word	0x00401b41

00402ad8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402ad8:	4b2d      	ldr	r3, [pc, #180]	; (402b90 <vTaskSwitchContext+0xb8>)
  402ada:	681b      	ldr	r3, [r3, #0]
  402adc:	2b00      	cmp	r3, #0
  402ade:	d12c      	bne.n	402b3a <vTaskSwitchContext+0x62>
{
  402ae0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402ae2:	2200      	movs	r2, #0
  402ae4:	4b2b      	ldr	r3, [pc, #172]	; (402b94 <vTaskSwitchContext+0xbc>)
  402ae6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402ae8:	4b2b      	ldr	r3, [pc, #172]	; (402b98 <vTaskSwitchContext+0xc0>)
  402aea:	681b      	ldr	r3, [r3, #0]
  402aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402aee:	681a      	ldr	r2, [r3, #0]
  402af0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402af4:	d103      	bne.n	402afe <vTaskSwitchContext+0x26>
  402af6:	685a      	ldr	r2, [r3, #4]
  402af8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402afc:	d021      	beq.n	402b42 <vTaskSwitchContext+0x6a>
  402afe:	4b26      	ldr	r3, [pc, #152]	; (402b98 <vTaskSwitchContext+0xc0>)
  402b00:	6818      	ldr	r0, [r3, #0]
  402b02:	6819      	ldr	r1, [r3, #0]
  402b04:	3134      	adds	r1, #52	; 0x34
  402b06:	4b25      	ldr	r3, [pc, #148]	; (402b9c <vTaskSwitchContext+0xc4>)
  402b08:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402b0a:	4b25      	ldr	r3, [pc, #148]	; (402ba0 <vTaskSwitchContext+0xc8>)
  402b0c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402b0e:	fab3 f383 	clz	r3, r3
  402b12:	b2db      	uxtb	r3, r3
  402b14:	f1c3 031f 	rsb	r3, r3, #31
  402b18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402b1c:	4a21      	ldr	r2, [pc, #132]	; (402ba4 <vTaskSwitchContext+0xcc>)
  402b1e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402b22:	b9ba      	cbnz	r2, 402b54 <vTaskSwitchContext+0x7c>
	__asm volatile
  402b24:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b28:	b672      	cpsid	i
  402b2a:	f383 8811 	msr	BASEPRI, r3
  402b2e:	f3bf 8f6f 	isb	sy
  402b32:	f3bf 8f4f 	dsb	sy
  402b36:	b662      	cpsie	i
  402b38:	e7fe      	b.n	402b38 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402b3a:	2201      	movs	r2, #1
  402b3c:	4b15      	ldr	r3, [pc, #84]	; (402b94 <vTaskSwitchContext+0xbc>)
  402b3e:	601a      	str	r2, [r3, #0]
  402b40:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402b42:	689a      	ldr	r2, [r3, #8]
  402b44:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402b48:	d1d9      	bne.n	402afe <vTaskSwitchContext+0x26>
  402b4a:	68db      	ldr	r3, [r3, #12]
  402b4c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402b50:	d1d5      	bne.n	402afe <vTaskSwitchContext+0x26>
  402b52:	e7da      	b.n	402b0a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402b54:	4a13      	ldr	r2, [pc, #76]	; (402ba4 <vTaskSwitchContext+0xcc>)
  402b56:	0099      	lsls	r1, r3, #2
  402b58:	18c8      	adds	r0, r1, r3
  402b5a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402b5e:	6844      	ldr	r4, [r0, #4]
  402b60:	6864      	ldr	r4, [r4, #4]
  402b62:	6044      	str	r4, [r0, #4]
  402b64:	4419      	add	r1, r3
  402b66:	4602      	mov	r2, r0
  402b68:	3208      	adds	r2, #8
  402b6a:	4294      	cmp	r4, r2
  402b6c:	d009      	beq.n	402b82 <vTaskSwitchContext+0xaa>
  402b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b72:	4a0c      	ldr	r2, [pc, #48]	; (402ba4 <vTaskSwitchContext+0xcc>)
  402b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402b78:	685b      	ldr	r3, [r3, #4]
  402b7a:	68da      	ldr	r2, [r3, #12]
  402b7c:	4b06      	ldr	r3, [pc, #24]	; (402b98 <vTaskSwitchContext+0xc0>)
  402b7e:	601a      	str	r2, [r3, #0]
  402b80:	bd10      	pop	{r4, pc}
  402b82:	6860      	ldr	r0, [r4, #4]
  402b84:	4a07      	ldr	r2, [pc, #28]	; (402ba4 <vTaskSwitchContext+0xcc>)
  402b86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402b8a:	6050      	str	r0, [r2, #4]
  402b8c:	e7ef      	b.n	402b6e <vTaskSwitchContext+0x96>
  402b8e:	bf00      	nop
  402b90:	20400cec 	.word	0x20400cec
  402b94:	20400d70 	.word	0x20400d70
  402b98:	20400c74 	.word	0x20400c74
  402b9c:	004035f5 	.word	0x004035f5
  402ba0:	20400cf8 	.word	0x20400cf8
  402ba4:	20400c80 	.word	0x20400c80

00402ba8 <vTaskPlaceOnEventList>:
{
  402ba8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402baa:	b1e0      	cbz	r0, 402be6 <vTaskPlaceOnEventList+0x3e>
  402bac:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402bae:	4d17      	ldr	r5, [pc, #92]	; (402c0c <vTaskPlaceOnEventList+0x64>)
  402bb0:	6829      	ldr	r1, [r5, #0]
  402bb2:	3118      	adds	r1, #24
  402bb4:	4b16      	ldr	r3, [pc, #88]	; (402c10 <vTaskPlaceOnEventList+0x68>)
  402bb6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402bb8:	6828      	ldr	r0, [r5, #0]
  402bba:	3004      	adds	r0, #4
  402bbc:	4b15      	ldr	r3, [pc, #84]	; (402c14 <vTaskPlaceOnEventList+0x6c>)
  402bbe:	4798      	blx	r3
  402bc0:	b940      	cbnz	r0, 402bd4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402bc2:	682a      	ldr	r2, [r5, #0]
  402bc4:	4914      	ldr	r1, [pc, #80]	; (402c18 <vTaskPlaceOnEventList+0x70>)
  402bc6:	680b      	ldr	r3, [r1, #0]
  402bc8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402bca:	2201      	movs	r2, #1
  402bcc:	4082      	lsls	r2, r0
  402bce:	ea23 0302 	bic.w	r3, r3, r2
  402bd2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402bd4:	f1b4 3fff 	cmp.w	r4, #4294967295
  402bd8:	d010      	beq.n	402bfc <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402bda:	4b10      	ldr	r3, [pc, #64]	; (402c1c <vTaskPlaceOnEventList+0x74>)
  402bdc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402bde:	4420      	add	r0, r4
  402be0:	4b0f      	ldr	r3, [pc, #60]	; (402c20 <vTaskPlaceOnEventList+0x78>)
  402be2:	4798      	blx	r3
  402be4:	bd38      	pop	{r3, r4, r5, pc}
  402be6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bea:	b672      	cpsid	i
  402bec:	f383 8811 	msr	BASEPRI, r3
  402bf0:	f3bf 8f6f 	isb	sy
  402bf4:	f3bf 8f4f 	dsb	sy
  402bf8:	b662      	cpsie	i
  402bfa:	e7fe      	b.n	402bfa <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402bfc:	4b03      	ldr	r3, [pc, #12]	; (402c0c <vTaskPlaceOnEventList+0x64>)
  402bfe:	6819      	ldr	r1, [r3, #0]
  402c00:	3104      	adds	r1, #4
  402c02:	4808      	ldr	r0, [pc, #32]	; (402c24 <vTaskPlaceOnEventList+0x7c>)
  402c04:	4b08      	ldr	r3, [pc, #32]	; (402c28 <vTaskPlaceOnEventList+0x80>)
  402c06:	4798      	blx	r3
  402c08:	bd38      	pop	{r3, r4, r5, pc}
  402c0a:	bf00      	nop
  402c0c:	20400c74 	.word	0x20400c74
  402c10:	0040179d 	.word	0x0040179d
  402c14:	004017d1 	.word	0x004017d1
  402c18:	20400cf8 	.word	0x20400cf8
  402c1c:	20400d6c 	.word	0x20400d6c
  402c20:	0040249d 	.word	0x0040249d
  402c24:	20400d44 	.word	0x20400d44
  402c28:	00401785 	.word	0x00401785

00402c2c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402c2c:	b1e8      	cbz	r0, 402c6a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402c2e:	b570      	push	{r4, r5, r6, lr}
  402c30:	4615      	mov	r5, r2
  402c32:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402c34:	4e16      	ldr	r6, [pc, #88]	; (402c90 <vTaskPlaceOnEventListRestricted+0x64>)
  402c36:	6831      	ldr	r1, [r6, #0]
  402c38:	3118      	adds	r1, #24
  402c3a:	4b16      	ldr	r3, [pc, #88]	; (402c94 <vTaskPlaceOnEventListRestricted+0x68>)
  402c3c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c3e:	6830      	ldr	r0, [r6, #0]
  402c40:	3004      	adds	r0, #4
  402c42:	4b15      	ldr	r3, [pc, #84]	; (402c98 <vTaskPlaceOnEventListRestricted+0x6c>)
  402c44:	4798      	blx	r3
  402c46:	b940      	cbnz	r0, 402c5a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402c48:	6832      	ldr	r2, [r6, #0]
  402c4a:	4914      	ldr	r1, [pc, #80]	; (402c9c <vTaskPlaceOnEventListRestricted+0x70>)
  402c4c:	680b      	ldr	r3, [r1, #0]
  402c4e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402c50:	2201      	movs	r2, #1
  402c52:	4082      	lsls	r2, r0
  402c54:	ea23 0302 	bic.w	r3, r3, r2
  402c58:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402c5a:	2d01      	cmp	r5, #1
  402c5c:	d010      	beq.n	402c80 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402c5e:	4b10      	ldr	r3, [pc, #64]	; (402ca0 <vTaskPlaceOnEventListRestricted+0x74>)
  402c60:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402c62:	4420      	add	r0, r4
  402c64:	4b0f      	ldr	r3, [pc, #60]	; (402ca4 <vTaskPlaceOnEventListRestricted+0x78>)
  402c66:	4798      	blx	r3
  402c68:	bd70      	pop	{r4, r5, r6, pc}
  402c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6e:	b672      	cpsid	i
  402c70:	f383 8811 	msr	BASEPRI, r3
  402c74:	f3bf 8f6f 	isb	sy
  402c78:	f3bf 8f4f 	dsb	sy
  402c7c:	b662      	cpsie	i
  402c7e:	e7fe      	b.n	402c7e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c80:	4b03      	ldr	r3, [pc, #12]	; (402c90 <vTaskPlaceOnEventListRestricted+0x64>)
  402c82:	6819      	ldr	r1, [r3, #0]
  402c84:	3104      	adds	r1, #4
  402c86:	4808      	ldr	r0, [pc, #32]	; (402ca8 <vTaskPlaceOnEventListRestricted+0x7c>)
  402c88:	4b02      	ldr	r3, [pc, #8]	; (402c94 <vTaskPlaceOnEventListRestricted+0x68>)
  402c8a:	4798      	blx	r3
  402c8c:	bd70      	pop	{r4, r5, r6, pc}
  402c8e:	bf00      	nop
  402c90:	20400c74 	.word	0x20400c74
  402c94:	00401785 	.word	0x00401785
  402c98:	004017d1 	.word	0x004017d1
  402c9c:	20400cf8 	.word	0x20400cf8
  402ca0:	20400d6c 	.word	0x20400d6c
  402ca4:	0040249d 	.word	0x0040249d
  402ca8:	20400d44 	.word	0x20400d44

00402cac <xTaskRemoveFromEventList>:
{
  402cac:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402cae:	68c3      	ldr	r3, [r0, #12]
  402cb0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402cb2:	b324      	cbz	r4, 402cfe <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402cb4:	f104 0518 	add.w	r5, r4, #24
  402cb8:	4628      	mov	r0, r5
  402cba:	4b1a      	ldr	r3, [pc, #104]	; (402d24 <xTaskRemoveFromEventList+0x78>)
  402cbc:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402cbe:	4b1a      	ldr	r3, [pc, #104]	; (402d28 <xTaskRemoveFromEventList+0x7c>)
  402cc0:	681b      	ldr	r3, [r3, #0]
  402cc2:	bb3b      	cbnz	r3, 402d14 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402cc4:	1d25      	adds	r5, r4, #4
  402cc6:	4628      	mov	r0, r5
  402cc8:	4b16      	ldr	r3, [pc, #88]	; (402d24 <xTaskRemoveFromEventList+0x78>)
  402cca:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402ccc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402cce:	4a17      	ldr	r2, [pc, #92]	; (402d2c <xTaskRemoveFromEventList+0x80>)
  402cd0:	6811      	ldr	r1, [r2, #0]
  402cd2:	2301      	movs	r3, #1
  402cd4:	4083      	lsls	r3, r0
  402cd6:	430b      	orrs	r3, r1
  402cd8:	6013      	str	r3, [r2, #0]
  402cda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cde:	4629      	mov	r1, r5
  402ce0:	4b13      	ldr	r3, [pc, #76]	; (402d30 <xTaskRemoveFromEventList+0x84>)
  402ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ce6:	4b13      	ldr	r3, [pc, #76]	; (402d34 <xTaskRemoveFromEventList+0x88>)
  402ce8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402cea:	4b13      	ldr	r3, [pc, #76]	; (402d38 <xTaskRemoveFromEventList+0x8c>)
  402cec:	681b      	ldr	r3, [r3, #0]
  402cee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cf2:	429a      	cmp	r2, r3
  402cf4:	d913      	bls.n	402d1e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402cf6:	2001      	movs	r0, #1
  402cf8:	4b10      	ldr	r3, [pc, #64]	; (402d3c <xTaskRemoveFromEventList+0x90>)
  402cfa:	6018      	str	r0, [r3, #0]
  402cfc:	bd38      	pop	{r3, r4, r5, pc}
  402cfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d02:	b672      	cpsid	i
  402d04:	f383 8811 	msr	BASEPRI, r3
  402d08:	f3bf 8f6f 	isb	sy
  402d0c:	f3bf 8f4f 	dsb	sy
  402d10:	b662      	cpsie	i
  402d12:	e7fe      	b.n	402d12 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402d14:	4629      	mov	r1, r5
  402d16:	480a      	ldr	r0, [pc, #40]	; (402d40 <xTaskRemoveFromEventList+0x94>)
  402d18:	4b06      	ldr	r3, [pc, #24]	; (402d34 <xTaskRemoveFromEventList+0x88>)
  402d1a:	4798      	blx	r3
  402d1c:	e7e5      	b.n	402cea <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402d1e:	2000      	movs	r0, #0
}
  402d20:	bd38      	pop	{r3, r4, r5, pc}
  402d22:	bf00      	nop
  402d24:	004017d1 	.word	0x004017d1
  402d28:	20400cec 	.word	0x20400cec
  402d2c:	20400cf8 	.word	0x20400cf8
  402d30:	20400c80 	.word	0x20400c80
  402d34:	00401785 	.word	0x00401785
  402d38:	20400c74 	.word	0x20400c74
  402d3c:	20400d70 	.word	0x20400d70
  402d40:	20400d2c 	.word	0x20400d2c

00402d44 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402d44:	b130      	cbz	r0, 402d54 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402d46:	4a09      	ldr	r2, [pc, #36]	; (402d6c <vTaskSetTimeOutState+0x28>)
  402d48:	6812      	ldr	r2, [r2, #0]
  402d4a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402d4c:	4a08      	ldr	r2, [pc, #32]	; (402d70 <vTaskSetTimeOutState+0x2c>)
  402d4e:	6812      	ldr	r2, [r2, #0]
  402d50:	6042      	str	r2, [r0, #4]
  402d52:	4770      	bx	lr
  402d54:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d58:	b672      	cpsid	i
  402d5a:	f383 8811 	msr	BASEPRI, r3
  402d5e:	f3bf 8f6f 	isb	sy
  402d62:	f3bf 8f4f 	dsb	sy
  402d66:	b662      	cpsie	i
  402d68:	e7fe      	b.n	402d68 <vTaskSetTimeOutState+0x24>
  402d6a:	bf00      	nop
  402d6c:	20400d28 	.word	0x20400d28
  402d70:	20400d6c 	.word	0x20400d6c

00402d74 <xTaskCheckForTimeOut>:
{
  402d74:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402d76:	b1c0      	cbz	r0, 402daa <xTaskCheckForTimeOut+0x36>
  402d78:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402d7a:	b309      	cbz	r1, 402dc0 <xTaskCheckForTimeOut+0x4c>
  402d7c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402d7e:	4b1d      	ldr	r3, [pc, #116]	; (402df4 <xTaskCheckForTimeOut+0x80>)
  402d80:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402d82:	4b1d      	ldr	r3, [pc, #116]	; (402df8 <xTaskCheckForTimeOut+0x84>)
  402d84:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402d86:	682b      	ldr	r3, [r5, #0]
  402d88:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d8c:	d02e      	beq.n	402dec <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402d8e:	491b      	ldr	r1, [pc, #108]	; (402dfc <xTaskCheckForTimeOut+0x88>)
  402d90:	6809      	ldr	r1, [r1, #0]
  402d92:	6820      	ldr	r0, [r4, #0]
  402d94:	4288      	cmp	r0, r1
  402d96:	d002      	beq.n	402d9e <xTaskCheckForTimeOut+0x2a>
  402d98:	6861      	ldr	r1, [r4, #4]
  402d9a:	428a      	cmp	r2, r1
  402d9c:	d228      	bcs.n	402df0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402d9e:	6861      	ldr	r1, [r4, #4]
  402da0:	1a50      	subs	r0, r2, r1
  402da2:	4283      	cmp	r3, r0
  402da4:	d817      	bhi.n	402dd6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402da6:	2401      	movs	r4, #1
  402da8:	e01c      	b.n	402de4 <xTaskCheckForTimeOut+0x70>
  402daa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dae:	b672      	cpsid	i
  402db0:	f383 8811 	msr	BASEPRI, r3
  402db4:	f3bf 8f6f 	isb	sy
  402db8:	f3bf 8f4f 	dsb	sy
  402dbc:	b662      	cpsie	i
  402dbe:	e7fe      	b.n	402dbe <xTaskCheckForTimeOut+0x4a>
  402dc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dc4:	b672      	cpsid	i
  402dc6:	f383 8811 	msr	BASEPRI, r3
  402dca:	f3bf 8f6f 	isb	sy
  402dce:	f3bf 8f4f 	dsb	sy
  402dd2:	b662      	cpsie	i
  402dd4:	e7fe      	b.n	402dd4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402dd6:	1a9b      	subs	r3, r3, r2
  402dd8:	440b      	add	r3, r1
  402dda:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402ddc:	4620      	mov	r0, r4
  402dde:	4b08      	ldr	r3, [pc, #32]	; (402e00 <xTaskCheckForTimeOut+0x8c>)
  402de0:	4798      	blx	r3
			xReturn = pdFALSE;
  402de2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402de4:	4b07      	ldr	r3, [pc, #28]	; (402e04 <xTaskCheckForTimeOut+0x90>)
  402de6:	4798      	blx	r3
}
  402de8:	4620      	mov	r0, r4
  402dea:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402dec:	2400      	movs	r4, #0
  402dee:	e7f9      	b.n	402de4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402df0:	2401      	movs	r4, #1
  402df2:	e7f7      	b.n	402de4 <xTaskCheckForTimeOut+0x70>
  402df4:	004018b5 	.word	0x004018b5
  402df8:	20400d6c 	.word	0x20400d6c
  402dfc:	20400d28 	.word	0x20400d28
  402e00:	00402d45 	.word	0x00402d45
  402e04:	00401901 	.word	0x00401901

00402e08 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402e08:	2201      	movs	r2, #1
  402e0a:	4b01      	ldr	r3, [pc, #4]	; (402e10 <vTaskMissedYield+0x8>)
  402e0c:	601a      	str	r2, [r3, #0]
  402e0e:	4770      	bx	lr
  402e10:	20400d70 	.word	0x20400d70

00402e14 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402e14:	4b05      	ldr	r3, [pc, #20]	; (402e2c <xTaskGetSchedulerState+0x18>)
  402e16:	681b      	ldr	r3, [r3, #0]
  402e18:	b133      	cbz	r3, 402e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e1a:	4b05      	ldr	r3, [pc, #20]	; (402e30 <xTaskGetSchedulerState+0x1c>)
  402e1c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402e1e:	2b00      	cmp	r3, #0
  402e20:	bf0c      	ite	eq
  402e22:	2002      	moveq	r0, #2
  402e24:	2000      	movne	r0, #0
  402e26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402e28:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402e2a:	4770      	bx	lr
  402e2c:	20400d40 	.word	0x20400d40
  402e30:	20400cec 	.word	0x20400cec

00402e34 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402e34:	2800      	cmp	r0, #0
  402e36:	d044      	beq.n	402ec2 <vTaskPriorityInherit+0x8e>
	{
  402e38:	b538      	push	{r3, r4, r5, lr}
  402e3a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402e3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402e3e:	4921      	ldr	r1, [pc, #132]	; (402ec4 <vTaskPriorityInherit+0x90>)
  402e40:	6809      	ldr	r1, [r1, #0]
  402e42:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e44:	428a      	cmp	r2, r1
  402e46:	d214      	bcs.n	402e72 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402e48:	6981      	ldr	r1, [r0, #24]
  402e4a:	2900      	cmp	r1, #0
  402e4c:	db05      	blt.n	402e5a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e4e:	491d      	ldr	r1, [pc, #116]	; (402ec4 <vTaskPriorityInherit+0x90>)
  402e50:	6809      	ldr	r1, [r1, #0]
  402e52:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e54:	f1c1 0105 	rsb	r1, r1, #5
  402e58:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402e5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402e5e:	491a      	ldr	r1, [pc, #104]	; (402ec8 <vTaskPriorityInherit+0x94>)
  402e60:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402e64:	6961      	ldr	r1, [r4, #20]
  402e66:	4291      	cmp	r1, r2
  402e68:	d004      	beq.n	402e74 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e6a:	4a16      	ldr	r2, [pc, #88]	; (402ec4 <vTaskPriorityInherit+0x90>)
  402e6c:	6812      	ldr	r2, [r2, #0]
  402e6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402e70:	62e2      	str	r2, [r4, #44]	; 0x2c
  402e72:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e74:	1d25      	adds	r5, r4, #4
  402e76:	4628      	mov	r0, r5
  402e78:	4b14      	ldr	r3, [pc, #80]	; (402ecc <vTaskPriorityInherit+0x98>)
  402e7a:	4798      	blx	r3
  402e7c:	b970      	cbnz	r0, 402e9c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402e7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402e84:	4a10      	ldr	r2, [pc, #64]	; (402ec8 <vTaskPriorityInherit+0x94>)
  402e86:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402e8a:	b93a      	cbnz	r2, 402e9c <vTaskPriorityInherit+0x68>
  402e8c:	4810      	ldr	r0, [pc, #64]	; (402ed0 <vTaskPriorityInherit+0x9c>)
  402e8e:	6802      	ldr	r2, [r0, #0]
  402e90:	2101      	movs	r1, #1
  402e92:	fa01 f303 	lsl.w	r3, r1, r3
  402e96:	ea22 0303 	bic.w	r3, r2, r3
  402e9a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e9c:	4b09      	ldr	r3, [pc, #36]	; (402ec4 <vTaskPriorityInherit+0x90>)
  402e9e:	681b      	ldr	r3, [r3, #0]
  402ea0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402ea2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402ea4:	4a0a      	ldr	r2, [pc, #40]	; (402ed0 <vTaskPriorityInherit+0x9c>)
  402ea6:	6811      	ldr	r1, [r2, #0]
  402ea8:	2301      	movs	r3, #1
  402eaa:	4083      	lsls	r3, r0
  402eac:	430b      	orrs	r3, r1
  402eae:	6013      	str	r3, [r2, #0]
  402eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402eb4:	4629      	mov	r1, r5
  402eb6:	4b04      	ldr	r3, [pc, #16]	; (402ec8 <vTaskPriorityInherit+0x94>)
  402eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ebc:	4b05      	ldr	r3, [pc, #20]	; (402ed4 <vTaskPriorityInherit+0xa0>)
  402ebe:	4798      	blx	r3
  402ec0:	bd38      	pop	{r3, r4, r5, pc}
  402ec2:	4770      	bx	lr
  402ec4:	20400c74 	.word	0x20400c74
  402ec8:	20400c80 	.word	0x20400c80
  402ecc:	004017d1 	.word	0x004017d1
  402ed0:	20400cf8 	.word	0x20400cf8
  402ed4:	00401785 	.word	0x00401785

00402ed8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402ed8:	2800      	cmp	r0, #0
  402eda:	d04d      	beq.n	402f78 <xTaskPriorityDisinherit+0xa0>
	{
  402edc:	b538      	push	{r3, r4, r5, lr}
  402ede:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402ee0:	4a27      	ldr	r2, [pc, #156]	; (402f80 <xTaskPriorityDisinherit+0xa8>)
  402ee2:	6812      	ldr	r2, [r2, #0]
  402ee4:	4290      	cmp	r0, r2
  402ee6:	d00a      	beq.n	402efe <xTaskPriorityDisinherit+0x26>
  402ee8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eec:	b672      	cpsid	i
  402eee:	f383 8811 	msr	BASEPRI, r3
  402ef2:	f3bf 8f6f 	isb	sy
  402ef6:	f3bf 8f4f 	dsb	sy
  402efa:	b662      	cpsie	i
  402efc:	e7fe      	b.n	402efc <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402efe:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402f00:	b952      	cbnz	r2, 402f18 <xTaskPriorityDisinherit+0x40>
  402f02:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f06:	b672      	cpsid	i
  402f08:	f383 8811 	msr	BASEPRI, r3
  402f0c:	f3bf 8f6f 	isb	sy
  402f10:	f3bf 8f4f 	dsb	sy
  402f14:	b662      	cpsie	i
  402f16:	e7fe      	b.n	402f16 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402f18:	3a01      	subs	r2, #1
  402f1a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402f1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402f1e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402f20:	4288      	cmp	r0, r1
  402f22:	d02b      	beq.n	402f7c <xTaskPriorityDisinherit+0xa4>
  402f24:	bb52      	cbnz	r2, 402f7c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402f26:	1d25      	adds	r5, r4, #4
  402f28:	4628      	mov	r0, r5
  402f2a:	4b16      	ldr	r3, [pc, #88]	; (402f84 <xTaskPriorityDisinherit+0xac>)
  402f2c:	4798      	blx	r3
  402f2e:	b968      	cbnz	r0, 402f4c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402f30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402f32:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402f36:	4b14      	ldr	r3, [pc, #80]	; (402f88 <xTaskPriorityDisinherit+0xb0>)
  402f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402f3c:	b933      	cbnz	r3, 402f4c <xTaskPriorityDisinherit+0x74>
  402f3e:	4813      	ldr	r0, [pc, #76]	; (402f8c <xTaskPriorityDisinherit+0xb4>)
  402f40:	6803      	ldr	r3, [r0, #0]
  402f42:	2201      	movs	r2, #1
  402f44:	408a      	lsls	r2, r1
  402f46:	ea23 0302 	bic.w	r3, r3, r2
  402f4a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402f4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402f4e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402f50:	f1c0 0305 	rsb	r3, r0, #5
  402f54:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402f56:	4a0d      	ldr	r2, [pc, #52]	; (402f8c <xTaskPriorityDisinherit+0xb4>)
  402f58:	6811      	ldr	r1, [r2, #0]
  402f5a:	2401      	movs	r4, #1
  402f5c:	fa04 f300 	lsl.w	r3, r4, r0
  402f60:	430b      	orrs	r3, r1
  402f62:	6013      	str	r3, [r2, #0]
  402f64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f68:	4629      	mov	r1, r5
  402f6a:	4b07      	ldr	r3, [pc, #28]	; (402f88 <xTaskPriorityDisinherit+0xb0>)
  402f6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f70:	4b07      	ldr	r3, [pc, #28]	; (402f90 <xTaskPriorityDisinherit+0xb8>)
  402f72:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402f74:	4620      	mov	r0, r4
  402f76:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402f78:	2000      	movs	r0, #0
  402f7a:	4770      	bx	lr
  402f7c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402f7e:	bd38      	pop	{r3, r4, r5, pc}
  402f80:	20400c74 	.word	0x20400c74
  402f84:	004017d1 	.word	0x004017d1
  402f88:	20400c80 	.word	0x20400c80
  402f8c:	20400cf8 	.word	0x20400cf8
  402f90:	00401785 	.word	0x00401785

00402f94 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402f94:	4b05      	ldr	r3, [pc, #20]	; (402fac <pvTaskIncrementMutexHeldCount+0x18>)
  402f96:	681b      	ldr	r3, [r3, #0]
  402f98:	b123      	cbz	r3, 402fa4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402f9a:	4b04      	ldr	r3, [pc, #16]	; (402fac <pvTaskIncrementMutexHeldCount+0x18>)
  402f9c:	681a      	ldr	r2, [r3, #0]
  402f9e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402fa0:	3301      	adds	r3, #1
  402fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402fa4:	4b01      	ldr	r3, [pc, #4]	; (402fac <pvTaskIncrementMutexHeldCount+0x18>)
  402fa6:	6818      	ldr	r0, [r3, #0]
	}
  402fa8:	4770      	bx	lr
  402faa:	bf00      	nop
  402fac:	20400c74 	.word	0x20400c74

00402fb0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402fb0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402fb2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402fb4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402fb6:	4291      	cmp	r1, r2
  402fb8:	d80c      	bhi.n	402fd4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402fba:	1ad2      	subs	r2, r2, r3
  402fbc:	6983      	ldr	r3, [r0, #24]
  402fbe:	429a      	cmp	r2, r3
  402fc0:	d301      	bcc.n	402fc6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402fc2:	2001      	movs	r0, #1
  402fc4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402fc6:	1d01      	adds	r1, r0, #4
  402fc8:	4b09      	ldr	r3, [pc, #36]	; (402ff0 <prvInsertTimerInActiveList+0x40>)
  402fca:	6818      	ldr	r0, [r3, #0]
  402fcc:	4b09      	ldr	r3, [pc, #36]	; (402ff4 <prvInsertTimerInActiveList+0x44>)
  402fce:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402fd0:	2000      	movs	r0, #0
  402fd2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402fd4:	429a      	cmp	r2, r3
  402fd6:	d203      	bcs.n	402fe0 <prvInsertTimerInActiveList+0x30>
  402fd8:	4299      	cmp	r1, r3
  402fda:	d301      	bcc.n	402fe0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402fdc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402fde:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402fe0:	1d01      	adds	r1, r0, #4
  402fe2:	4b05      	ldr	r3, [pc, #20]	; (402ff8 <prvInsertTimerInActiveList+0x48>)
  402fe4:	6818      	ldr	r0, [r3, #0]
  402fe6:	4b03      	ldr	r3, [pc, #12]	; (402ff4 <prvInsertTimerInActiveList+0x44>)
  402fe8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402fea:	2000      	movs	r0, #0
  402fec:	bd08      	pop	{r3, pc}
  402fee:	bf00      	nop
  402ff0:	20400d78 	.word	0x20400d78
  402ff4:	0040179d 	.word	0x0040179d
  402ff8:	20400d74 	.word	0x20400d74

00402ffc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402ffc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402ffe:	4b15      	ldr	r3, [pc, #84]	; (403054 <prvCheckForValidListAndQueue+0x58>)
  403000:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403002:	4b15      	ldr	r3, [pc, #84]	; (403058 <prvCheckForValidListAndQueue+0x5c>)
  403004:	681b      	ldr	r3, [r3, #0]
  403006:	b113      	cbz	r3, 40300e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403008:	4b14      	ldr	r3, [pc, #80]	; (40305c <prvCheckForValidListAndQueue+0x60>)
  40300a:	4798      	blx	r3
  40300c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40300e:	4d14      	ldr	r5, [pc, #80]	; (403060 <prvCheckForValidListAndQueue+0x64>)
  403010:	4628      	mov	r0, r5
  403012:	4e14      	ldr	r6, [pc, #80]	; (403064 <prvCheckForValidListAndQueue+0x68>)
  403014:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  403016:	4c14      	ldr	r4, [pc, #80]	; (403068 <prvCheckForValidListAndQueue+0x6c>)
  403018:	4620      	mov	r0, r4
  40301a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40301c:	4b13      	ldr	r3, [pc, #76]	; (40306c <prvCheckForValidListAndQueue+0x70>)
  40301e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403020:	4b13      	ldr	r3, [pc, #76]	; (403070 <prvCheckForValidListAndQueue+0x74>)
  403022:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403024:	2200      	movs	r2, #0
  403026:	2110      	movs	r1, #16
  403028:	2005      	movs	r0, #5
  40302a:	4b12      	ldr	r3, [pc, #72]	; (403074 <prvCheckForValidListAndQueue+0x78>)
  40302c:	4798      	blx	r3
  40302e:	4b0a      	ldr	r3, [pc, #40]	; (403058 <prvCheckForValidListAndQueue+0x5c>)
  403030:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403032:	b118      	cbz	r0, 40303c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403034:	4910      	ldr	r1, [pc, #64]	; (403078 <prvCheckForValidListAndQueue+0x7c>)
  403036:	4b11      	ldr	r3, [pc, #68]	; (40307c <prvCheckForValidListAndQueue+0x80>)
  403038:	4798      	blx	r3
  40303a:	e7e5      	b.n	403008 <prvCheckForValidListAndQueue+0xc>
  40303c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403040:	b672      	cpsid	i
  403042:	f383 8811 	msr	BASEPRI, r3
  403046:	f3bf 8f6f 	isb	sy
  40304a:	f3bf 8f4f 	dsb	sy
  40304e:	b662      	cpsie	i
  403050:	e7fe      	b.n	403050 <prvCheckForValidListAndQueue+0x54>
  403052:	bf00      	nop
  403054:	004018b5 	.word	0x004018b5
  403058:	20400da8 	.word	0x20400da8
  40305c:	00401901 	.word	0x00401901
  403060:	20400d7c 	.word	0x20400d7c
  403064:	00401769 	.word	0x00401769
  403068:	20400d90 	.word	0x20400d90
  40306c:	20400d74 	.word	0x20400d74
  403070:	20400d78 	.word	0x20400d78
  403074:	00401dd5 	.word	0x00401dd5
  403078:	00406eb4 	.word	0x00406eb4
  40307c:	004023e5 	.word	0x004023e5

00403080 <xTimerCreateTimerTask>:
{
  403080:	b510      	push	{r4, lr}
  403082:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  403084:	4b0f      	ldr	r3, [pc, #60]	; (4030c4 <xTimerCreateTimerTask+0x44>)
  403086:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403088:	4b0f      	ldr	r3, [pc, #60]	; (4030c8 <xTimerCreateTimerTask+0x48>)
  40308a:	681b      	ldr	r3, [r3, #0]
  40308c:	b173      	cbz	r3, 4030ac <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40308e:	2300      	movs	r3, #0
  403090:	9303      	str	r3, [sp, #12]
  403092:	9302      	str	r3, [sp, #8]
  403094:	9301      	str	r3, [sp, #4]
  403096:	2204      	movs	r2, #4
  403098:	9200      	str	r2, [sp, #0]
  40309a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40309e:	490b      	ldr	r1, [pc, #44]	; (4030cc <xTimerCreateTimerTask+0x4c>)
  4030a0:	480b      	ldr	r0, [pc, #44]	; (4030d0 <xTimerCreateTimerTask+0x50>)
  4030a2:	4c0c      	ldr	r4, [pc, #48]	; (4030d4 <xTimerCreateTimerTask+0x54>)
  4030a4:	47a0      	blx	r4
	configASSERT( xReturn );
  4030a6:	b108      	cbz	r0, 4030ac <xTimerCreateTimerTask+0x2c>
}
  4030a8:	b004      	add	sp, #16
  4030aa:	bd10      	pop	{r4, pc}
  4030ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030b0:	b672      	cpsid	i
  4030b2:	f383 8811 	msr	BASEPRI, r3
  4030b6:	f3bf 8f6f 	isb	sy
  4030ba:	f3bf 8f4f 	dsb	sy
  4030be:	b662      	cpsie	i
  4030c0:	e7fe      	b.n	4030c0 <xTimerCreateTimerTask+0x40>
  4030c2:	bf00      	nop
  4030c4:	00402ffd 	.word	0x00402ffd
  4030c8:	20400da8 	.word	0x20400da8
  4030cc:	00406ebc 	.word	0x00406ebc
  4030d0:	00403201 	.word	0x00403201
  4030d4:	004024f5 	.word	0x004024f5

004030d8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4030d8:	b1d8      	cbz	r0, 403112 <xTimerGenericCommand+0x3a>
{
  4030da:	b530      	push	{r4, r5, lr}
  4030dc:	b085      	sub	sp, #20
  4030de:	4615      	mov	r5, r2
  4030e0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4030e2:	4a15      	ldr	r2, [pc, #84]	; (403138 <xTimerGenericCommand+0x60>)
  4030e4:	6810      	ldr	r0, [r2, #0]
  4030e6:	b320      	cbz	r0, 403132 <xTimerGenericCommand+0x5a>
  4030e8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4030ea:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4030ec:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4030ee:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4030f0:	2905      	cmp	r1, #5
  4030f2:	dc19      	bgt.n	403128 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4030f4:	4b11      	ldr	r3, [pc, #68]	; (40313c <xTimerGenericCommand+0x64>)
  4030f6:	4798      	blx	r3
  4030f8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4030fa:	f04f 0300 	mov.w	r3, #0
  4030fe:	bf0c      	ite	eq
  403100:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  403102:	461a      	movne	r2, r3
  403104:	4669      	mov	r1, sp
  403106:	480c      	ldr	r0, [pc, #48]	; (403138 <xTimerGenericCommand+0x60>)
  403108:	6800      	ldr	r0, [r0, #0]
  40310a:	4c0d      	ldr	r4, [pc, #52]	; (403140 <xTimerGenericCommand+0x68>)
  40310c:	47a0      	blx	r4
}
  40310e:	b005      	add	sp, #20
  403110:	bd30      	pop	{r4, r5, pc}
  403112:	f04f 0380 	mov.w	r3, #128	; 0x80
  403116:	b672      	cpsid	i
  403118:	f383 8811 	msr	BASEPRI, r3
  40311c:	f3bf 8f6f 	isb	sy
  403120:	f3bf 8f4f 	dsb	sy
  403124:	b662      	cpsie	i
  403126:	e7fe      	b.n	403126 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403128:	2300      	movs	r3, #0
  40312a:	4669      	mov	r1, sp
  40312c:	4c05      	ldr	r4, [pc, #20]	; (403144 <xTimerGenericCommand+0x6c>)
  40312e:	47a0      	blx	r4
  403130:	e7ed      	b.n	40310e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  403132:	2000      	movs	r0, #0
	return xReturn;
  403134:	e7eb      	b.n	40310e <xTimerGenericCommand+0x36>
  403136:	bf00      	nop
  403138:	20400da8 	.word	0x20400da8
  40313c:	00402e15 	.word	0x00402e15
  403140:	00401e51 	.word	0x00401e51
  403144:	00402035 	.word	0x00402035

00403148 <prvSampleTimeNow>:
{
  403148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40314c:	b082      	sub	sp, #8
  40314e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403150:	4b24      	ldr	r3, [pc, #144]	; (4031e4 <prvSampleTimeNow+0x9c>)
  403152:	4798      	blx	r3
  403154:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  403156:	4b24      	ldr	r3, [pc, #144]	; (4031e8 <prvSampleTimeNow+0xa0>)
  403158:	681b      	ldr	r3, [r3, #0]
  40315a:	4298      	cmp	r0, r3
  40315c:	d31b      	bcc.n	403196 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40315e:	2300      	movs	r3, #0
  403160:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403164:	4b20      	ldr	r3, [pc, #128]	; (4031e8 <prvSampleTimeNow+0xa0>)
  403166:	601f      	str	r7, [r3, #0]
}
  403168:	4638      	mov	r0, r7
  40316a:	b002      	add	sp, #8
  40316c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403170:	2100      	movs	r1, #0
  403172:	9100      	str	r1, [sp, #0]
  403174:	460b      	mov	r3, r1
  403176:	4652      	mov	r2, sl
  403178:	4620      	mov	r0, r4
  40317a:	4c1c      	ldr	r4, [pc, #112]	; (4031ec <prvSampleTimeNow+0xa4>)
  40317c:	47a0      	blx	r4
				configASSERT( xResult );
  40317e:	b960      	cbnz	r0, 40319a <prvSampleTimeNow+0x52>
  403180:	f04f 0380 	mov.w	r3, #128	; 0x80
  403184:	b672      	cpsid	i
  403186:	f383 8811 	msr	BASEPRI, r3
  40318a:	f3bf 8f6f 	isb	sy
  40318e:	f3bf 8f4f 	dsb	sy
  403192:	b662      	cpsie	i
  403194:	e7fe      	b.n	403194 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403196:	4d16      	ldr	r5, [pc, #88]	; (4031f0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403198:	4e16      	ldr	r6, [pc, #88]	; (4031f4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40319a:	682b      	ldr	r3, [r5, #0]
  40319c:	681a      	ldr	r2, [r3, #0]
  40319e:	b1c2      	cbz	r2, 4031d2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031a0:	68db      	ldr	r3, [r3, #12]
  4031a2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031a6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4031a8:	f104 0904 	add.w	r9, r4, #4
  4031ac:	4648      	mov	r0, r9
  4031ae:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4031b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4031b2:	4620      	mov	r0, r4
  4031b4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4031b6:	69e3      	ldr	r3, [r4, #28]
  4031b8:	2b01      	cmp	r3, #1
  4031ba:	d1ee      	bne.n	40319a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4031bc:	69a3      	ldr	r3, [r4, #24]
  4031be:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4031c0:	459a      	cmp	sl, r3
  4031c2:	d2d5      	bcs.n	403170 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4031c4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4031c6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4031c8:	4649      	mov	r1, r9
  4031ca:	6828      	ldr	r0, [r5, #0]
  4031cc:	4b0a      	ldr	r3, [pc, #40]	; (4031f8 <prvSampleTimeNow+0xb0>)
  4031ce:	4798      	blx	r3
  4031d0:	e7e3      	b.n	40319a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4031d2:	4a0a      	ldr	r2, [pc, #40]	; (4031fc <prvSampleTimeNow+0xb4>)
  4031d4:	6810      	ldr	r0, [r2, #0]
  4031d6:	4906      	ldr	r1, [pc, #24]	; (4031f0 <prvSampleTimeNow+0xa8>)
  4031d8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4031da:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4031dc:	2301      	movs	r3, #1
  4031de:	f8c8 3000 	str.w	r3, [r8]
  4031e2:	e7bf      	b.n	403164 <prvSampleTimeNow+0x1c>
  4031e4:	004027c9 	.word	0x004027c9
  4031e8:	20400da4 	.word	0x20400da4
  4031ec:	004030d9 	.word	0x004030d9
  4031f0:	20400d74 	.word	0x20400d74
  4031f4:	004017d1 	.word	0x004017d1
  4031f8:	0040179d 	.word	0x0040179d
  4031fc:	20400d78 	.word	0x20400d78

00403200 <prvTimerTask>:
{
  403200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403204:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403206:	4e75      	ldr	r6, [pc, #468]	; (4033dc <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403208:	4f75      	ldr	r7, [pc, #468]	; (4033e0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  40320a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403408 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40320e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40340c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403212:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  403214:	681a      	ldr	r2, [r3, #0]
  403216:	2a00      	cmp	r2, #0
  403218:	f000 80ce 	beq.w	4033b8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40321c:	68db      	ldr	r3, [r3, #12]
  40321e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403220:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403222:	a804      	add	r0, sp, #16
  403224:	4b6f      	ldr	r3, [pc, #444]	; (4033e4 <prvTimerTask+0x1e4>)
  403226:	4798      	blx	r3
  403228:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40322a:	9b04      	ldr	r3, [sp, #16]
  40322c:	2b00      	cmp	r3, #0
  40322e:	d144      	bne.n	4032ba <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403230:	42a0      	cmp	r0, r4
  403232:	d212      	bcs.n	40325a <prvTimerTask+0x5a>
  403234:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403236:	1b61      	subs	r1, r4, r5
  403238:	4b6b      	ldr	r3, [pc, #428]	; (4033e8 <prvTimerTask+0x1e8>)
  40323a:	6818      	ldr	r0, [r3, #0]
  40323c:	4b6b      	ldr	r3, [pc, #428]	; (4033ec <prvTimerTask+0x1ec>)
  40323e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403240:	4b6b      	ldr	r3, [pc, #428]	; (4033f0 <prvTimerTask+0x1f0>)
  403242:	4798      	blx	r3
  403244:	2800      	cmp	r0, #0
  403246:	d13a      	bne.n	4032be <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40324c:	f8c9 3000 	str.w	r3, [r9]
  403250:	f3bf 8f4f 	dsb	sy
  403254:	f3bf 8f6f 	isb	sy
  403258:	e031      	b.n	4032be <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40325a:	4b65      	ldr	r3, [pc, #404]	; (4033f0 <prvTimerTask+0x1f0>)
  40325c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40325e:	6833      	ldr	r3, [r6, #0]
  403260:	68db      	ldr	r3, [r3, #12]
  403262:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403266:	f10a 0004 	add.w	r0, sl, #4
  40326a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40326c:	f8da 301c 	ldr.w	r3, [sl, #28]
  403270:	2b01      	cmp	r3, #1
  403272:	d004      	beq.n	40327e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403274:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403278:	4650      	mov	r0, sl
  40327a:	4798      	blx	r3
  40327c:	e01f      	b.n	4032be <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40327e:	f8da 1018 	ldr.w	r1, [sl, #24]
  403282:	4623      	mov	r3, r4
  403284:	462a      	mov	r2, r5
  403286:	4421      	add	r1, r4
  403288:	4650      	mov	r0, sl
  40328a:	4d5a      	ldr	r5, [pc, #360]	; (4033f4 <prvTimerTask+0x1f4>)
  40328c:	47a8      	blx	r5
  40328e:	2801      	cmp	r0, #1
  403290:	d1f0      	bne.n	403274 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403292:	2100      	movs	r1, #0
  403294:	9100      	str	r1, [sp, #0]
  403296:	460b      	mov	r3, r1
  403298:	4622      	mov	r2, r4
  40329a:	4650      	mov	r0, sl
  40329c:	4c56      	ldr	r4, [pc, #344]	; (4033f8 <prvTimerTask+0x1f8>)
  40329e:	47a0      	blx	r4
			configASSERT( xResult );
  4032a0:	2800      	cmp	r0, #0
  4032a2:	d1e7      	bne.n	403274 <prvTimerTask+0x74>
  4032a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032a8:	b672      	cpsid	i
  4032aa:	f383 8811 	msr	BASEPRI, r3
  4032ae:	f3bf 8f6f 	isb	sy
  4032b2:	f3bf 8f4f 	dsb	sy
  4032b6:	b662      	cpsie	i
  4032b8:	e7fe      	b.n	4032b8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4032ba:	4b4d      	ldr	r3, [pc, #308]	; (4033f0 <prvTimerTask+0x1f0>)
  4032bc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4032be:	4d4a      	ldr	r5, [pc, #296]	; (4033e8 <prvTimerTask+0x1e8>)
  4032c0:	4c4e      	ldr	r4, [pc, #312]	; (4033fc <prvTimerTask+0x1fc>)
  4032c2:	e006      	b.n	4032d2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4032c4:	9907      	ldr	r1, [sp, #28]
  4032c6:	9806      	ldr	r0, [sp, #24]
  4032c8:	9b05      	ldr	r3, [sp, #20]
  4032ca:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4032cc:	9b04      	ldr	r3, [sp, #16]
  4032ce:	2b00      	cmp	r3, #0
  4032d0:	da09      	bge.n	4032e6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4032d2:	2300      	movs	r3, #0
  4032d4:	461a      	mov	r2, r3
  4032d6:	a904      	add	r1, sp, #16
  4032d8:	6828      	ldr	r0, [r5, #0]
  4032da:	47a0      	blx	r4
  4032dc:	2800      	cmp	r0, #0
  4032de:	d098      	beq.n	403212 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4032e0:	9b04      	ldr	r3, [sp, #16]
  4032e2:	2b00      	cmp	r3, #0
  4032e4:	dbee      	blt.n	4032c4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4032e6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4032ea:	f8da 3014 	ldr.w	r3, [sl, #20]
  4032ee:	b113      	cbz	r3, 4032f6 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4032f0:	f10a 0004 	add.w	r0, sl, #4
  4032f4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4032f6:	a803      	add	r0, sp, #12
  4032f8:	4b3a      	ldr	r3, [pc, #232]	; (4033e4 <prvTimerTask+0x1e4>)
  4032fa:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4032fc:	9b04      	ldr	r3, [sp, #16]
  4032fe:	2b09      	cmp	r3, #9
  403300:	d8e7      	bhi.n	4032d2 <prvTimerTask+0xd2>
  403302:	a201      	add	r2, pc, #4	; (adr r2, 403308 <prvTimerTask+0x108>)
  403304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403308:	00403331 	.word	0x00403331
  40330c:	00403331 	.word	0x00403331
  403310:	00403331 	.word	0x00403331
  403314:	004032d3 	.word	0x004032d3
  403318:	00403385 	.word	0x00403385
  40331c:	004033b1 	.word	0x004033b1
  403320:	00403331 	.word	0x00403331
  403324:	00403331 	.word	0x00403331
  403328:	004032d3 	.word	0x004032d3
  40332c:	00403385 	.word	0x00403385
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403330:	9c05      	ldr	r4, [sp, #20]
  403332:	f8da 1018 	ldr.w	r1, [sl, #24]
  403336:	4623      	mov	r3, r4
  403338:	4602      	mov	r2, r0
  40333a:	4421      	add	r1, r4
  40333c:	4650      	mov	r0, sl
  40333e:	4c2d      	ldr	r4, [pc, #180]	; (4033f4 <prvTimerTask+0x1f4>)
  403340:	47a0      	blx	r4
  403342:	2801      	cmp	r0, #1
  403344:	d1bc      	bne.n	4032c0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403346:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40334a:	4650      	mov	r0, sl
  40334c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40334e:	f8da 301c 	ldr.w	r3, [sl, #28]
  403352:	2b01      	cmp	r3, #1
  403354:	d1b4      	bne.n	4032c0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403356:	f8da 2018 	ldr.w	r2, [sl, #24]
  40335a:	2100      	movs	r1, #0
  40335c:	9100      	str	r1, [sp, #0]
  40335e:	460b      	mov	r3, r1
  403360:	9805      	ldr	r0, [sp, #20]
  403362:	4402      	add	r2, r0
  403364:	4650      	mov	r0, sl
  403366:	4c24      	ldr	r4, [pc, #144]	; (4033f8 <prvTimerTask+0x1f8>)
  403368:	47a0      	blx	r4
							configASSERT( xResult );
  40336a:	2800      	cmp	r0, #0
  40336c:	d1a8      	bne.n	4032c0 <prvTimerTask+0xc0>
  40336e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403372:	b672      	cpsid	i
  403374:	f383 8811 	msr	BASEPRI, r3
  403378:	f3bf 8f6f 	isb	sy
  40337c:	f3bf 8f4f 	dsb	sy
  403380:	b662      	cpsie	i
  403382:	e7fe      	b.n	403382 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403384:	9905      	ldr	r1, [sp, #20]
  403386:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40338a:	b131      	cbz	r1, 40339a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40338c:	4603      	mov	r3, r0
  40338e:	4602      	mov	r2, r0
  403390:	4401      	add	r1, r0
  403392:	4650      	mov	r0, sl
  403394:	4c17      	ldr	r4, [pc, #92]	; (4033f4 <prvTimerTask+0x1f4>)
  403396:	47a0      	blx	r4
  403398:	e792      	b.n	4032c0 <prvTimerTask+0xc0>
  40339a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40339e:	b672      	cpsid	i
  4033a0:	f383 8811 	msr	BASEPRI, r3
  4033a4:	f3bf 8f6f 	isb	sy
  4033a8:	f3bf 8f4f 	dsb	sy
  4033ac:	b662      	cpsie	i
  4033ae:	e7fe      	b.n	4033ae <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4033b0:	4650      	mov	r0, sl
  4033b2:	4b13      	ldr	r3, [pc, #76]	; (403400 <prvTimerTask+0x200>)
  4033b4:	4798      	blx	r3
  4033b6:	e783      	b.n	4032c0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4033b8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4033ba:	a804      	add	r0, sp, #16
  4033bc:	4b09      	ldr	r3, [pc, #36]	; (4033e4 <prvTimerTask+0x1e4>)
  4033be:	4798      	blx	r3
  4033c0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4033c2:	9b04      	ldr	r3, [sp, #16]
  4033c4:	2b00      	cmp	r3, #0
  4033c6:	f47f af78 	bne.w	4032ba <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4033ca:	4b0e      	ldr	r3, [pc, #56]	; (403404 <prvTimerTask+0x204>)
  4033cc:	681b      	ldr	r3, [r3, #0]
  4033ce:	681a      	ldr	r2, [r3, #0]
  4033d0:	fab2 f282 	clz	r2, r2
  4033d4:	0952      	lsrs	r2, r2, #5
  4033d6:	2400      	movs	r4, #0
  4033d8:	e72d      	b.n	403236 <prvTimerTask+0x36>
  4033da:	bf00      	nop
  4033dc:	20400d74 	.word	0x20400d74
  4033e0:	004027b9 	.word	0x004027b9
  4033e4:	00403149 	.word	0x00403149
  4033e8:	20400da8 	.word	0x20400da8
  4033ec:	00402419 	.word	0x00402419
  4033f0:	00402921 	.word	0x00402921
  4033f4:	00402fb1 	.word	0x00402fb1
  4033f8:	004030d9 	.word	0x004030d9
  4033fc:	00402215 	.word	0x00402215
  403400:	00401b41 	.word	0x00401b41
  403404:	20400d78 	.word	0x20400d78
  403408:	e000ed04 	.word	0xe000ed04
  40340c:	004017d1 	.word	0x004017d1

00403410 <task_oled>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_oled(void *pvParameters) {
  403410:	b508      	push	{r3, lr}
  gfx_mono_ssd1306_init();
  403412:	4b07      	ldr	r3, [pc, #28]	; (403430 <task_oled+0x20>)
  403414:	4798      	blx	r3
  gfx_mono_draw_string("Exemplo RTOS", 0, 0, &sysfont);
  403416:	4d07      	ldr	r5, [pc, #28]	; (403434 <task_oled+0x24>)
  403418:	462b      	mov	r3, r5
  40341a:	2200      	movs	r2, #0
  40341c:	4611      	mov	r1, r2
  40341e:	4806      	ldr	r0, [pc, #24]	; (403438 <task_oled+0x28>)
  403420:	4c06      	ldr	r4, [pc, #24]	; (40343c <task_oled+0x2c>)
  403422:	47a0      	blx	r4
  gfx_mono_draw_string("oii", 0, 20, &sysfont);
  403424:	462b      	mov	r3, r5
  403426:	2214      	movs	r2, #20
  403428:	2100      	movs	r1, #0
  40342a:	4805      	ldr	r0, [pc, #20]	; (403440 <task_oled+0x30>)
  40342c:	47a0      	blx	r4
  40342e:	e7fe      	b.n	40342e <task_oled+0x1e>
  403430:	00400a09 	.word	0x00400a09
  403434:	2040000c 	.word	0x2040000c
  403438:	00406f88 	.word	0x00406f88
  40343c:	00400971 	.word	0x00400971
  403440:	00406f98 	.word	0x00406f98

00403444 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403444:	b5f0      	push	{r4, r5, r6, r7, lr}
  403446:	b083      	sub	sp, #12
  403448:	4605      	mov	r5, r0
  40344a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40344c:	2300      	movs	r3, #0
  40344e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403450:	4b2a      	ldr	r3, [pc, #168]	; (4034fc <usart_serial_getchar+0xb8>)
  403452:	4298      	cmp	r0, r3
  403454:	d013      	beq.n	40347e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403456:	4b2a      	ldr	r3, [pc, #168]	; (403500 <usart_serial_getchar+0xbc>)
  403458:	4298      	cmp	r0, r3
  40345a:	d018      	beq.n	40348e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40345c:	4b29      	ldr	r3, [pc, #164]	; (403504 <usart_serial_getchar+0xc0>)
  40345e:	4298      	cmp	r0, r3
  403460:	d01d      	beq.n	40349e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403462:	4b29      	ldr	r3, [pc, #164]	; (403508 <usart_serial_getchar+0xc4>)
  403464:	429d      	cmp	r5, r3
  403466:	d022      	beq.n	4034ae <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403468:	4b28      	ldr	r3, [pc, #160]	; (40350c <usart_serial_getchar+0xc8>)
  40346a:	429d      	cmp	r5, r3
  40346c:	d027      	beq.n	4034be <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40346e:	4b28      	ldr	r3, [pc, #160]	; (403510 <usart_serial_getchar+0xcc>)
  403470:	429d      	cmp	r5, r3
  403472:	d02e      	beq.n	4034d2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403474:	4b27      	ldr	r3, [pc, #156]	; (403514 <usart_serial_getchar+0xd0>)
  403476:	429d      	cmp	r5, r3
  403478:	d035      	beq.n	4034e6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40347a:	b003      	add	sp, #12
  40347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40347e:	461f      	mov	r7, r3
  403480:	4e25      	ldr	r6, [pc, #148]	; (403518 <usart_serial_getchar+0xd4>)
  403482:	4621      	mov	r1, r4
  403484:	4638      	mov	r0, r7
  403486:	47b0      	blx	r6
  403488:	2800      	cmp	r0, #0
  40348a:	d1fa      	bne.n	403482 <usart_serial_getchar+0x3e>
  40348c:	e7e9      	b.n	403462 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40348e:	461f      	mov	r7, r3
  403490:	4e21      	ldr	r6, [pc, #132]	; (403518 <usart_serial_getchar+0xd4>)
  403492:	4621      	mov	r1, r4
  403494:	4638      	mov	r0, r7
  403496:	47b0      	blx	r6
  403498:	2800      	cmp	r0, #0
  40349a:	d1fa      	bne.n	403492 <usart_serial_getchar+0x4e>
  40349c:	e7e4      	b.n	403468 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40349e:	461f      	mov	r7, r3
  4034a0:	4e1d      	ldr	r6, [pc, #116]	; (403518 <usart_serial_getchar+0xd4>)
  4034a2:	4621      	mov	r1, r4
  4034a4:	4638      	mov	r0, r7
  4034a6:	47b0      	blx	r6
  4034a8:	2800      	cmp	r0, #0
  4034aa:	d1fa      	bne.n	4034a2 <usart_serial_getchar+0x5e>
  4034ac:	e7df      	b.n	40346e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4034ae:	461f      	mov	r7, r3
  4034b0:	4e19      	ldr	r6, [pc, #100]	; (403518 <usart_serial_getchar+0xd4>)
  4034b2:	4621      	mov	r1, r4
  4034b4:	4638      	mov	r0, r7
  4034b6:	47b0      	blx	r6
  4034b8:	2800      	cmp	r0, #0
  4034ba:	d1fa      	bne.n	4034b2 <usart_serial_getchar+0x6e>
  4034bc:	e7da      	b.n	403474 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4034be:	461e      	mov	r6, r3
  4034c0:	4d16      	ldr	r5, [pc, #88]	; (40351c <usart_serial_getchar+0xd8>)
  4034c2:	a901      	add	r1, sp, #4
  4034c4:	4630      	mov	r0, r6
  4034c6:	47a8      	blx	r5
  4034c8:	2800      	cmp	r0, #0
  4034ca:	d1fa      	bne.n	4034c2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4034cc:	9b01      	ldr	r3, [sp, #4]
  4034ce:	7023      	strb	r3, [r4, #0]
  4034d0:	e7d3      	b.n	40347a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034d2:	461e      	mov	r6, r3
  4034d4:	4d11      	ldr	r5, [pc, #68]	; (40351c <usart_serial_getchar+0xd8>)
  4034d6:	a901      	add	r1, sp, #4
  4034d8:	4630      	mov	r0, r6
  4034da:	47a8      	blx	r5
  4034dc:	2800      	cmp	r0, #0
  4034de:	d1fa      	bne.n	4034d6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4034e0:	9b01      	ldr	r3, [sp, #4]
  4034e2:	7023      	strb	r3, [r4, #0]
  4034e4:	e7c9      	b.n	40347a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034e6:	461e      	mov	r6, r3
  4034e8:	4d0c      	ldr	r5, [pc, #48]	; (40351c <usart_serial_getchar+0xd8>)
  4034ea:	a901      	add	r1, sp, #4
  4034ec:	4630      	mov	r0, r6
  4034ee:	47a8      	blx	r5
  4034f0:	2800      	cmp	r0, #0
  4034f2:	d1fa      	bne.n	4034ea <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4034f4:	9b01      	ldr	r3, [sp, #4]
  4034f6:	7023      	strb	r3, [r4, #0]
}
  4034f8:	e7bf      	b.n	40347a <usart_serial_getchar+0x36>
  4034fa:	bf00      	nop
  4034fc:	400e0800 	.word	0x400e0800
  403500:	400e0a00 	.word	0x400e0a00
  403504:	400e1a00 	.word	0x400e1a00
  403508:	400e1c00 	.word	0x400e1c00
  40350c:	40024000 	.word	0x40024000
  403510:	40028000 	.word	0x40028000
  403514:	4002c000 	.word	0x4002c000
  403518:	00401393 	.word	0x00401393
  40351c:	0040149f 	.word	0x0040149f

00403520 <usart_serial_putchar>:
{
  403520:	b570      	push	{r4, r5, r6, lr}
  403522:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403524:	4b2a      	ldr	r3, [pc, #168]	; (4035d0 <usart_serial_putchar+0xb0>)
  403526:	4298      	cmp	r0, r3
  403528:	d013      	beq.n	403552 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40352a:	4b2a      	ldr	r3, [pc, #168]	; (4035d4 <usart_serial_putchar+0xb4>)
  40352c:	4298      	cmp	r0, r3
  40352e:	d019      	beq.n	403564 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403530:	4b29      	ldr	r3, [pc, #164]	; (4035d8 <usart_serial_putchar+0xb8>)
  403532:	4298      	cmp	r0, r3
  403534:	d01f      	beq.n	403576 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403536:	4b29      	ldr	r3, [pc, #164]	; (4035dc <usart_serial_putchar+0xbc>)
  403538:	4298      	cmp	r0, r3
  40353a:	d025      	beq.n	403588 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40353c:	4b28      	ldr	r3, [pc, #160]	; (4035e0 <usart_serial_putchar+0xc0>)
  40353e:	4298      	cmp	r0, r3
  403540:	d02b      	beq.n	40359a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403542:	4b28      	ldr	r3, [pc, #160]	; (4035e4 <usart_serial_putchar+0xc4>)
  403544:	4298      	cmp	r0, r3
  403546:	d031      	beq.n	4035ac <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403548:	4b27      	ldr	r3, [pc, #156]	; (4035e8 <usart_serial_putchar+0xc8>)
  40354a:	4298      	cmp	r0, r3
  40354c:	d037      	beq.n	4035be <usart_serial_putchar+0x9e>
	return 0;
  40354e:	2000      	movs	r0, #0
}
  403550:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403552:	461e      	mov	r6, r3
  403554:	4d25      	ldr	r5, [pc, #148]	; (4035ec <usart_serial_putchar+0xcc>)
  403556:	4621      	mov	r1, r4
  403558:	4630      	mov	r0, r6
  40355a:	47a8      	blx	r5
  40355c:	2800      	cmp	r0, #0
  40355e:	d1fa      	bne.n	403556 <usart_serial_putchar+0x36>
		return 1;
  403560:	2001      	movs	r0, #1
  403562:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403564:	461e      	mov	r6, r3
  403566:	4d21      	ldr	r5, [pc, #132]	; (4035ec <usart_serial_putchar+0xcc>)
  403568:	4621      	mov	r1, r4
  40356a:	4630      	mov	r0, r6
  40356c:	47a8      	blx	r5
  40356e:	2800      	cmp	r0, #0
  403570:	d1fa      	bne.n	403568 <usart_serial_putchar+0x48>
		return 1;
  403572:	2001      	movs	r0, #1
  403574:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403576:	461e      	mov	r6, r3
  403578:	4d1c      	ldr	r5, [pc, #112]	; (4035ec <usart_serial_putchar+0xcc>)
  40357a:	4621      	mov	r1, r4
  40357c:	4630      	mov	r0, r6
  40357e:	47a8      	blx	r5
  403580:	2800      	cmp	r0, #0
  403582:	d1fa      	bne.n	40357a <usart_serial_putchar+0x5a>
		return 1;
  403584:	2001      	movs	r0, #1
  403586:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403588:	461e      	mov	r6, r3
  40358a:	4d18      	ldr	r5, [pc, #96]	; (4035ec <usart_serial_putchar+0xcc>)
  40358c:	4621      	mov	r1, r4
  40358e:	4630      	mov	r0, r6
  403590:	47a8      	blx	r5
  403592:	2800      	cmp	r0, #0
  403594:	d1fa      	bne.n	40358c <usart_serial_putchar+0x6c>
		return 1;
  403596:	2001      	movs	r0, #1
  403598:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40359a:	461e      	mov	r6, r3
  40359c:	4d14      	ldr	r5, [pc, #80]	; (4035f0 <usart_serial_putchar+0xd0>)
  40359e:	4621      	mov	r1, r4
  4035a0:	4630      	mov	r0, r6
  4035a2:	47a8      	blx	r5
  4035a4:	2800      	cmp	r0, #0
  4035a6:	d1fa      	bne.n	40359e <usart_serial_putchar+0x7e>
		return 1;
  4035a8:	2001      	movs	r0, #1
  4035aa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4035ac:	461e      	mov	r6, r3
  4035ae:	4d10      	ldr	r5, [pc, #64]	; (4035f0 <usart_serial_putchar+0xd0>)
  4035b0:	4621      	mov	r1, r4
  4035b2:	4630      	mov	r0, r6
  4035b4:	47a8      	blx	r5
  4035b6:	2800      	cmp	r0, #0
  4035b8:	d1fa      	bne.n	4035b0 <usart_serial_putchar+0x90>
		return 1;
  4035ba:	2001      	movs	r0, #1
  4035bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4035be:	461e      	mov	r6, r3
  4035c0:	4d0b      	ldr	r5, [pc, #44]	; (4035f0 <usart_serial_putchar+0xd0>)
  4035c2:	4621      	mov	r1, r4
  4035c4:	4630      	mov	r0, r6
  4035c6:	47a8      	blx	r5
  4035c8:	2800      	cmp	r0, #0
  4035ca:	d1fa      	bne.n	4035c2 <usart_serial_putchar+0xa2>
		return 1;
  4035cc:	2001      	movs	r0, #1
  4035ce:	bd70      	pop	{r4, r5, r6, pc}
  4035d0:	400e0800 	.word	0x400e0800
  4035d4:	400e0a00 	.word	0x400e0a00
  4035d8:	400e1a00 	.word	0x400e1a00
  4035dc:	400e1c00 	.word	0x400e1c00
  4035e0:	40024000 	.word	0x40024000
  4035e4:	40028000 	.word	0x40028000
  4035e8:	4002c000 	.word	0x4002c000
  4035ec:	00401381 	.word	0x00401381
  4035f0:	00401489 	.word	0x00401489

004035f4 <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  4035f4:	b508      	push	{r3, lr}
  printf("stack overflow \n");
  4035f6:	4802      	ldr	r0, [pc, #8]	; (403600 <vApplicationStackOverflowHook+0xc>)
  4035f8:	4b02      	ldr	r3, [pc, #8]	; (403604 <vApplicationStackOverflowHook+0x10>)
  4035fa:	4798      	blx	r3
  4035fc:	e7fe      	b.n	4035fc <vApplicationStackOverflowHook+0x8>
  4035fe:	bf00      	nop
  403600:	00406f9c 	.word	0x00406f9c
  403604:	00403cb1 	.word	0x00403cb1

00403608 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  403608:	4770      	bx	lr

0040360a <vApplicationMallocFailedHook>:
  40360a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40360e:	b672      	cpsid	i
  403610:	f383 8811 	msr	BASEPRI, r3
  403614:	f3bf 8f6f 	isb	sy
  403618:	f3bf 8f4f 	dsb	sy
  40361c:	b662      	cpsie	i
  40361e:	e7fe      	b.n	40361e <vApplicationMallocFailedHook+0x14>

00403620 <led_toggle>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void led_toggle(Pio *pio, uint32_t mask) {
  403620:	b538      	push	{r3, r4, r5, lr}
  403622:	4604      	mov	r4, r0
  403624:	460d      	mov	r5, r1
  if(pio_get_output_data_status(pio, mask)){
  403626:	4b06      	ldr	r3, [pc, #24]	; (403640 <led_toggle+0x20>)
  403628:	4798      	blx	r3
  40362a:	b920      	cbnz	r0, 403636 <led_toggle+0x16>
    pio_clear(pio, mask);
  } else {
    pio_set(pio, mask);
  40362c:	4629      	mov	r1, r5
  40362e:	4620      	mov	r0, r4
  403630:	4b04      	ldr	r3, [pc, #16]	; (403644 <led_toggle+0x24>)
  403632:	4798      	blx	r3
  403634:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  403636:	4629      	mov	r1, r5
  403638:	4620      	mov	r0, r4
  40363a:	4b03      	ldr	r3, [pc, #12]	; (403648 <led_toggle+0x28>)
  40363c:	4798      	blx	r3
  40363e:	bd38      	pop	{r3, r4, r5, pc}
  403640:	00401145 	.word	0x00401145
  403644:	00400fbd 	.word	0x00400fbd
  403648:	00400fc1 	.word	0x00400fc1

0040364c <TC_init>:
  /* configura prioridae */
  NVIC_EnableIRQ(BUT1_PIO_ID);
  NVIC_SetPriority(BUT1_PIO_ID, 4);
}

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  40364c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403650:	b085      	sub	sp, #20
  403652:	4606      	mov	r6, r0
  403654:	460c      	mov	r4, r1
  403656:	4617      	mov	r7, r2
  403658:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configura o PMC */
	pmc_enable_periph_clk(ID_TC);
  40365a:	4608      	mov	r0, r1
  40365c:	4b1c      	ldr	r3, [pc, #112]	; (4036d0 <TC_init+0x84>)
  40365e:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403660:	4d1c      	ldr	r5, [pc, #112]	; (4036d4 <TC_init+0x88>)
  403662:	9500      	str	r5, [sp, #0]
  403664:	ab02      	add	r3, sp, #8
  403666:	aa03      	add	r2, sp, #12
  403668:	4629      	mov	r1, r5
  40366a:	4640      	mov	r0, r8
  40366c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4036f0 <TC_init+0xa4>
  403670:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  403672:	9a02      	ldr	r2, [sp, #8]
  403674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403678:	4639      	mov	r1, r7
  40367a:	4630      	mov	r0, r6
  40367c:	4b16      	ldr	r3, [pc, #88]	; (4036d8 <TC_init+0x8c>)
  40367e:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  403680:	9a03      	ldr	r2, [sp, #12]
  403682:	fbb5 f2f2 	udiv	r2, r5, r2
  403686:	fbb2 f2f8 	udiv	r2, r2, r8
  40368a:	4639      	mov	r1, r7
  40368c:	4630      	mov	r0, r6
  40368e:	4b13      	ldr	r3, [pc, #76]	; (4036dc <TC_init+0x90>)
  403690:	4798      	blx	r3

	/* Configura NVIC*/
  NVIC_SetPriority(ID_TC, 4);
  403692:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  403694:	2b00      	cmp	r3, #0
  403696:	db13      	blt.n	4036c0 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403698:	4a11      	ldr	r2, [pc, #68]	; (4036e0 <TC_init+0x94>)
  40369a:	2180      	movs	r1, #128	; 0x80
  40369c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40369e:	095b      	lsrs	r3, r3, #5
  4036a0:	f004 041f 	and.w	r4, r4, #31
  4036a4:	2201      	movs	r2, #1
  4036a6:	fa02 f404 	lsl.w	r4, r2, r4
  4036aa:	4a0e      	ldr	r2, [pc, #56]	; (4036e4 <TC_init+0x98>)
  4036ac:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4036b0:	2210      	movs	r2, #16
  4036b2:	4639      	mov	r1, r7
  4036b4:	4630      	mov	r0, r6
  4036b6:	4b0c      	ldr	r3, [pc, #48]	; (4036e8 <TC_init+0x9c>)
  4036b8:	4798      	blx	r3
}
  4036ba:	b005      	add	sp, #20
  4036bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4036c0:	f004 010f 	and.w	r1, r4, #15
  4036c4:	4a09      	ldr	r2, [pc, #36]	; (4036ec <TC_init+0xa0>)
  4036c6:	440a      	add	r2, r1
  4036c8:	2180      	movs	r1, #128	; 0x80
  4036ca:	7611      	strb	r1, [r2, #24]
  4036cc:	e7e7      	b.n	40369e <TC_init+0x52>
  4036ce:	bf00      	nop
  4036d0:	0040132d 	.word	0x0040132d
  4036d4:	11e1a300 	.word	0x11e1a300
  4036d8:	004006e7 	.word	0x004006e7
  4036dc:	00400709 	.word	0x00400709
  4036e0:	e000e400 	.word	0xe000e400
  4036e4:	e000e100 	.word	0xe000e100
  4036e8:	00400711 	.word	0x00400711
  4036ec:	e000ecfc 	.word	0xe000ecfc
  4036f0:	00400721 	.word	0x00400721

004036f4 <TC1_Handler>:

void TC1_Handler(void) {
  4036f4:	b500      	push	{lr}
  4036f6:	b083      	sub	sp, #12
	/**
	* Devemos indicar ao TC que a interrupção foi satisfeita.
	* Isso é realizado pela leitura do status do periférico
	**/
	volatile uint32_t status = tc_get_status(TC0, 1);
  4036f8:	2101      	movs	r1, #1
  4036fa:	4805      	ldr	r0, [pc, #20]	; (403710 <TC1_Handler+0x1c>)
  4036fc:	4b05      	ldr	r3, [pc, #20]	; (403714 <TC1_Handler+0x20>)
  4036fe:	4798      	blx	r3
  403700:	9001      	str	r0, [sp, #4]

	/** Muda o estado do LED (pisca) **/
	led_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  403702:	2101      	movs	r1, #1
  403704:	4804      	ldr	r0, [pc, #16]	; (403718 <TC1_Handler+0x24>)
  403706:	4b05      	ldr	r3, [pc, #20]	; (40371c <TC1_Handler+0x28>)
  403708:	4798      	blx	r3
}
  40370a:	b003      	add	sp, #12
  40370c:	f85d fb04 	ldr.w	pc, [sp], #4
  403710:	4000c000 	.word	0x4000c000
  403714:	00400719 	.word	0x00400719
  403718:	400e0e00 	.word	0x400e0e00
  40371c:	00403621 	.word	0x00403621

00403720 <LED_init>:

void LED_init(int estado) {
  403720:	b510      	push	{r4, lr}
  403722:	b082      	sub	sp, #8
  403724:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  403726:	200a      	movs	r0, #10
  403728:	4b05      	ldr	r3, [pc, #20]	; (403740 <LED_init+0x20>)
  40372a:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0);
  40372c:	2300      	movs	r3, #0
  40372e:	9300      	str	r3, [sp, #0]
  403730:	4622      	mov	r2, r4
  403732:	2101      	movs	r1, #1
  403734:	4803      	ldr	r0, [pc, #12]	; (403744 <LED_init+0x24>)
  403736:	4c04      	ldr	r4, [pc, #16]	; (403748 <LED_init+0x28>)
  403738:	47a0      	blx	r4
};
  40373a:	b002      	add	sp, #8
  40373c:	bd10      	pop	{r4, pc}
  40373e:	bf00      	nop
  403740:	0040132d 	.word	0x0040132d
  403744:	400e0e00 	.word	0x400e0e00
  403748:	0040108d 	.word	0x0040108d

0040374c <task_tc>:
static void task_tc(void *pvParameters) {
  40374c:	b508      	push	{r3, lr}
  LED_init(0);
  40374e:	2000      	movs	r0, #0
  403750:	4b06      	ldr	r3, [pc, #24]	; (40376c <task_tc+0x20>)
  403752:	4798      	blx	r3
  TC_init(TC0, ID_TC1, 1, 4);
  403754:	4c06      	ldr	r4, [pc, #24]	; (403770 <task_tc+0x24>)
  403756:	2304      	movs	r3, #4
  403758:	2201      	movs	r2, #1
  40375a:	2118      	movs	r1, #24
  40375c:	4620      	mov	r0, r4
  40375e:	4d05      	ldr	r5, [pc, #20]	; (403774 <task_tc+0x28>)
  403760:	47a8      	blx	r5
  tc_start(TC0, 1);
  403762:	2101      	movs	r1, #1
  403764:	4620      	mov	r0, r4
  403766:	4b04      	ldr	r3, [pc, #16]	; (403778 <task_tc+0x2c>)
  403768:	4798      	blx	r3
  40376a:	e7fe      	b.n	40376a <task_tc+0x1e>
  40376c:	00403721 	.word	0x00403721
  403770:	4000c000 	.word	0x4000c000
  403774:	0040364d 	.word	0x0040364d
  403778:	00400701 	.word	0x00400701

0040377c <LED2_init>:

void LED2_init(int estado) {
  40377c:	b510      	push	{r4, lr}
  40377e:	b082      	sub	sp, #8
  403780:	4604      	mov	r4, r0
  pmc_enable_periph_clk(LED2_PIO_ID);
  403782:	200c      	movs	r0, #12
  403784:	4b05      	ldr	r3, [pc, #20]	; (40379c <LED2_init+0x20>)
  403786:	4798      	blx	r3
  pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, estado, 0, 0);
  403788:	2300      	movs	r3, #0
  40378a:	9300      	str	r3, [sp, #0]
  40378c:	4622      	mov	r2, r4
  40378e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403792:	4803      	ldr	r0, [pc, #12]	; (4037a0 <LED2_init+0x24>)
  403794:	4c03      	ldr	r4, [pc, #12]	; (4037a4 <LED2_init+0x28>)
  403796:	47a0      	blx	r4
};
  403798:	b002      	add	sp, #8
  40379a:	bd10      	pop	{r4, pc}
  40379c:	0040132d 	.word	0x0040132d
  4037a0:	400e1200 	.word	0x400e1200
  4037a4:	0040108d 	.word	0x0040108d

004037a8 <task_rtt>:
static void task_rtt (void *pvParameters) {
  4037a8:	b580      	push	{r7, lr}
  LED2_init(0);
  4037aa:	2000      	movs	r0, #0
  4037ac:	4b1e      	ldr	r3, [pc, #120]	; (403828 <task_rtt+0x80>)
  4037ae:	4798      	blx	r3

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {

  uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

  rtt_sel_source(RTT, false);
  4037b0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403850 <task_rtt+0xa8>
  rtt_init(RTT, pllPreScale);

  if (rttIRQSource & RTT_MR_ALMIEN) {
    uint32_t ul_previous_time;
    ul_previous_time = rtt_read_timer_value(RTT);
  4037b4:	4f1d      	ldr	r7, [pc, #116]	; (40382c <task_rtt+0x84>)
				led_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4037b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 403854 <task_rtt+0xac>
  4037ba:	e023      	b.n	403804 <task_rtt+0x5c>
    while (ul_previous_time == rtt_read_timer_value(RTT));
    rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  4037bc:	f104 0128 	add.w	r1, r4, #40	; 0x28
  4037c0:	4640      	mov	r0, r8
  4037c2:	4b1b      	ldr	r3, [pc, #108]	; (403830 <task_rtt+0x88>)
  4037c4:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4037c6:	4b1b      	ldr	r3, [pc, #108]	; (403834 <task_rtt+0x8c>)
  4037c8:	2208      	movs	r2, #8
  4037ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4037ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4037d2:	2180      	movs	r1, #128	; 0x80
  4037d4:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4037d8:	601a      	str	r2, [r3, #0]
  NVIC_SetPriority(RTT_IRQn, 4);
  NVIC_EnableIRQ(RTT_IRQn);

  /* Enable RTT interrupt */
  if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
    rtt_enable_interrupt(RTT, rttIRQSource);
  4037da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4037de:	4640      	mov	r0, r8
  4037e0:	4b15      	ldr	r3, [pc, #84]	; (403838 <task_rtt+0x90>)
  4037e2:	4798      	blx	r3
			if (xSemaphoreTake(xSemaphoreRTT, 1000) == pdTRUE) {
  4037e4:	4e15      	ldr	r6, [pc, #84]	; (40383c <task_rtt+0x94>)
  4037e6:	2500      	movs	r5, #0
  4037e8:	4c15      	ldr	r4, [pc, #84]	; (403840 <task_rtt+0x98>)
  4037ea:	462b      	mov	r3, r5
  4037ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4037f0:	4629      	mov	r1, r5
  4037f2:	6830      	ldr	r0, [r6, #0]
  4037f4:	47a0      	blx	r4
  4037f6:	2801      	cmp	r0, #1
  4037f8:	d1f7      	bne.n	4037ea <task_rtt+0x42>
				led_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4037fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4037fe:	4648      	mov	r0, r9
  403800:	4b10      	ldr	r3, [pc, #64]	; (403844 <task_rtt+0x9c>)
  403802:	4798      	blx	r3
  rtt_sel_source(RTT, false);
  403804:	2100      	movs	r1, #0
  403806:	4640      	mov	r0, r8
  403808:	4b0f      	ldr	r3, [pc, #60]	; (403848 <task_rtt+0xa0>)
  40380a:	4798      	blx	r3
  rtt_init(RTT, pllPreScale);
  40380c:	f640 41cc 	movw	r1, #3276	; 0xccc
  403810:	4640      	mov	r0, r8
  403812:	4b0e      	ldr	r3, [pc, #56]	; (40384c <task_rtt+0xa4>)
  403814:	4798      	blx	r3
    ul_previous_time = rtt_read_timer_value(RTT);
  403816:	4640      	mov	r0, r8
  403818:	47b8      	blx	r7
  40381a:	4604      	mov	r4, r0
    while (ul_previous_time == rtt_read_timer_value(RTT));
  40381c:	4640      	mov	r0, r8
  40381e:	47b8      	blx	r7
  403820:	4284      	cmp	r4, r0
  403822:	d0fb      	beq.n	40381c <task_rtt+0x74>
  403824:	e7ca      	b.n	4037bc <task_rtt+0x14>
  403826:	bf00      	nop
  403828:	0040377d 	.word	0x0040377d
  40382c:	00400541 	.word	0x00400541
  403830:	00400559 	.word	0x00400559
  403834:	e000e100 	.word	0xe000e100
  403838:	00400519 	.word	0x00400519
  40383c:	20400e34 	.word	0x20400e34
  403840:	00402215 	.word	0x00402215
  403844:	00403621 	.word	0x00403621
  403848:	004004ed 	.word	0x004004ed
  40384c:	004004d9 	.word	0x004004d9
  403850:	400e1830 	.word	0x400e1830
  403854:	400e1200 	.word	0x400e1200

00403858 <LED3_init>:
void LED3_init(int estado) {
  403858:	b510      	push	{r4, lr}
  40385a:	b082      	sub	sp, #8
  40385c:	4604      	mov	r4, r0
  pmc_enable_periph_clk(LED3_PIO_ID);
  40385e:	200b      	movs	r0, #11
  403860:	4b05      	ldr	r3, [pc, #20]	; (403878 <LED3_init+0x20>)
  403862:	4798      	blx	r3
  pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, estado, 0, 0);
  403864:	2300      	movs	r3, #0
  403866:	9300      	str	r3, [sp, #0]
  403868:	4622      	mov	r2, r4
  40386a:	2104      	movs	r1, #4
  40386c:	4803      	ldr	r0, [pc, #12]	; (40387c <LED3_init+0x24>)
  40386e:	4c04      	ldr	r4, [pc, #16]	; (403880 <LED3_init+0x28>)
  403870:	47a0      	blx	r4
};
  403872:	b002      	add	sp, #8
  403874:	bd10      	pop	{r4, pc}
  403876:	bf00      	nop
  403878:	0040132d 	.word	0x0040132d
  40387c:	400e1000 	.word	0x400e1000
  403880:	0040108d 	.word	0x0040108d

00403884 <RTT_Handler>:
  else
    rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
}

void RTT_Handler(void) {
  403884:	b500      	push	{lr}
  403886:	b083      	sub	sp, #12
	uint32_t ul_status;
	ul_status = rtt_get_status(RTT);
  403888:	4808      	ldr	r0, [pc, #32]	; (4038ac <RTT_Handler+0x28>)
  40388a:	4b09      	ldr	r3, [pc, #36]	; (4038b0 <RTT_Handler+0x2c>)
  40388c:	4798      	blx	r3

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  40388e:	f010 0f01 	tst.w	r0, #1
  403892:	d102      	bne.n	40389a <RTT_Handler+0x16>
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xSemaphoreGiveFromISR(xSemaphoreRTT, &xHigherPriorityTaskWoken);
	}  
}
  403894:	b003      	add	sp, #12
  403896:	f85d fb04 	ldr.w	pc, [sp], #4
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40389a:	a902      	add	r1, sp, #8
  40389c:	2300      	movs	r3, #0
  40389e:	f841 3d04 	str.w	r3, [r1, #-4]!
    xSemaphoreGiveFromISR(xSemaphoreRTT, &xHigherPriorityTaskWoken);
  4038a2:	4b04      	ldr	r3, [pc, #16]	; (4038b4 <RTT_Handler+0x30>)
  4038a4:	6818      	ldr	r0, [r3, #0]
  4038a6:	4b04      	ldr	r3, [pc, #16]	; (4038b8 <RTT_Handler+0x34>)
  4038a8:	4798      	blx	r3
}
  4038aa:	e7f3      	b.n	403894 <RTT_Handler+0x10>
  4038ac:	400e1830 	.word	0x400e1830
  4038b0:	00400555 	.word	0x00400555
  4038b4:	20400e34 	.word	0x20400e34
  4038b8:	00402135 	.word	0x00402135

004038bc <RTC_init>:

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  4038bc:	b082      	sub	sp, #8
  4038be:	b570      	push	{r4, r5, r6, lr}
  4038c0:	b082      	sub	sp, #8
  4038c2:	4605      	mov	r5, r0
  4038c4:	460c      	mov	r4, r1
  4038c6:	a906      	add	r1, sp, #24
  4038c8:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  4038cc:	2002      	movs	r0, #2
  4038ce:	4b1d      	ldr	r3, [pc, #116]	; (403944 <RTC_init+0x88>)
  4038d0:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  4038d2:	2100      	movs	r1, #0
  4038d4:	4628      	mov	r0, r5
  4038d6:	4b1c      	ldr	r3, [pc, #112]	; (403948 <RTC_init+0x8c>)
  4038d8:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  4038da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038dc:	9300      	str	r3, [sp, #0]
  4038de:	9b08      	ldr	r3, [sp, #32]
  4038e0:	9a07      	ldr	r2, [sp, #28]
  4038e2:	9906      	ldr	r1, [sp, #24]
  4038e4:	4628      	mov	r0, r5
  4038e6:	4e19      	ldr	r6, [pc, #100]	; (40394c <RTC_init+0x90>)
  4038e8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  4038ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4038ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4038ee:	990a      	ldr	r1, [sp, #40]	; 0x28
  4038f0:	4628      	mov	r0, r5
  4038f2:	4e17      	ldr	r6, [pc, #92]	; (403950 <RTC_init+0x94>)
  4038f4:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  4038f6:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4038f8:	b2e4      	uxtb	r4, r4
  4038fa:	f004 011f 	and.w	r1, r4, #31
  4038fe:	2301      	movs	r3, #1
  403900:	408b      	lsls	r3, r1
  403902:	0956      	lsrs	r6, r2, #5
  403904:	4813      	ldr	r0, [pc, #76]	; (403954 <RTC_init+0x98>)
  403906:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  40390a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40390e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  403912:	2a00      	cmp	r2, #0
  403914:	db0f      	blt.n	403936 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403916:	490f      	ldr	r1, [pc, #60]	; (403954 <RTC_init+0x98>)
  403918:	4411      	add	r1, r2
  40391a:	2280      	movs	r2, #128	; 0x80
  40391c:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403920:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  403924:	990d      	ldr	r1, [sp, #52]	; 0x34
  403926:	4628      	mov	r0, r5
  403928:	4b0b      	ldr	r3, [pc, #44]	; (403958 <RTC_init+0x9c>)
  40392a:	4798      	blx	r3
}
  40392c:	b002      	add	sp, #8
  40392e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  403932:	b002      	add	sp, #8
  403934:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403936:	f004 040f 	and.w	r4, r4, #15
  40393a:	4a08      	ldr	r2, [pc, #32]	; (40395c <RTC_init+0xa0>)
  40393c:	2180      	movs	r1, #128	; 0x80
  40393e:	5511      	strb	r1, [r2, r4]
  403940:	e7ee      	b.n	403920 <RTC_init+0x64>
  403942:	bf00      	nop
  403944:	0040132d 	.word	0x0040132d
  403948:	004001ad 	.word	0x004001ad
  40394c:	004003b9 	.word	0x004003b9
  403950:	00400221 	.word	0x00400221
  403954:	e000e100 	.word	0xe000e100
  403958:	004001c3 	.word	0x004001c3
  40395c:	e000ed14 	.word	0xe000ed14

00403960 <task_rtc>:
static void task_rtc(void *pvParameters) {
  403960:	b580      	push	{r7, lr}
  403962:	b094      	sub	sp, #80	; 0x50
  LED3_init(0);
  403964:	2000      	movs	r0, #0
  403966:	4b26      	ldr	r3, [pc, #152]	; (403a00 <task_rtc+0xa0>)
  403968:	4798      	blx	r3
  calendar rtc_initial = {2023, 3, 19, 12, 15, 45 ,1};                                            
  40396a:	ac0d      	add	r4, sp, #52	; 0x34
  40396c:	4d25      	ldr	r5, [pc, #148]	; (403a04 <task_rtc+0xa4>)
  40396e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);                                              
  40397a:	4e23      	ldr	r6, [pc, #140]	; (403a08 <task_rtc+0xa8>)
  40397c:	2702      	movs	r7, #2
  40397e:	9705      	str	r7, [sp, #20]
  403980:	466c      	mov	r4, sp
  403982:	ad0f      	add	r5, sp, #60	; 0x3c
  403984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403988:	682b      	ldr	r3, [r5, #0]
  40398a:	6023      	str	r3, [r4, #0]
  40398c:	ab0d      	add	r3, sp, #52	; 0x34
  40398e:	cb0c      	ldmia	r3, {r2, r3}
  403990:	4639      	mov	r1, r7
  403992:	4630      	mov	r0, r6
  403994:	4c1d      	ldr	r4, [pc, #116]	; (403a0c <task_rtc+0xac>)
  403996:	47a0      	blx	r4
  rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403998:	ab0a      	add	r3, sp, #40	; 0x28
  40399a:	aa0b      	add	r2, sp, #44	; 0x2c
  40399c:	a90c      	add	r1, sp, #48	; 0x30
  40399e:	4630      	mov	r0, r6
  4039a0:	4c1b      	ldr	r4, [pc, #108]	; (403a10 <task_rtc+0xb0>)
  4039a2:	47a0      	blx	r4
  rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  4039a4:	ab06      	add	r3, sp, #24
  4039a6:	9300      	str	r3, [sp, #0]
  4039a8:	ab07      	add	r3, sp, #28
  4039aa:	aa08      	add	r2, sp, #32
  4039ac:	a909      	add	r1, sp, #36	; 0x24
  4039ae:	4630      	mov	r0, r6
  4039b0:	4c18      	ldr	r4, [pc, #96]	; (403a14 <task_rtc+0xb4>)
  4039b2:	47a0      	blx	r4
  rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);                              
  4039b4:	9b07      	ldr	r3, [sp, #28]
  4039b6:	9300      	str	r3, [sp, #0]
  4039b8:	2301      	movs	r3, #1
  4039ba:	9a08      	ldr	r2, [sp, #32]
  4039bc:	4619      	mov	r1, r3
  4039be:	4630      	mov	r0, r6
  4039c0:	4c15      	ldr	r4, [pc, #84]	; (403a18 <task_rtc+0xb8>)
  4039c2:	47a0      	blx	r4
  rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 20);
  4039c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039c6:	3314      	adds	r3, #20
  4039c8:	9302      	str	r3, [sp, #8]
  4039ca:	2101      	movs	r1, #1
  4039cc:	9101      	str	r1, [sp, #4]
  4039ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4039d0:	9300      	str	r3, [sp, #0]
  4039d2:	460b      	mov	r3, r1
  4039d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4039d6:	4630      	mov	r0, r6
  4039d8:	4c10      	ldr	r4, [pc, #64]	; (403a1c <task_rtc+0xbc>)
  4039da:	47a0      	blx	r4
    if (xSemaphoreTake(xSemaphoreRTC, 1000) == pdTRUE) {
  4039dc:	4e10      	ldr	r6, [pc, #64]	; (403a20 <task_rtc+0xc0>)
  4039de:	4d11      	ldr	r5, [pc, #68]	; (403a24 <task_rtc+0xc4>)
      led_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  4039e0:	4f11      	ldr	r7, [pc, #68]	; (403a28 <task_rtc+0xc8>)
    if (xSemaphoreTake(xSemaphoreRTC, 1000) == pdTRUE) {
  4039e2:	2400      	movs	r4, #0
  4039e4:	4623      	mov	r3, r4
  4039e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4039ea:	4621      	mov	r1, r4
  4039ec:	6830      	ldr	r0, [r6, #0]
  4039ee:	47a8      	blx	r5
  4039f0:	2801      	cmp	r0, #1
  4039f2:	d1f7      	bne.n	4039e4 <task_rtc+0x84>
      led_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  4039f4:	2104      	movs	r1, #4
  4039f6:	4638      	mov	r0, r7
  4039f8:	4b0c      	ldr	r3, [pc, #48]	; (403a2c <task_rtc+0xcc>)
  4039fa:	4798      	blx	r3
  4039fc:	e7f1      	b.n	4039e2 <task_rtc+0x82>
  4039fe:	bf00      	nop
  403a00:	00403859 	.word	0x00403859
  403a04:	00406ec4 	.word	0x00406ec4
  403a08:	400e1860 	.word	0x400e1860
  403a0c:	004038bd 	.word	0x004038bd
  403a10:	004001c7 	.word	0x004001c7
  403a14:	00400345 	.word	0x00400345
  403a18:	00400471 	.word	0x00400471
  403a1c:	004002b1 	.word	0x004002b1
  403a20:	20400e30 	.word	0x20400e30
  403a24:	00402215 	.word	0x00402215
  403a28:	400e1000 	.word	0x400e1000
  403a2c:	00403621 	.word	0x00403621

00403a30 <RTC_Handler>:

void RTC_Handler(void) {
  403a30:	b530      	push	{r4, r5, lr}
  403a32:	b083      	sub	sp, #12
  uint32_t ul_status = rtc_get_status(RTC);
  403a34:	4812      	ldr	r0, [pc, #72]	; (403a80 <RTC_Handler+0x50>)
  403a36:	4b13      	ldr	r3, [pc, #76]	; (403a84 <RTC_Handler+0x54>)
  403a38:	4798      	blx	r3
  if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {	
    // o código para irq de segundo vem aqui
  }

  /* Time or date alarm */
  if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  403a3a:	f010 0f02 	tst.w	r0, #2
  403a3e:	d115      	bne.n	403a6c <RTC_Handler+0x3c>
    // o código para irq de alame vem aqui
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  }

  rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403a40:	4d0f      	ldr	r5, [pc, #60]	; (403a80 <RTC_Handler+0x50>)
  403a42:	2104      	movs	r1, #4
  403a44:	4628      	mov	r0, r5
  403a46:	4c10      	ldr	r4, [pc, #64]	; (403a88 <RTC_Handler+0x58>)
  403a48:	47a0      	blx	r4
  rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  403a4a:	2102      	movs	r1, #2
  403a4c:	4628      	mov	r0, r5
  403a4e:	47a0      	blx	r4
  rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403a50:	2101      	movs	r1, #1
  403a52:	4628      	mov	r0, r5
  403a54:	47a0      	blx	r4
  rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403a56:	2108      	movs	r1, #8
  403a58:	4628      	mov	r0, r5
  403a5a:	47a0      	blx	r4
  rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403a5c:	2110      	movs	r1, #16
  403a5e:	4628      	mov	r0, r5
  403a60:	47a0      	blx	r4
  rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  403a62:	2120      	movs	r1, #32
  403a64:	4628      	mov	r0, r5
  403a66:	47a0      	blx	r4
}
  403a68:	b003      	add	sp, #12
  403a6a:	bd30      	pop	{r4, r5, pc}
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403a6c:	a902      	add	r1, sp, #8
  403a6e:	2300      	movs	r3, #0
  403a70:	f841 3d04 	str.w	r3, [r1, #-4]!
    xSemaphoreGiveFromISR(xSemaphoreRTC, &xHigherPriorityTaskWoken);
  403a74:	4b05      	ldr	r3, [pc, #20]	; (403a8c <RTC_Handler+0x5c>)
  403a76:	6818      	ldr	r0, [r3, #0]
  403a78:	4b05      	ldr	r3, [pc, #20]	; (403a90 <RTC_Handler+0x60>)
  403a7a:	4798      	blx	r3
  403a7c:	e7e0      	b.n	403a40 <RTC_Handler+0x10>
  403a7e:	bf00      	nop
  403a80:	400e1860 	.word	0x400e1860
  403a84:	004004d1 	.word	0x004004d1
  403a88:	004004d5 	.word	0x004004d5
  403a8c:	20400e30 	.word	0x20400e30
  403a90:	00402135 	.word	0x00402135

00403a94 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void) {
  403a94:	b500      	push	{lr}
  403a96:	b08b      	sub	sp, #44	; 0x2c
  /* Initialize the SAM system */
  sysclk_init();
  403a98:	4b4e      	ldr	r3, [pc, #312]	; (403bd4 <main+0x140>)
  403a9a:	4798      	blx	r3
  board_init();
  403a9c:	4b4e      	ldr	r3, [pc, #312]	; (403bd8 <main+0x144>)
  403a9e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403aa0:	4d4e      	ldr	r5, [pc, #312]	; (403bdc <main+0x148>)
  403aa2:	4b4f      	ldr	r3, [pc, #316]	; (403be0 <main+0x14c>)
  403aa4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403aa6:	4a4f      	ldr	r2, [pc, #316]	; (403be4 <main+0x150>)
  403aa8:	4b4f      	ldr	r3, [pc, #316]	; (403be8 <main+0x154>)
  403aaa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403aac:	4a4f      	ldr	r2, [pc, #316]	; (403bec <main+0x158>)
  403aae:	4b50      	ldr	r3, [pc, #320]	; (403bf0 <main+0x15c>)
  403ab0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403ab2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403ab6:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403ab8:	23c0      	movs	r3, #192	; 0xc0
  403aba:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403ac0:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403ac2:	2400      	movs	r4, #0
  403ac4:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403ac6:	9408      	str	r4, [sp, #32]
  403ac8:	200e      	movs	r0, #14
  403aca:	4b4a      	ldr	r3, [pc, #296]	; (403bf4 <main+0x160>)
  403acc:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403ace:	4a4a      	ldr	r2, [pc, #296]	; (403bf8 <main+0x164>)
  403ad0:	a904      	add	r1, sp, #16
  403ad2:	4628      	mov	r0, r5
  403ad4:	4b49      	ldr	r3, [pc, #292]	; (403bfc <main+0x168>)
  403ad6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403ad8:	4628      	mov	r0, r5
  403ada:	4b49      	ldr	r3, [pc, #292]	; (403c00 <main+0x16c>)
  403adc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403ade:	4628      	mov	r0, r5
  403ae0:	4b48      	ldr	r3, [pc, #288]	; (403c04 <main+0x170>)
  403ae2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403ae4:	4e48      	ldr	r6, [pc, #288]	; (403c08 <main+0x174>)
  403ae6:	6833      	ldr	r3, [r6, #0]
  403ae8:	4621      	mov	r1, r4
  403aea:	6898      	ldr	r0, [r3, #8]
  403aec:	4d47      	ldr	r5, [pc, #284]	; (403c0c <main+0x178>)
  403aee:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403af0:	6833      	ldr	r3, [r6, #0]
  403af2:	4621      	mov	r1, r4
  403af4:	6858      	ldr	r0, [r3, #4]
  403af6:	47a8      	blx	r5
  setbuf(stdout, NULL);
  403af8:	6833      	ldr	r3, [r6, #0]
  403afa:	4621      	mov	r1, r4
  403afc:	6898      	ldr	r0, [r3, #8]
  403afe:	47a8      	blx	r5

  /* Initialize the console uart */
  configure_console();

  /* Create semaphore to RTT */
	xSemaphoreRTT = xSemaphoreCreateBinary();
  403b00:	2203      	movs	r2, #3
  403b02:	4621      	mov	r1, r4
  403b04:	2001      	movs	r0, #1
  403b06:	4b42      	ldr	r3, [pc, #264]	; (403c10 <main+0x17c>)
  403b08:	4798      	blx	r3
  403b0a:	4b42      	ldr	r3, [pc, #264]	; (403c14 <main+0x180>)
  403b0c:	6018      	str	r0, [r3, #0]
	if (xSemaphoreRTT == NULL) {
  403b0e:	2800      	cmp	r0, #0
  403b10:	d054      	beq.n	403bbc <main+0x128>
		printf("Error creating the semaphore");
	}

  /* Create semaphore to RTC */
  xSemaphoreRTC = xSemaphoreCreateBinary();
  403b12:	2203      	movs	r2, #3
  403b14:	2100      	movs	r1, #0
  403b16:	2001      	movs	r0, #1
  403b18:	4b3d      	ldr	r3, [pc, #244]	; (403c10 <main+0x17c>)
  403b1a:	4798      	blx	r3
  403b1c:	4b3e      	ldr	r3, [pc, #248]	; (403c18 <main+0x184>)
  403b1e:	6018      	str	r0, [r3, #0]
  if (xSemaphoreRTC == NULL) {
  403b20:	2800      	cmp	r0, #0
  403b22:	d04f      	beq.n	403bc4 <main+0x130>
    printf("Error creating the semaphore");
  }

  /* Create semaphore to But1 */
  xSemaphoreBut1 = xSemaphoreCreateBinary();
  403b24:	2203      	movs	r2, #3
  403b26:	2100      	movs	r1, #0
  403b28:	2001      	movs	r0, #1
  403b2a:	4b39      	ldr	r3, [pc, #228]	; (403c10 <main+0x17c>)
  403b2c:	4798      	blx	r3
  403b2e:	4b3b      	ldr	r3, [pc, #236]	; (403c1c <main+0x188>)
  403b30:	6018      	str	r0, [r3, #0]
  if (xSemaphoreBut1 == NULL) {
  403b32:	2800      	cmp	r0, #0
  403b34:	d04a      	beq.n	403bcc <main+0x138>
    printf("Error creating the semaphore");
  }

  /* Create task to control oled */
  if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL,
  403b36:	2300      	movs	r3, #0
  403b38:	9303      	str	r3, [sp, #12]
  403b3a:	9302      	str	r3, [sp, #8]
  403b3c:	9301      	str	r3, [sp, #4]
  403b3e:	9300      	str	r3, [sp, #0]
  403b40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403b44:	4936      	ldr	r1, [pc, #216]	; (403c20 <main+0x18c>)
  403b46:	4837      	ldr	r0, [pc, #220]	; (403c24 <main+0x190>)
  403b48:	4c37      	ldr	r4, [pc, #220]	; (403c28 <main+0x194>)
  403b4a:	47a0      	blx	r4
  403b4c:	2801      	cmp	r0, #1
  403b4e:	d002      	beq.n	403b56 <main+0xc2>
                  TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create oled task\r\n");
  403b50:	4836      	ldr	r0, [pc, #216]	; (403c2c <main+0x198>)
  403b52:	4b37      	ldr	r3, [pc, #220]	; (403c30 <main+0x19c>)
  403b54:	4798      	blx	r3
  }

  /* Create task to control tc */
  if (xTaskCreate(task_tc, "tc", TASK_TC_STACK_SIZE, NULL,
  403b56:	2300      	movs	r3, #0
  403b58:	9303      	str	r3, [sp, #12]
  403b5a:	9302      	str	r3, [sp, #8]
  403b5c:	9301      	str	r3, [sp, #4]
  403b5e:	9300      	str	r3, [sp, #0]
  403b60:	f44f 7200 	mov.w	r2, #512	; 0x200
  403b64:	4933      	ldr	r1, [pc, #204]	; (403c34 <main+0x1a0>)
  403b66:	4834      	ldr	r0, [pc, #208]	; (403c38 <main+0x1a4>)
  403b68:	4c2f      	ldr	r4, [pc, #188]	; (403c28 <main+0x194>)
  403b6a:	47a0      	blx	r4
  403b6c:	2801      	cmp	r0, #1
  403b6e:	d002      	beq.n	403b76 <main+0xe2>
                  TASK_TC_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create tc task\r\n");
  403b70:	4832      	ldr	r0, [pc, #200]	; (403c3c <main+0x1a8>)
  403b72:	4b2f      	ldr	r3, [pc, #188]	; (403c30 <main+0x19c>)
  403b74:	4798      	blx	r3
  }

  /* Create task to control rtt */
  if (xTaskCreate(task_rtt, "rtt", TASK_RTT_STACK_SIZE, NULL,
  403b76:	2300      	movs	r3, #0
  403b78:	9303      	str	r3, [sp, #12]
  403b7a:	9302      	str	r3, [sp, #8]
  403b7c:	9301      	str	r3, [sp, #4]
  403b7e:	9300      	str	r3, [sp, #0]
  403b80:	f44f 7200 	mov.w	r2, #512	; 0x200
  403b84:	492e      	ldr	r1, [pc, #184]	; (403c40 <main+0x1ac>)
  403b86:	482f      	ldr	r0, [pc, #188]	; (403c44 <main+0x1b0>)
  403b88:	4c27      	ldr	r4, [pc, #156]	; (403c28 <main+0x194>)
  403b8a:	47a0      	blx	r4
  403b8c:	2801      	cmp	r0, #1
  403b8e:	d002      	beq.n	403b96 <main+0x102>
                  TASK_RTT_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create rtt task\r\n");
  403b90:	482d      	ldr	r0, [pc, #180]	; (403c48 <main+0x1b4>)
  403b92:	4b27      	ldr	r3, [pc, #156]	; (403c30 <main+0x19c>)
  403b94:	4798      	blx	r3
  }

  /* Create task to control rtc */
  if (xTaskCreate(task_rtc, "rtc", TASK_RTC_STACK_SIZE, NULL,
  403b96:	2300      	movs	r3, #0
  403b98:	9303      	str	r3, [sp, #12]
  403b9a:	9302      	str	r3, [sp, #8]
  403b9c:	9301      	str	r3, [sp, #4]
  403b9e:	9300      	str	r3, [sp, #0]
  403ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
  403ba4:	4929      	ldr	r1, [pc, #164]	; (403c4c <main+0x1b8>)
  403ba6:	482a      	ldr	r0, [pc, #168]	; (403c50 <main+0x1bc>)
  403ba8:	4c1f      	ldr	r4, [pc, #124]	; (403c28 <main+0x194>)
  403baa:	47a0      	blx	r4
  403bac:	2801      	cmp	r0, #1
  403bae:	d002      	beq.n	403bb6 <main+0x122>
                  TASK_RTC_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create rtc task\r\n");
  403bb0:	4828      	ldr	r0, [pc, #160]	; (403c54 <main+0x1c0>)
  403bb2:	4b1f      	ldr	r3, [pc, #124]	; (403c30 <main+0x19c>)
  403bb4:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  403bb6:	4b28      	ldr	r3, [pc, #160]	; (403c58 <main+0x1c4>)
  403bb8:	4798      	blx	r3
  403bba:	e7fe      	b.n	403bba <main+0x126>
		printf("Error creating the semaphore");
  403bbc:	4827      	ldr	r0, [pc, #156]	; (403c5c <main+0x1c8>)
  403bbe:	4b1c      	ldr	r3, [pc, #112]	; (403c30 <main+0x19c>)
  403bc0:	4798      	blx	r3
  403bc2:	e7a6      	b.n	403b12 <main+0x7e>
    printf("Error creating the semaphore");
  403bc4:	4825      	ldr	r0, [pc, #148]	; (403c5c <main+0x1c8>)
  403bc6:	4b1a      	ldr	r3, [pc, #104]	; (403c30 <main+0x19c>)
  403bc8:	4798      	blx	r3
  403bca:	e7ab      	b.n	403b24 <main+0x90>
    printf("Error creating the semaphore");
  403bcc:	4823      	ldr	r0, [pc, #140]	; (403c5c <main+0x1c8>)
  403bce:	4b18      	ldr	r3, [pc, #96]	; (403c30 <main+0x19c>)
  403bd0:	4798      	blx	r3
  403bd2:	e7b0      	b.n	403b36 <main+0xa2>
  403bd4:	00400d29 	.word	0x00400d29
  403bd8:	00400e25 	.word	0x00400e25
  403bdc:	40028000 	.word	0x40028000
  403be0:	20400de8 	.word	0x20400de8
  403be4:	00403521 	.word	0x00403521
  403be8:	20400de4 	.word	0x20400de4
  403bec:	00403445 	.word	0x00403445
  403bf0:	20400de0 	.word	0x20400de0
  403bf4:	0040132d 	.word	0x0040132d
  403bf8:	08f0d180 	.word	0x08f0d180
  403bfc:	00401429 	.word	0x00401429
  403c00:	0040147d 	.word	0x0040147d
  403c04:	00401483 	.word	0x00401483
  403c08:	20400024 	.word	0x20400024
  403c0c:	00404465 	.word	0x00404465
  403c10:	00401dd5 	.word	0x00401dd5
  403c14:	20400e34 	.word	0x20400e34
  403c18:	20400e30 	.word	0x20400e30
  403c1c:	20400e2c 	.word	0x20400e2c
  403c20:	00406f00 	.word	0x00406f00
  403c24:	00403411 	.word	0x00403411
  403c28:	004024f5 	.word	0x004024f5
  403c2c:	00406f08 	.word	0x00406f08
  403c30:	00403cb1 	.word	0x00403cb1
  403c34:	00406f28 	.word	0x00406f28
  403c38:	0040374d 	.word	0x0040374d
  403c3c:	00406f2c 	.word	0x00406f2c
  403c40:	00406f48 	.word	0x00406f48
  403c44:	004037a9 	.word	0x004037a9
  403c48:	00406f4c 	.word	0x00406f4c
  403c4c:	00406f68 	.word	0x00406f68
  403c50:	00403961 	.word	0x00403961
  403c54:	00406f6c 	.word	0x00406f6c
  403c58:	00402729 	.word	0x00402729
  403c5c:	00406ee0 	.word	0x00406ee0

00403c60 <__libc_init_array>:
  403c60:	b570      	push	{r4, r5, r6, lr}
  403c62:	4e0f      	ldr	r6, [pc, #60]	; (403ca0 <__libc_init_array+0x40>)
  403c64:	4d0f      	ldr	r5, [pc, #60]	; (403ca4 <__libc_init_array+0x44>)
  403c66:	1b76      	subs	r6, r6, r5
  403c68:	10b6      	asrs	r6, r6, #2
  403c6a:	bf18      	it	ne
  403c6c:	2400      	movne	r4, #0
  403c6e:	d005      	beq.n	403c7c <__libc_init_array+0x1c>
  403c70:	3401      	adds	r4, #1
  403c72:	f855 3b04 	ldr.w	r3, [r5], #4
  403c76:	4798      	blx	r3
  403c78:	42a6      	cmp	r6, r4
  403c7a:	d1f9      	bne.n	403c70 <__libc_init_array+0x10>
  403c7c:	4e0a      	ldr	r6, [pc, #40]	; (403ca8 <__libc_init_array+0x48>)
  403c7e:	4d0b      	ldr	r5, [pc, #44]	; (403cac <__libc_init_array+0x4c>)
  403c80:	1b76      	subs	r6, r6, r5
  403c82:	f003 fa49 	bl	407118 <_init>
  403c86:	10b6      	asrs	r6, r6, #2
  403c88:	bf18      	it	ne
  403c8a:	2400      	movne	r4, #0
  403c8c:	d006      	beq.n	403c9c <__libc_init_array+0x3c>
  403c8e:	3401      	adds	r4, #1
  403c90:	f855 3b04 	ldr.w	r3, [r5], #4
  403c94:	4798      	blx	r3
  403c96:	42a6      	cmp	r6, r4
  403c98:	d1f9      	bne.n	403c8e <__libc_init_array+0x2e>
  403c9a:	bd70      	pop	{r4, r5, r6, pc}
  403c9c:	bd70      	pop	{r4, r5, r6, pc}
  403c9e:	bf00      	nop
  403ca0:	00407124 	.word	0x00407124
  403ca4:	00407124 	.word	0x00407124
  403ca8:	0040712c 	.word	0x0040712c
  403cac:	00407124 	.word	0x00407124

00403cb0 <iprintf>:
  403cb0:	b40f      	push	{r0, r1, r2, r3}
  403cb2:	b500      	push	{lr}
  403cb4:	4907      	ldr	r1, [pc, #28]	; (403cd4 <iprintf+0x24>)
  403cb6:	b083      	sub	sp, #12
  403cb8:	ab04      	add	r3, sp, #16
  403cba:	6808      	ldr	r0, [r1, #0]
  403cbc:	f853 2b04 	ldr.w	r2, [r3], #4
  403cc0:	6881      	ldr	r1, [r0, #8]
  403cc2:	9301      	str	r3, [sp, #4]
  403cc4:	f000 fd6a 	bl	40479c <_vfiprintf_r>
  403cc8:	b003      	add	sp, #12
  403cca:	f85d eb04 	ldr.w	lr, [sp], #4
  403cce:	b004      	add	sp, #16
  403cd0:	4770      	bx	lr
  403cd2:	bf00      	nop
  403cd4:	20400024 	.word	0x20400024

00403cd8 <malloc>:
  403cd8:	4b02      	ldr	r3, [pc, #8]	; (403ce4 <malloc+0xc>)
  403cda:	4601      	mov	r1, r0
  403cdc:	6818      	ldr	r0, [r3, #0]
  403cde:	f000 b80b 	b.w	403cf8 <_malloc_r>
  403ce2:	bf00      	nop
  403ce4:	20400024 	.word	0x20400024

00403ce8 <free>:
  403ce8:	4b02      	ldr	r3, [pc, #8]	; (403cf4 <free+0xc>)
  403cea:	4601      	mov	r1, r0
  403cec:	6818      	ldr	r0, [r3, #0]
  403cee:	f001 be71 	b.w	4059d4 <_free_r>
  403cf2:	bf00      	nop
  403cf4:	20400024 	.word	0x20400024

00403cf8 <_malloc_r>:
  403cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cfc:	f101 060b 	add.w	r6, r1, #11
  403d00:	2e16      	cmp	r6, #22
  403d02:	b083      	sub	sp, #12
  403d04:	4605      	mov	r5, r0
  403d06:	f240 809e 	bls.w	403e46 <_malloc_r+0x14e>
  403d0a:	f036 0607 	bics.w	r6, r6, #7
  403d0e:	f100 80bd 	bmi.w	403e8c <_malloc_r+0x194>
  403d12:	42b1      	cmp	r1, r6
  403d14:	f200 80ba 	bhi.w	403e8c <_malloc_r+0x194>
  403d18:	f000 fb86 	bl	404428 <__malloc_lock>
  403d1c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403d20:	f0c0 8293 	bcc.w	40424a <_malloc_r+0x552>
  403d24:	0a73      	lsrs	r3, r6, #9
  403d26:	f000 80b8 	beq.w	403e9a <_malloc_r+0x1a2>
  403d2a:	2b04      	cmp	r3, #4
  403d2c:	f200 8179 	bhi.w	404022 <_malloc_r+0x32a>
  403d30:	09b3      	lsrs	r3, r6, #6
  403d32:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403d36:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403d3a:	00c3      	lsls	r3, r0, #3
  403d3c:	4fbf      	ldr	r7, [pc, #764]	; (40403c <_malloc_r+0x344>)
  403d3e:	443b      	add	r3, r7
  403d40:	f1a3 0108 	sub.w	r1, r3, #8
  403d44:	685c      	ldr	r4, [r3, #4]
  403d46:	42a1      	cmp	r1, r4
  403d48:	d106      	bne.n	403d58 <_malloc_r+0x60>
  403d4a:	e00c      	b.n	403d66 <_malloc_r+0x6e>
  403d4c:	2a00      	cmp	r2, #0
  403d4e:	f280 80aa 	bge.w	403ea6 <_malloc_r+0x1ae>
  403d52:	68e4      	ldr	r4, [r4, #12]
  403d54:	42a1      	cmp	r1, r4
  403d56:	d006      	beq.n	403d66 <_malloc_r+0x6e>
  403d58:	6863      	ldr	r3, [r4, #4]
  403d5a:	f023 0303 	bic.w	r3, r3, #3
  403d5e:	1b9a      	subs	r2, r3, r6
  403d60:	2a0f      	cmp	r2, #15
  403d62:	ddf3      	ble.n	403d4c <_malloc_r+0x54>
  403d64:	4670      	mov	r0, lr
  403d66:	693c      	ldr	r4, [r7, #16]
  403d68:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404050 <_malloc_r+0x358>
  403d6c:	4574      	cmp	r4, lr
  403d6e:	f000 81ab 	beq.w	4040c8 <_malloc_r+0x3d0>
  403d72:	6863      	ldr	r3, [r4, #4]
  403d74:	f023 0303 	bic.w	r3, r3, #3
  403d78:	1b9a      	subs	r2, r3, r6
  403d7a:	2a0f      	cmp	r2, #15
  403d7c:	f300 8190 	bgt.w	4040a0 <_malloc_r+0x3a8>
  403d80:	2a00      	cmp	r2, #0
  403d82:	f8c7 e014 	str.w	lr, [r7, #20]
  403d86:	f8c7 e010 	str.w	lr, [r7, #16]
  403d8a:	f280 809d 	bge.w	403ec8 <_malloc_r+0x1d0>
  403d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d92:	f080 8161 	bcs.w	404058 <_malloc_r+0x360>
  403d96:	08db      	lsrs	r3, r3, #3
  403d98:	f103 0c01 	add.w	ip, r3, #1
  403d9c:	1099      	asrs	r1, r3, #2
  403d9e:	687a      	ldr	r2, [r7, #4]
  403da0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403da4:	f8c4 8008 	str.w	r8, [r4, #8]
  403da8:	2301      	movs	r3, #1
  403daa:	408b      	lsls	r3, r1
  403dac:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403db0:	4313      	orrs	r3, r2
  403db2:	3908      	subs	r1, #8
  403db4:	60e1      	str	r1, [r4, #12]
  403db6:	607b      	str	r3, [r7, #4]
  403db8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403dbc:	f8c8 400c 	str.w	r4, [r8, #12]
  403dc0:	1082      	asrs	r2, r0, #2
  403dc2:	2401      	movs	r4, #1
  403dc4:	4094      	lsls	r4, r2
  403dc6:	429c      	cmp	r4, r3
  403dc8:	f200 808b 	bhi.w	403ee2 <_malloc_r+0x1ea>
  403dcc:	421c      	tst	r4, r3
  403dce:	d106      	bne.n	403dde <_malloc_r+0xe6>
  403dd0:	f020 0003 	bic.w	r0, r0, #3
  403dd4:	0064      	lsls	r4, r4, #1
  403dd6:	421c      	tst	r4, r3
  403dd8:	f100 0004 	add.w	r0, r0, #4
  403ddc:	d0fa      	beq.n	403dd4 <_malloc_r+0xdc>
  403dde:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403de2:	46cc      	mov	ip, r9
  403de4:	4680      	mov	r8, r0
  403de6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403dea:	459c      	cmp	ip, r3
  403dec:	d107      	bne.n	403dfe <_malloc_r+0x106>
  403dee:	e16d      	b.n	4040cc <_malloc_r+0x3d4>
  403df0:	2a00      	cmp	r2, #0
  403df2:	f280 817b 	bge.w	4040ec <_malloc_r+0x3f4>
  403df6:	68db      	ldr	r3, [r3, #12]
  403df8:	459c      	cmp	ip, r3
  403dfa:	f000 8167 	beq.w	4040cc <_malloc_r+0x3d4>
  403dfe:	6859      	ldr	r1, [r3, #4]
  403e00:	f021 0103 	bic.w	r1, r1, #3
  403e04:	1b8a      	subs	r2, r1, r6
  403e06:	2a0f      	cmp	r2, #15
  403e08:	ddf2      	ble.n	403df0 <_malloc_r+0xf8>
  403e0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403e0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403e12:	9300      	str	r3, [sp, #0]
  403e14:	199c      	adds	r4, r3, r6
  403e16:	4628      	mov	r0, r5
  403e18:	f046 0601 	orr.w	r6, r6, #1
  403e1c:	f042 0501 	orr.w	r5, r2, #1
  403e20:	605e      	str	r6, [r3, #4]
  403e22:	f8c8 c00c 	str.w	ip, [r8, #12]
  403e26:	f8cc 8008 	str.w	r8, [ip, #8]
  403e2a:	617c      	str	r4, [r7, #20]
  403e2c:	613c      	str	r4, [r7, #16]
  403e2e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403e32:	f8c4 e008 	str.w	lr, [r4, #8]
  403e36:	6065      	str	r5, [r4, #4]
  403e38:	505a      	str	r2, [r3, r1]
  403e3a:	f000 fafb 	bl	404434 <__malloc_unlock>
  403e3e:	9b00      	ldr	r3, [sp, #0]
  403e40:	f103 0408 	add.w	r4, r3, #8
  403e44:	e01e      	b.n	403e84 <_malloc_r+0x18c>
  403e46:	2910      	cmp	r1, #16
  403e48:	d820      	bhi.n	403e8c <_malloc_r+0x194>
  403e4a:	f000 faed 	bl	404428 <__malloc_lock>
  403e4e:	2610      	movs	r6, #16
  403e50:	2318      	movs	r3, #24
  403e52:	2002      	movs	r0, #2
  403e54:	4f79      	ldr	r7, [pc, #484]	; (40403c <_malloc_r+0x344>)
  403e56:	443b      	add	r3, r7
  403e58:	f1a3 0208 	sub.w	r2, r3, #8
  403e5c:	685c      	ldr	r4, [r3, #4]
  403e5e:	4294      	cmp	r4, r2
  403e60:	f000 813d 	beq.w	4040de <_malloc_r+0x3e6>
  403e64:	6863      	ldr	r3, [r4, #4]
  403e66:	68e1      	ldr	r1, [r4, #12]
  403e68:	68a6      	ldr	r6, [r4, #8]
  403e6a:	f023 0303 	bic.w	r3, r3, #3
  403e6e:	4423      	add	r3, r4
  403e70:	4628      	mov	r0, r5
  403e72:	685a      	ldr	r2, [r3, #4]
  403e74:	60f1      	str	r1, [r6, #12]
  403e76:	f042 0201 	orr.w	r2, r2, #1
  403e7a:	608e      	str	r6, [r1, #8]
  403e7c:	605a      	str	r2, [r3, #4]
  403e7e:	f000 fad9 	bl	404434 <__malloc_unlock>
  403e82:	3408      	adds	r4, #8
  403e84:	4620      	mov	r0, r4
  403e86:	b003      	add	sp, #12
  403e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e8c:	2400      	movs	r4, #0
  403e8e:	230c      	movs	r3, #12
  403e90:	4620      	mov	r0, r4
  403e92:	602b      	str	r3, [r5, #0]
  403e94:	b003      	add	sp, #12
  403e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e9a:	2040      	movs	r0, #64	; 0x40
  403e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403ea0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403ea4:	e74a      	b.n	403d3c <_malloc_r+0x44>
  403ea6:	4423      	add	r3, r4
  403ea8:	68e1      	ldr	r1, [r4, #12]
  403eaa:	685a      	ldr	r2, [r3, #4]
  403eac:	68a6      	ldr	r6, [r4, #8]
  403eae:	f042 0201 	orr.w	r2, r2, #1
  403eb2:	60f1      	str	r1, [r6, #12]
  403eb4:	4628      	mov	r0, r5
  403eb6:	608e      	str	r6, [r1, #8]
  403eb8:	605a      	str	r2, [r3, #4]
  403eba:	f000 fabb 	bl	404434 <__malloc_unlock>
  403ebe:	3408      	adds	r4, #8
  403ec0:	4620      	mov	r0, r4
  403ec2:	b003      	add	sp, #12
  403ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ec8:	4423      	add	r3, r4
  403eca:	4628      	mov	r0, r5
  403ecc:	685a      	ldr	r2, [r3, #4]
  403ece:	f042 0201 	orr.w	r2, r2, #1
  403ed2:	605a      	str	r2, [r3, #4]
  403ed4:	f000 faae 	bl	404434 <__malloc_unlock>
  403ed8:	3408      	adds	r4, #8
  403eda:	4620      	mov	r0, r4
  403edc:	b003      	add	sp, #12
  403ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ee2:	68bc      	ldr	r4, [r7, #8]
  403ee4:	6863      	ldr	r3, [r4, #4]
  403ee6:	f023 0803 	bic.w	r8, r3, #3
  403eea:	45b0      	cmp	r8, r6
  403eec:	d304      	bcc.n	403ef8 <_malloc_r+0x200>
  403eee:	eba8 0306 	sub.w	r3, r8, r6
  403ef2:	2b0f      	cmp	r3, #15
  403ef4:	f300 8085 	bgt.w	404002 <_malloc_r+0x30a>
  403ef8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404054 <_malloc_r+0x35c>
  403efc:	4b50      	ldr	r3, [pc, #320]	; (404040 <_malloc_r+0x348>)
  403efe:	f8d9 2000 	ldr.w	r2, [r9]
  403f02:	681b      	ldr	r3, [r3, #0]
  403f04:	3201      	adds	r2, #1
  403f06:	4433      	add	r3, r6
  403f08:	eb04 0a08 	add.w	sl, r4, r8
  403f0c:	f000 8155 	beq.w	4041ba <_malloc_r+0x4c2>
  403f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403f14:	330f      	adds	r3, #15
  403f16:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403f1a:	f02b 0b0f 	bic.w	fp, fp, #15
  403f1e:	4659      	mov	r1, fp
  403f20:	4628      	mov	r0, r5
  403f22:	f000 fa8d 	bl	404440 <_sbrk_r>
  403f26:	1c41      	adds	r1, r0, #1
  403f28:	4602      	mov	r2, r0
  403f2a:	f000 80fc 	beq.w	404126 <_malloc_r+0x42e>
  403f2e:	4582      	cmp	sl, r0
  403f30:	f200 80f7 	bhi.w	404122 <_malloc_r+0x42a>
  403f34:	4b43      	ldr	r3, [pc, #268]	; (404044 <_malloc_r+0x34c>)
  403f36:	6819      	ldr	r1, [r3, #0]
  403f38:	4459      	add	r1, fp
  403f3a:	6019      	str	r1, [r3, #0]
  403f3c:	f000 814d 	beq.w	4041da <_malloc_r+0x4e2>
  403f40:	f8d9 0000 	ldr.w	r0, [r9]
  403f44:	3001      	adds	r0, #1
  403f46:	bf1b      	ittet	ne
  403f48:	eba2 0a0a 	subne.w	sl, r2, sl
  403f4c:	4451      	addne	r1, sl
  403f4e:	f8c9 2000 	streq.w	r2, [r9]
  403f52:	6019      	strne	r1, [r3, #0]
  403f54:	f012 0107 	ands.w	r1, r2, #7
  403f58:	f000 8115 	beq.w	404186 <_malloc_r+0x48e>
  403f5c:	f1c1 0008 	rsb	r0, r1, #8
  403f60:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403f64:	4402      	add	r2, r0
  403f66:	3108      	adds	r1, #8
  403f68:	eb02 090b 	add.w	r9, r2, fp
  403f6c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403f70:	eba1 0909 	sub.w	r9, r1, r9
  403f74:	4649      	mov	r1, r9
  403f76:	4628      	mov	r0, r5
  403f78:	9301      	str	r3, [sp, #4]
  403f7a:	9200      	str	r2, [sp, #0]
  403f7c:	f000 fa60 	bl	404440 <_sbrk_r>
  403f80:	1c43      	adds	r3, r0, #1
  403f82:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403f86:	f000 8143 	beq.w	404210 <_malloc_r+0x518>
  403f8a:	1a80      	subs	r0, r0, r2
  403f8c:	4448      	add	r0, r9
  403f8e:	f040 0001 	orr.w	r0, r0, #1
  403f92:	6819      	ldr	r1, [r3, #0]
  403f94:	60ba      	str	r2, [r7, #8]
  403f96:	4449      	add	r1, r9
  403f98:	42bc      	cmp	r4, r7
  403f9a:	6050      	str	r0, [r2, #4]
  403f9c:	6019      	str	r1, [r3, #0]
  403f9e:	d017      	beq.n	403fd0 <_malloc_r+0x2d8>
  403fa0:	f1b8 0f0f 	cmp.w	r8, #15
  403fa4:	f240 80fb 	bls.w	40419e <_malloc_r+0x4a6>
  403fa8:	6860      	ldr	r0, [r4, #4]
  403faa:	f1a8 020c 	sub.w	r2, r8, #12
  403fae:	f022 0207 	bic.w	r2, r2, #7
  403fb2:	eb04 0e02 	add.w	lr, r4, r2
  403fb6:	f000 0001 	and.w	r0, r0, #1
  403fba:	f04f 0c05 	mov.w	ip, #5
  403fbe:	4310      	orrs	r0, r2
  403fc0:	2a0f      	cmp	r2, #15
  403fc2:	6060      	str	r0, [r4, #4]
  403fc4:	f8ce c004 	str.w	ip, [lr, #4]
  403fc8:	f8ce c008 	str.w	ip, [lr, #8]
  403fcc:	f200 8117 	bhi.w	4041fe <_malloc_r+0x506>
  403fd0:	4b1d      	ldr	r3, [pc, #116]	; (404048 <_malloc_r+0x350>)
  403fd2:	68bc      	ldr	r4, [r7, #8]
  403fd4:	681a      	ldr	r2, [r3, #0]
  403fd6:	4291      	cmp	r1, r2
  403fd8:	bf88      	it	hi
  403fda:	6019      	strhi	r1, [r3, #0]
  403fdc:	4b1b      	ldr	r3, [pc, #108]	; (40404c <_malloc_r+0x354>)
  403fde:	681a      	ldr	r2, [r3, #0]
  403fe0:	4291      	cmp	r1, r2
  403fe2:	6862      	ldr	r2, [r4, #4]
  403fe4:	bf88      	it	hi
  403fe6:	6019      	strhi	r1, [r3, #0]
  403fe8:	f022 0203 	bic.w	r2, r2, #3
  403fec:	4296      	cmp	r6, r2
  403fee:	eba2 0306 	sub.w	r3, r2, r6
  403ff2:	d801      	bhi.n	403ff8 <_malloc_r+0x300>
  403ff4:	2b0f      	cmp	r3, #15
  403ff6:	dc04      	bgt.n	404002 <_malloc_r+0x30a>
  403ff8:	4628      	mov	r0, r5
  403ffa:	f000 fa1b 	bl	404434 <__malloc_unlock>
  403ffe:	2400      	movs	r4, #0
  404000:	e740      	b.n	403e84 <_malloc_r+0x18c>
  404002:	19a2      	adds	r2, r4, r6
  404004:	f043 0301 	orr.w	r3, r3, #1
  404008:	f046 0601 	orr.w	r6, r6, #1
  40400c:	6066      	str	r6, [r4, #4]
  40400e:	4628      	mov	r0, r5
  404010:	60ba      	str	r2, [r7, #8]
  404012:	6053      	str	r3, [r2, #4]
  404014:	f000 fa0e 	bl	404434 <__malloc_unlock>
  404018:	3408      	adds	r4, #8
  40401a:	4620      	mov	r0, r4
  40401c:	b003      	add	sp, #12
  40401e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404022:	2b14      	cmp	r3, #20
  404024:	d971      	bls.n	40410a <_malloc_r+0x412>
  404026:	2b54      	cmp	r3, #84	; 0x54
  404028:	f200 80a3 	bhi.w	404172 <_malloc_r+0x47a>
  40402c:	0b33      	lsrs	r3, r6, #12
  40402e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404032:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404036:	00c3      	lsls	r3, r0, #3
  404038:	e680      	b.n	403d3c <_malloc_r+0x44>
  40403a:	bf00      	nop
  40403c:	20400450 	.word	0x20400450
  404040:	20400ddc 	.word	0x20400ddc
  404044:	20400dac 	.word	0x20400dac
  404048:	20400dd4 	.word	0x20400dd4
  40404c:	20400dd8 	.word	0x20400dd8
  404050:	20400458 	.word	0x20400458
  404054:	20400858 	.word	0x20400858
  404058:	0a5a      	lsrs	r2, r3, #9
  40405a:	2a04      	cmp	r2, #4
  40405c:	d95b      	bls.n	404116 <_malloc_r+0x41e>
  40405e:	2a14      	cmp	r2, #20
  404060:	f200 80ae 	bhi.w	4041c0 <_malloc_r+0x4c8>
  404064:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404068:	00c9      	lsls	r1, r1, #3
  40406a:	325b      	adds	r2, #91	; 0x5b
  40406c:	eb07 0c01 	add.w	ip, r7, r1
  404070:	5879      	ldr	r1, [r7, r1]
  404072:	f1ac 0c08 	sub.w	ip, ip, #8
  404076:	458c      	cmp	ip, r1
  404078:	f000 8088 	beq.w	40418c <_malloc_r+0x494>
  40407c:	684a      	ldr	r2, [r1, #4]
  40407e:	f022 0203 	bic.w	r2, r2, #3
  404082:	4293      	cmp	r3, r2
  404084:	d273      	bcs.n	40416e <_malloc_r+0x476>
  404086:	6889      	ldr	r1, [r1, #8]
  404088:	458c      	cmp	ip, r1
  40408a:	d1f7      	bne.n	40407c <_malloc_r+0x384>
  40408c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404090:	687b      	ldr	r3, [r7, #4]
  404092:	60e2      	str	r2, [r4, #12]
  404094:	f8c4 c008 	str.w	ip, [r4, #8]
  404098:	6094      	str	r4, [r2, #8]
  40409a:	f8cc 400c 	str.w	r4, [ip, #12]
  40409e:	e68f      	b.n	403dc0 <_malloc_r+0xc8>
  4040a0:	19a1      	adds	r1, r4, r6
  4040a2:	f046 0c01 	orr.w	ip, r6, #1
  4040a6:	f042 0601 	orr.w	r6, r2, #1
  4040aa:	f8c4 c004 	str.w	ip, [r4, #4]
  4040ae:	4628      	mov	r0, r5
  4040b0:	6179      	str	r1, [r7, #20]
  4040b2:	6139      	str	r1, [r7, #16]
  4040b4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4040b8:	f8c1 e008 	str.w	lr, [r1, #8]
  4040bc:	604e      	str	r6, [r1, #4]
  4040be:	50e2      	str	r2, [r4, r3]
  4040c0:	f000 f9b8 	bl	404434 <__malloc_unlock>
  4040c4:	3408      	adds	r4, #8
  4040c6:	e6dd      	b.n	403e84 <_malloc_r+0x18c>
  4040c8:	687b      	ldr	r3, [r7, #4]
  4040ca:	e679      	b.n	403dc0 <_malloc_r+0xc8>
  4040cc:	f108 0801 	add.w	r8, r8, #1
  4040d0:	f018 0f03 	tst.w	r8, #3
  4040d4:	f10c 0c08 	add.w	ip, ip, #8
  4040d8:	f47f ae85 	bne.w	403de6 <_malloc_r+0xee>
  4040dc:	e02d      	b.n	40413a <_malloc_r+0x442>
  4040de:	68dc      	ldr	r4, [r3, #12]
  4040e0:	42a3      	cmp	r3, r4
  4040e2:	bf08      	it	eq
  4040e4:	3002      	addeq	r0, #2
  4040e6:	f43f ae3e 	beq.w	403d66 <_malloc_r+0x6e>
  4040ea:	e6bb      	b.n	403e64 <_malloc_r+0x16c>
  4040ec:	4419      	add	r1, r3
  4040ee:	461c      	mov	r4, r3
  4040f0:	684a      	ldr	r2, [r1, #4]
  4040f2:	68db      	ldr	r3, [r3, #12]
  4040f4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4040f8:	f042 0201 	orr.w	r2, r2, #1
  4040fc:	604a      	str	r2, [r1, #4]
  4040fe:	4628      	mov	r0, r5
  404100:	60f3      	str	r3, [r6, #12]
  404102:	609e      	str	r6, [r3, #8]
  404104:	f000 f996 	bl	404434 <__malloc_unlock>
  404108:	e6bc      	b.n	403e84 <_malloc_r+0x18c>
  40410a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40410e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404112:	00c3      	lsls	r3, r0, #3
  404114:	e612      	b.n	403d3c <_malloc_r+0x44>
  404116:	099a      	lsrs	r2, r3, #6
  404118:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40411c:	00c9      	lsls	r1, r1, #3
  40411e:	3238      	adds	r2, #56	; 0x38
  404120:	e7a4      	b.n	40406c <_malloc_r+0x374>
  404122:	42bc      	cmp	r4, r7
  404124:	d054      	beq.n	4041d0 <_malloc_r+0x4d8>
  404126:	68bc      	ldr	r4, [r7, #8]
  404128:	6862      	ldr	r2, [r4, #4]
  40412a:	f022 0203 	bic.w	r2, r2, #3
  40412e:	e75d      	b.n	403fec <_malloc_r+0x2f4>
  404130:	f859 3908 	ldr.w	r3, [r9], #-8
  404134:	4599      	cmp	r9, r3
  404136:	f040 8086 	bne.w	404246 <_malloc_r+0x54e>
  40413a:	f010 0f03 	tst.w	r0, #3
  40413e:	f100 30ff 	add.w	r0, r0, #4294967295
  404142:	d1f5      	bne.n	404130 <_malloc_r+0x438>
  404144:	687b      	ldr	r3, [r7, #4]
  404146:	ea23 0304 	bic.w	r3, r3, r4
  40414a:	607b      	str	r3, [r7, #4]
  40414c:	0064      	lsls	r4, r4, #1
  40414e:	429c      	cmp	r4, r3
  404150:	f63f aec7 	bhi.w	403ee2 <_malloc_r+0x1ea>
  404154:	2c00      	cmp	r4, #0
  404156:	f43f aec4 	beq.w	403ee2 <_malloc_r+0x1ea>
  40415a:	421c      	tst	r4, r3
  40415c:	4640      	mov	r0, r8
  40415e:	f47f ae3e 	bne.w	403dde <_malloc_r+0xe6>
  404162:	0064      	lsls	r4, r4, #1
  404164:	421c      	tst	r4, r3
  404166:	f100 0004 	add.w	r0, r0, #4
  40416a:	d0fa      	beq.n	404162 <_malloc_r+0x46a>
  40416c:	e637      	b.n	403dde <_malloc_r+0xe6>
  40416e:	468c      	mov	ip, r1
  404170:	e78c      	b.n	40408c <_malloc_r+0x394>
  404172:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404176:	d815      	bhi.n	4041a4 <_malloc_r+0x4ac>
  404178:	0bf3      	lsrs	r3, r6, #15
  40417a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40417e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404182:	00c3      	lsls	r3, r0, #3
  404184:	e5da      	b.n	403d3c <_malloc_r+0x44>
  404186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40418a:	e6ed      	b.n	403f68 <_malloc_r+0x270>
  40418c:	687b      	ldr	r3, [r7, #4]
  40418e:	1092      	asrs	r2, r2, #2
  404190:	2101      	movs	r1, #1
  404192:	fa01 f202 	lsl.w	r2, r1, r2
  404196:	4313      	orrs	r3, r2
  404198:	607b      	str	r3, [r7, #4]
  40419a:	4662      	mov	r2, ip
  40419c:	e779      	b.n	404092 <_malloc_r+0x39a>
  40419e:	2301      	movs	r3, #1
  4041a0:	6053      	str	r3, [r2, #4]
  4041a2:	e729      	b.n	403ff8 <_malloc_r+0x300>
  4041a4:	f240 5254 	movw	r2, #1364	; 0x554
  4041a8:	4293      	cmp	r3, r2
  4041aa:	d822      	bhi.n	4041f2 <_malloc_r+0x4fa>
  4041ac:	0cb3      	lsrs	r3, r6, #18
  4041ae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4041b2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4041b6:	00c3      	lsls	r3, r0, #3
  4041b8:	e5c0      	b.n	403d3c <_malloc_r+0x44>
  4041ba:	f103 0b10 	add.w	fp, r3, #16
  4041be:	e6ae      	b.n	403f1e <_malloc_r+0x226>
  4041c0:	2a54      	cmp	r2, #84	; 0x54
  4041c2:	d829      	bhi.n	404218 <_malloc_r+0x520>
  4041c4:	0b1a      	lsrs	r2, r3, #12
  4041c6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4041ca:	00c9      	lsls	r1, r1, #3
  4041cc:	326e      	adds	r2, #110	; 0x6e
  4041ce:	e74d      	b.n	40406c <_malloc_r+0x374>
  4041d0:	4b20      	ldr	r3, [pc, #128]	; (404254 <_malloc_r+0x55c>)
  4041d2:	6819      	ldr	r1, [r3, #0]
  4041d4:	4459      	add	r1, fp
  4041d6:	6019      	str	r1, [r3, #0]
  4041d8:	e6b2      	b.n	403f40 <_malloc_r+0x248>
  4041da:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4041de:	2800      	cmp	r0, #0
  4041e0:	f47f aeae 	bne.w	403f40 <_malloc_r+0x248>
  4041e4:	eb08 030b 	add.w	r3, r8, fp
  4041e8:	68ba      	ldr	r2, [r7, #8]
  4041ea:	f043 0301 	orr.w	r3, r3, #1
  4041ee:	6053      	str	r3, [r2, #4]
  4041f0:	e6ee      	b.n	403fd0 <_malloc_r+0x2d8>
  4041f2:	207f      	movs	r0, #127	; 0x7f
  4041f4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4041f8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4041fc:	e59e      	b.n	403d3c <_malloc_r+0x44>
  4041fe:	f104 0108 	add.w	r1, r4, #8
  404202:	4628      	mov	r0, r5
  404204:	9300      	str	r3, [sp, #0]
  404206:	f001 fbe5 	bl	4059d4 <_free_r>
  40420a:	9b00      	ldr	r3, [sp, #0]
  40420c:	6819      	ldr	r1, [r3, #0]
  40420e:	e6df      	b.n	403fd0 <_malloc_r+0x2d8>
  404210:	2001      	movs	r0, #1
  404212:	f04f 0900 	mov.w	r9, #0
  404216:	e6bc      	b.n	403f92 <_malloc_r+0x29a>
  404218:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40421c:	d805      	bhi.n	40422a <_malloc_r+0x532>
  40421e:	0bda      	lsrs	r2, r3, #15
  404220:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404224:	00c9      	lsls	r1, r1, #3
  404226:	3277      	adds	r2, #119	; 0x77
  404228:	e720      	b.n	40406c <_malloc_r+0x374>
  40422a:	f240 5154 	movw	r1, #1364	; 0x554
  40422e:	428a      	cmp	r2, r1
  404230:	d805      	bhi.n	40423e <_malloc_r+0x546>
  404232:	0c9a      	lsrs	r2, r3, #18
  404234:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404238:	00c9      	lsls	r1, r1, #3
  40423a:	327c      	adds	r2, #124	; 0x7c
  40423c:	e716      	b.n	40406c <_malloc_r+0x374>
  40423e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404242:	227e      	movs	r2, #126	; 0x7e
  404244:	e712      	b.n	40406c <_malloc_r+0x374>
  404246:	687b      	ldr	r3, [r7, #4]
  404248:	e780      	b.n	40414c <_malloc_r+0x454>
  40424a:	08f0      	lsrs	r0, r6, #3
  40424c:	f106 0308 	add.w	r3, r6, #8
  404250:	e600      	b.n	403e54 <_malloc_r+0x15c>
  404252:	bf00      	nop
  404254:	20400dac 	.word	0x20400dac

00404258 <memcpy>:
  404258:	4684      	mov	ip, r0
  40425a:	ea41 0300 	orr.w	r3, r1, r0
  40425e:	f013 0303 	ands.w	r3, r3, #3
  404262:	d16d      	bne.n	404340 <memcpy+0xe8>
  404264:	3a40      	subs	r2, #64	; 0x40
  404266:	d341      	bcc.n	4042ec <memcpy+0x94>
  404268:	f851 3b04 	ldr.w	r3, [r1], #4
  40426c:	f840 3b04 	str.w	r3, [r0], #4
  404270:	f851 3b04 	ldr.w	r3, [r1], #4
  404274:	f840 3b04 	str.w	r3, [r0], #4
  404278:	f851 3b04 	ldr.w	r3, [r1], #4
  40427c:	f840 3b04 	str.w	r3, [r0], #4
  404280:	f851 3b04 	ldr.w	r3, [r1], #4
  404284:	f840 3b04 	str.w	r3, [r0], #4
  404288:	f851 3b04 	ldr.w	r3, [r1], #4
  40428c:	f840 3b04 	str.w	r3, [r0], #4
  404290:	f851 3b04 	ldr.w	r3, [r1], #4
  404294:	f840 3b04 	str.w	r3, [r0], #4
  404298:	f851 3b04 	ldr.w	r3, [r1], #4
  40429c:	f840 3b04 	str.w	r3, [r0], #4
  4042a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042a4:	f840 3b04 	str.w	r3, [r0], #4
  4042a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042ac:	f840 3b04 	str.w	r3, [r0], #4
  4042b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042b4:	f840 3b04 	str.w	r3, [r0], #4
  4042b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042bc:	f840 3b04 	str.w	r3, [r0], #4
  4042c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042c4:	f840 3b04 	str.w	r3, [r0], #4
  4042c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042cc:	f840 3b04 	str.w	r3, [r0], #4
  4042d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d4:	f840 3b04 	str.w	r3, [r0], #4
  4042d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042dc:	f840 3b04 	str.w	r3, [r0], #4
  4042e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042e4:	f840 3b04 	str.w	r3, [r0], #4
  4042e8:	3a40      	subs	r2, #64	; 0x40
  4042ea:	d2bd      	bcs.n	404268 <memcpy+0x10>
  4042ec:	3230      	adds	r2, #48	; 0x30
  4042ee:	d311      	bcc.n	404314 <memcpy+0xbc>
  4042f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4042f4:	f840 3b04 	str.w	r3, [r0], #4
  4042f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4042fc:	f840 3b04 	str.w	r3, [r0], #4
  404300:	f851 3b04 	ldr.w	r3, [r1], #4
  404304:	f840 3b04 	str.w	r3, [r0], #4
  404308:	f851 3b04 	ldr.w	r3, [r1], #4
  40430c:	f840 3b04 	str.w	r3, [r0], #4
  404310:	3a10      	subs	r2, #16
  404312:	d2ed      	bcs.n	4042f0 <memcpy+0x98>
  404314:	320c      	adds	r2, #12
  404316:	d305      	bcc.n	404324 <memcpy+0xcc>
  404318:	f851 3b04 	ldr.w	r3, [r1], #4
  40431c:	f840 3b04 	str.w	r3, [r0], #4
  404320:	3a04      	subs	r2, #4
  404322:	d2f9      	bcs.n	404318 <memcpy+0xc0>
  404324:	3204      	adds	r2, #4
  404326:	d008      	beq.n	40433a <memcpy+0xe2>
  404328:	07d2      	lsls	r2, r2, #31
  40432a:	bf1c      	itt	ne
  40432c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404330:	f800 3b01 	strbne.w	r3, [r0], #1
  404334:	d301      	bcc.n	40433a <memcpy+0xe2>
  404336:	880b      	ldrh	r3, [r1, #0]
  404338:	8003      	strh	r3, [r0, #0]
  40433a:	4660      	mov	r0, ip
  40433c:	4770      	bx	lr
  40433e:	bf00      	nop
  404340:	2a08      	cmp	r2, #8
  404342:	d313      	bcc.n	40436c <memcpy+0x114>
  404344:	078b      	lsls	r3, r1, #30
  404346:	d08d      	beq.n	404264 <memcpy+0xc>
  404348:	f010 0303 	ands.w	r3, r0, #3
  40434c:	d08a      	beq.n	404264 <memcpy+0xc>
  40434e:	f1c3 0304 	rsb	r3, r3, #4
  404352:	1ad2      	subs	r2, r2, r3
  404354:	07db      	lsls	r3, r3, #31
  404356:	bf1c      	itt	ne
  404358:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40435c:	f800 3b01 	strbne.w	r3, [r0], #1
  404360:	d380      	bcc.n	404264 <memcpy+0xc>
  404362:	f831 3b02 	ldrh.w	r3, [r1], #2
  404366:	f820 3b02 	strh.w	r3, [r0], #2
  40436a:	e77b      	b.n	404264 <memcpy+0xc>
  40436c:	3a04      	subs	r2, #4
  40436e:	d3d9      	bcc.n	404324 <memcpy+0xcc>
  404370:	3a01      	subs	r2, #1
  404372:	f811 3b01 	ldrb.w	r3, [r1], #1
  404376:	f800 3b01 	strb.w	r3, [r0], #1
  40437a:	d2f9      	bcs.n	404370 <memcpy+0x118>
  40437c:	780b      	ldrb	r3, [r1, #0]
  40437e:	7003      	strb	r3, [r0, #0]
  404380:	784b      	ldrb	r3, [r1, #1]
  404382:	7043      	strb	r3, [r0, #1]
  404384:	788b      	ldrb	r3, [r1, #2]
  404386:	7083      	strb	r3, [r0, #2]
  404388:	4660      	mov	r0, ip
  40438a:	4770      	bx	lr

0040438c <memset>:
  40438c:	b470      	push	{r4, r5, r6}
  40438e:	0786      	lsls	r6, r0, #30
  404390:	d046      	beq.n	404420 <memset+0x94>
  404392:	1e54      	subs	r4, r2, #1
  404394:	2a00      	cmp	r2, #0
  404396:	d041      	beq.n	40441c <memset+0x90>
  404398:	b2ca      	uxtb	r2, r1
  40439a:	4603      	mov	r3, r0
  40439c:	e002      	b.n	4043a4 <memset+0x18>
  40439e:	f114 34ff 	adds.w	r4, r4, #4294967295
  4043a2:	d33b      	bcc.n	40441c <memset+0x90>
  4043a4:	f803 2b01 	strb.w	r2, [r3], #1
  4043a8:	079d      	lsls	r5, r3, #30
  4043aa:	d1f8      	bne.n	40439e <memset+0x12>
  4043ac:	2c03      	cmp	r4, #3
  4043ae:	d92e      	bls.n	40440e <memset+0x82>
  4043b0:	b2cd      	uxtb	r5, r1
  4043b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4043b6:	2c0f      	cmp	r4, #15
  4043b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4043bc:	d919      	bls.n	4043f2 <memset+0x66>
  4043be:	f103 0210 	add.w	r2, r3, #16
  4043c2:	4626      	mov	r6, r4
  4043c4:	3e10      	subs	r6, #16
  4043c6:	2e0f      	cmp	r6, #15
  4043c8:	f842 5c10 	str.w	r5, [r2, #-16]
  4043cc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4043d0:	f842 5c08 	str.w	r5, [r2, #-8]
  4043d4:	f842 5c04 	str.w	r5, [r2, #-4]
  4043d8:	f102 0210 	add.w	r2, r2, #16
  4043dc:	d8f2      	bhi.n	4043c4 <memset+0x38>
  4043de:	f1a4 0210 	sub.w	r2, r4, #16
  4043e2:	f022 020f 	bic.w	r2, r2, #15
  4043e6:	f004 040f 	and.w	r4, r4, #15
  4043ea:	3210      	adds	r2, #16
  4043ec:	2c03      	cmp	r4, #3
  4043ee:	4413      	add	r3, r2
  4043f0:	d90d      	bls.n	40440e <memset+0x82>
  4043f2:	461e      	mov	r6, r3
  4043f4:	4622      	mov	r2, r4
  4043f6:	3a04      	subs	r2, #4
  4043f8:	2a03      	cmp	r2, #3
  4043fa:	f846 5b04 	str.w	r5, [r6], #4
  4043fe:	d8fa      	bhi.n	4043f6 <memset+0x6a>
  404400:	1f22      	subs	r2, r4, #4
  404402:	f022 0203 	bic.w	r2, r2, #3
  404406:	3204      	adds	r2, #4
  404408:	4413      	add	r3, r2
  40440a:	f004 0403 	and.w	r4, r4, #3
  40440e:	b12c      	cbz	r4, 40441c <memset+0x90>
  404410:	b2c9      	uxtb	r1, r1
  404412:	441c      	add	r4, r3
  404414:	f803 1b01 	strb.w	r1, [r3], #1
  404418:	429c      	cmp	r4, r3
  40441a:	d1fb      	bne.n	404414 <memset+0x88>
  40441c:	bc70      	pop	{r4, r5, r6}
  40441e:	4770      	bx	lr
  404420:	4614      	mov	r4, r2
  404422:	4603      	mov	r3, r0
  404424:	e7c2      	b.n	4043ac <memset+0x20>
  404426:	bf00      	nop

00404428 <__malloc_lock>:
  404428:	4801      	ldr	r0, [pc, #4]	; (404430 <__malloc_lock+0x8>)
  40442a:	f001 bd6d 	b.w	405f08 <__retarget_lock_acquire_recursive>
  40442e:	bf00      	nop
  404430:	20400e48 	.word	0x20400e48

00404434 <__malloc_unlock>:
  404434:	4801      	ldr	r0, [pc, #4]	; (40443c <__malloc_unlock+0x8>)
  404436:	f001 bd69 	b.w	405f0c <__retarget_lock_release_recursive>
  40443a:	bf00      	nop
  40443c:	20400e48 	.word	0x20400e48

00404440 <_sbrk_r>:
  404440:	b538      	push	{r3, r4, r5, lr}
  404442:	4c07      	ldr	r4, [pc, #28]	; (404460 <_sbrk_r+0x20>)
  404444:	2300      	movs	r3, #0
  404446:	4605      	mov	r5, r0
  404448:	4608      	mov	r0, r1
  40444a:	6023      	str	r3, [r4, #0]
  40444c:	f7fd f964 	bl	401718 <_sbrk>
  404450:	1c43      	adds	r3, r0, #1
  404452:	d000      	beq.n	404456 <_sbrk_r+0x16>
  404454:	bd38      	pop	{r3, r4, r5, pc}
  404456:	6823      	ldr	r3, [r4, #0]
  404458:	2b00      	cmp	r3, #0
  40445a:	d0fb      	beq.n	404454 <_sbrk_r+0x14>
  40445c:	602b      	str	r3, [r5, #0]
  40445e:	bd38      	pop	{r3, r4, r5, pc}
  404460:	20400e5c 	.word	0x20400e5c

00404464 <setbuf>:
  404464:	2900      	cmp	r1, #0
  404466:	bf0c      	ite	eq
  404468:	2202      	moveq	r2, #2
  40446a:	2200      	movne	r2, #0
  40446c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404470:	f000 b800 	b.w	404474 <setvbuf>

00404474 <setvbuf>:
  404474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404478:	4c61      	ldr	r4, [pc, #388]	; (404600 <setvbuf+0x18c>)
  40447a:	6825      	ldr	r5, [r4, #0]
  40447c:	b083      	sub	sp, #12
  40447e:	4604      	mov	r4, r0
  404480:	460f      	mov	r7, r1
  404482:	4690      	mov	r8, r2
  404484:	461e      	mov	r6, r3
  404486:	b115      	cbz	r5, 40448e <setvbuf+0x1a>
  404488:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40448a:	2b00      	cmp	r3, #0
  40448c:	d064      	beq.n	404558 <setvbuf+0xe4>
  40448e:	f1b8 0f02 	cmp.w	r8, #2
  404492:	d006      	beq.n	4044a2 <setvbuf+0x2e>
  404494:	f1b8 0f01 	cmp.w	r8, #1
  404498:	f200 809f 	bhi.w	4045da <setvbuf+0x166>
  40449c:	2e00      	cmp	r6, #0
  40449e:	f2c0 809c 	blt.w	4045da <setvbuf+0x166>
  4044a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4044a4:	07d8      	lsls	r0, r3, #31
  4044a6:	d534      	bpl.n	404512 <setvbuf+0x9e>
  4044a8:	4621      	mov	r1, r4
  4044aa:	4628      	mov	r0, r5
  4044ac:	f001 f914 	bl	4056d8 <_fflush_r>
  4044b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4044b2:	b141      	cbz	r1, 4044c6 <setvbuf+0x52>
  4044b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4044b8:	4299      	cmp	r1, r3
  4044ba:	d002      	beq.n	4044c2 <setvbuf+0x4e>
  4044bc:	4628      	mov	r0, r5
  4044be:	f001 fa89 	bl	4059d4 <_free_r>
  4044c2:	2300      	movs	r3, #0
  4044c4:	6323      	str	r3, [r4, #48]	; 0x30
  4044c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044ca:	2200      	movs	r2, #0
  4044cc:	61a2      	str	r2, [r4, #24]
  4044ce:	6062      	str	r2, [r4, #4]
  4044d0:	061a      	lsls	r2, r3, #24
  4044d2:	d43a      	bmi.n	40454a <setvbuf+0xd6>
  4044d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4044d8:	f023 0303 	bic.w	r3, r3, #3
  4044dc:	f1b8 0f02 	cmp.w	r8, #2
  4044e0:	81a3      	strh	r3, [r4, #12]
  4044e2:	d01d      	beq.n	404520 <setvbuf+0xac>
  4044e4:	ab01      	add	r3, sp, #4
  4044e6:	466a      	mov	r2, sp
  4044e8:	4621      	mov	r1, r4
  4044ea:	4628      	mov	r0, r5
  4044ec:	f001 fd10 	bl	405f10 <__swhatbuf_r>
  4044f0:	89a3      	ldrh	r3, [r4, #12]
  4044f2:	4318      	orrs	r0, r3
  4044f4:	81a0      	strh	r0, [r4, #12]
  4044f6:	2e00      	cmp	r6, #0
  4044f8:	d132      	bne.n	404560 <setvbuf+0xec>
  4044fa:	9e00      	ldr	r6, [sp, #0]
  4044fc:	4630      	mov	r0, r6
  4044fe:	f7ff fbeb 	bl	403cd8 <malloc>
  404502:	4607      	mov	r7, r0
  404504:	2800      	cmp	r0, #0
  404506:	d06b      	beq.n	4045e0 <setvbuf+0x16c>
  404508:	89a3      	ldrh	r3, [r4, #12]
  40450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40450e:	81a3      	strh	r3, [r4, #12]
  404510:	e028      	b.n	404564 <setvbuf+0xf0>
  404512:	89a3      	ldrh	r3, [r4, #12]
  404514:	0599      	lsls	r1, r3, #22
  404516:	d4c7      	bmi.n	4044a8 <setvbuf+0x34>
  404518:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40451a:	f001 fcf5 	bl	405f08 <__retarget_lock_acquire_recursive>
  40451e:	e7c3      	b.n	4044a8 <setvbuf+0x34>
  404520:	2500      	movs	r5, #0
  404522:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404524:	2600      	movs	r6, #0
  404526:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40452a:	f043 0302 	orr.w	r3, r3, #2
  40452e:	2001      	movs	r0, #1
  404530:	60a6      	str	r6, [r4, #8]
  404532:	07ce      	lsls	r6, r1, #31
  404534:	81a3      	strh	r3, [r4, #12]
  404536:	6022      	str	r2, [r4, #0]
  404538:	6122      	str	r2, [r4, #16]
  40453a:	6160      	str	r0, [r4, #20]
  40453c:	d401      	bmi.n	404542 <setvbuf+0xce>
  40453e:	0598      	lsls	r0, r3, #22
  404540:	d53e      	bpl.n	4045c0 <setvbuf+0x14c>
  404542:	4628      	mov	r0, r5
  404544:	b003      	add	sp, #12
  404546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40454a:	6921      	ldr	r1, [r4, #16]
  40454c:	4628      	mov	r0, r5
  40454e:	f001 fa41 	bl	4059d4 <_free_r>
  404552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404556:	e7bd      	b.n	4044d4 <setvbuf+0x60>
  404558:	4628      	mov	r0, r5
  40455a:	f001 f915 	bl	405788 <__sinit>
  40455e:	e796      	b.n	40448e <setvbuf+0x1a>
  404560:	2f00      	cmp	r7, #0
  404562:	d0cb      	beq.n	4044fc <setvbuf+0x88>
  404564:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404566:	2b00      	cmp	r3, #0
  404568:	d033      	beq.n	4045d2 <setvbuf+0x15e>
  40456a:	9b00      	ldr	r3, [sp, #0]
  40456c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404570:	6027      	str	r7, [r4, #0]
  404572:	429e      	cmp	r6, r3
  404574:	bf1c      	itt	ne
  404576:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40457a:	81a2      	strhne	r2, [r4, #12]
  40457c:	f1b8 0f01 	cmp.w	r8, #1
  404580:	bf04      	itt	eq
  404582:	f042 0201 	orreq.w	r2, r2, #1
  404586:	81a2      	strheq	r2, [r4, #12]
  404588:	b292      	uxth	r2, r2
  40458a:	f012 0308 	ands.w	r3, r2, #8
  40458e:	6127      	str	r7, [r4, #16]
  404590:	6166      	str	r6, [r4, #20]
  404592:	d00e      	beq.n	4045b2 <setvbuf+0x13e>
  404594:	07d1      	lsls	r1, r2, #31
  404596:	d51a      	bpl.n	4045ce <setvbuf+0x15a>
  404598:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40459a:	4276      	negs	r6, r6
  40459c:	2300      	movs	r3, #0
  40459e:	f015 0501 	ands.w	r5, r5, #1
  4045a2:	61a6      	str	r6, [r4, #24]
  4045a4:	60a3      	str	r3, [r4, #8]
  4045a6:	d009      	beq.n	4045bc <setvbuf+0x148>
  4045a8:	2500      	movs	r5, #0
  4045aa:	4628      	mov	r0, r5
  4045ac:	b003      	add	sp, #12
  4045ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4045b2:	60a3      	str	r3, [r4, #8]
  4045b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4045b6:	f015 0501 	ands.w	r5, r5, #1
  4045ba:	d1f5      	bne.n	4045a8 <setvbuf+0x134>
  4045bc:	0593      	lsls	r3, r2, #22
  4045be:	d4c0      	bmi.n	404542 <setvbuf+0xce>
  4045c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4045c2:	f001 fca3 	bl	405f0c <__retarget_lock_release_recursive>
  4045c6:	4628      	mov	r0, r5
  4045c8:	b003      	add	sp, #12
  4045ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4045ce:	60a6      	str	r6, [r4, #8]
  4045d0:	e7f0      	b.n	4045b4 <setvbuf+0x140>
  4045d2:	4628      	mov	r0, r5
  4045d4:	f001 f8d8 	bl	405788 <__sinit>
  4045d8:	e7c7      	b.n	40456a <setvbuf+0xf6>
  4045da:	f04f 35ff 	mov.w	r5, #4294967295
  4045de:	e7b0      	b.n	404542 <setvbuf+0xce>
  4045e0:	f8dd 9000 	ldr.w	r9, [sp]
  4045e4:	45b1      	cmp	r9, r6
  4045e6:	d004      	beq.n	4045f2 <setvbuf+0x17e>
  4045e8:	4648      	mov	r0, r9
  4045ea:	f7ff fb75 	bl	403cd8 <malloc>
  4045ee:	4607      	mov	r7, r0
  4045f0:	b920      	cbnz	r0, 4045fc <setvbuf+0x188>
  4045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045f6:	f04f 35ff 	mov.w	r5, #4294967295
  4045fa:	e792      	b.n	404522 <setvbuf+0xae>
  4045fc:	464e      	mov	r6, r9
  4045fe:	e783      	b.n	404508 <setvbuf+0x94>
  404600:	20400024 	.word	0x20400024
	...

00404640 <strlen>:
  404640:	f890 f000 	pld	[r0]
  404644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404648:	f020 0107 	bic.w	r1, r0, #7
  40464c:	f06f 0c00 	mvn.w	ip, #0
  404650:	f010 0407 	ands.w	r4, r0, #7
  404654:	f891 f020 	pld	[r1, #32]
  404658:	f040 8049 	bne.w	4046ee <strlen+0xae>
  40465c:	f04f 0400 	mov.w	r4, #0
  404660:	f06f 0007 	mvn.w	r0, #7
  404664:	e9d1 2300 	ldrd	r2, r3, [r1]
  404668:	f891 f040 	pld	[r1, #64]	; 0x40
  40466c:	f100 0008 	add.w	r0, r0, #8
  404670:	fa82 f24c 	uadd8	r2, r2, ip
  404674:	faa4 f28c 	sel	r2, r4, ip
  404678:	fa83 f34c 	uadd8	r3, r3, ip
  40467c:	faa2 f38c 	sel	r3, r2, ip
  404680:	bb4b      	cbnz	r3, 4046d6 <strlen+0x96>
  404682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404686:	fa82 f24c 	uadd8	r2, r2, ip
  40468a:	f100 0008 	add.w	r0, r0, #8
  40468e:	faa4 f28c 	sel	r2, r4, ip
  404692:	fa83 f34c 	uadd8	r3, r3, ip
  404696:	faa2 f38c 	sel	r3, r2, ip
  40469a:	b9e3      	cbnz	r3, 4046d6 <strlen+0x96>
  40469c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4046a0:	fa82 f24c 	uadd8	r2, r2, ip
  4046a4:	f100 0008 	add.w	r0, r0, #8
  4046a8:	faa4 f28c 	sel	r2, r4, ip
  4046ac:	fa83 f34c 	uadd8	r3, r3, ip
  4046b0:	faa2 f38c 	sel	r3, r2, ip
  4046b4:	b97b      	cbnz	r3, 4046d6 <strlen+0x96>
  4046b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4046ba:	f101 0120 	add.w	r1, r1, #32
  4046be:	fa82 f24c 	uadd8	r2, r2, ip
  4046c2:	f100 0008 	add.w	r0, r0, #8
  4046c6:	faa4 f28c 	sel	r2, r4, ip
  4046ca:	fa83 f34c 	uadd8	r3, r3, ip
  4046ce:	faa2 f38c 	sel	r3, r2, ip
  4046d2:	2b00      	cmp	r3, #0
  4046d4:	d0c6      	beq.n	404664 <strlen+0x24>
  4046d6:	2a00      	cmp	r2, #0
  4046d8:	bf04      	itt	eq
  4046da:	3004      	addeq	r0, #4
  4046dc:	461a      	moveq	r2, r3
  4046de:	ba12      	rev	r2, r2
  4046e0:	fab2 f282 	clz	r2, r2
  4046e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4046e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4046ec:	4770      	bx	lr
  4046ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4046f2:	f004 0503 	and.w	r5, r4, #3
  4046f6:	f1c4 0000 	rsb	r0, r4, #0
  4046fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4046fe:	f014 0f04 	tst.w	r4, #4
  404702:	f891 f040 	pld	[r1, #64]	; 0x40
  404706:	fa0c f505 	lsl.w	r5, ip, r5
  40470a:	ea62 0205 	orn	r2, r2, r5
  40470e:	bf1c      	itt	ne
  404710:	ea63 0305 	ornne	r3, r3, r5
  404714:	4662      	movne	r2, ip
  404716:	f04f 0400 	mov.w	r4, #0
  40471a:	e7a9      	b.n	404670 <strlen+0x30>

0040471c <__sprint_r.part.0>:
  40471c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404720:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404722:	049c      	lsls	r4, r3, #18
  404724:	4693      	mov	fp, r2
  404726:	d52f      	bpl.n	404788 <__sprint_r.part.0+0x6c>
  404728:	6893      	ldr	r3, [r2, #8]
  40472a:	6812      	ldr	r2, [r2, #0]
  40472c:	b353      	cbz	r3, 404784 <__sprint_r.part.0+0x68>
  40472e:	460e      	mov	r6, r1
  404730:	4607      	mov	r7, r0
  404732:	f102 0908 	add.w	r9, r2, #8
  404736:	e919 0420 	ldmdb	r9, {r5, sl}
  40473a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40473e:	d017      	beq.n	404770 <__sprint_r.part.0+0x54>
  404740:	3d04      	subs	r5, #4
  404742:	2400      	movs	r4, #0
  404744:	e001      	b.n	40474a <__sprint_r.part.0+0x2e>
  404746:	45a0      	cmp	r8, r4
  404748:	d010      	beq.n	40476c <__sprint_r.part.0+0x50>
  40474a:	4632      	mov	r2, r6
  40474c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404750:	4638      	mov	r0, r7
  404752:	f001 f8bb 	bl	4058cc <_fputwc_r>
  404756:	1c43      	adds	r3, r0, #1
  404758:	f104 0401 	add.w	r4, r4, #1
  40475c:	d1f3      	bne.n	404746 <__sprint_r.part.0+0x2a>
  40475e:	2300      	movs	r3, #0
  404760:	f8cb 3008 	str.w	r3, [fp, #8]
  404764:	f8cb 3004 	str.w	r3, [fp, #4]
  404768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40476c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404770:	f02a 0a03 	bic.w	sl, sl, #3
  404774:	eba3 030a 	sub.w	r3, r3, sl
  404778:	f8cb 3008 	str.w	r3, [fp, #8]
  40477c:	f109 0908 	add.w	r9, r9, #8
  404780:	2b00      	cmp	r3, #0
  404782:	d1d8      	bne.n	404736 <__sprint_r.part.0+0x1a>
  404784:	2000      	movs	r0, #0
  404786:	e7ea      	b.n	40475e <__sprint_r.part.0+0x42>
  404788:	f001 fa0a 	bl	405ba0 <__sfvwrite_r>
  40478c:	2300      	movs	r3, #0
  40478e:	f8cb 3008 	str.w	r3, [fp, #8]
  404792:	f8cb 3004 	str.w	r3, [fp, #4]
  404796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40479a:	bf00      	nop

0040479c <_vfiprintf_r>:
  40479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047a0:	b0ad      	sub	sp, #180	; 0xb4
  4047a2:	461d      	mov	r5, r3
  4047a4:	468b      	mov	fp, r1
  4047a6:	4690      	mov	r8, r2
  4047a8:	9307      	str	r3, [sp, #28]
  4047aa:	9006      	str	r0, [sp, #24]
  4047ac:	b118      	cbz	r0, 4047b6 <_vfiprintf_r+0x1a>
  4047ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047b0:	2b00      	cmp	r3, #0
  4047b2:	f000 80f3 	beq.w	40499c <_vfiprintf_r+0x200>
  4047b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4047be:	07df      	lsls	r7, r3, #31
  4047c0:	b281      	uxth	r1, r0
  4047c2:	d402      	bmi.n	4047ca <_vfiprintf_r+0x2e>
  4047c4:	058e      	lsls	r6, r1, #22
  4047c6:	f140 80fc 	bpl.w	4049c2 <_vfiprintf_r+0x226>
  4047ca:	048c      	lsls	r4, r1, #18
  4047cc:	d40a      	bmi.n	4047e4 <_vfiprintf_r+0x48>
  4047ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4047d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4047da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4047de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4047e2:	b289      	uxth	r1, r1
  4047e4:	0708      	lsls	r0, r1, #28
  4047e6:	f140 80b3 	bpl.w	404950 <_vfiprintf_r+0x1b4>
  4047ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4047ee:	2b00      	cmp	r3, #0
  4047f0:	f000 80ae 	beq.w	404950 <_vfiprintf_r+0x1b4>
  4047f4:	f001 031a 	and.w	r3, r1, #26
  4047f8:	2b0a      	cmp	r3, #10
  4047fa:	f000 80b5 	beq.w	404968 <_vfiprintf_r+0x1cc>
  4047fe:	2300      	movs	r3, #0
  404800:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404804:	930b      	str	r3, [sp, #44]	; 0x2c
  404806:	9311      	str	r3, [sp, #68]	; 0x44
  404808:	9310      	str	r3, [sp, #64]	; 0x40
  40480a:	9303      	str	r3, [sp, #12]
  40480c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404810:	46ca      	mov	sl, r9
  404812:	f8cd b010 	str.w	fp, [sp, #16]
  404816:	f898 3000 	ldrb.w	r3, [r8]
  40481a:	4644      	mov	r4, r8
  40481c:	b1fb      	cbz	r3, 40485e <_vfiprintf_r+0xc2>
  40481e:	2b25      	cmp	r3, #37	; 0x25
  404820:	d102      	bne.n	404828 <_vfiprintf_r+0x8c>
  404822:	e01c      	b.n	40485e <_vfiprintf_r+0xc2>
  404824:	2b25      	cmp	r3, #37	; 0x25
  404826:	d003      	beq.n	404830 <_vfiprintf_r+0x94>
  404828:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40482c:	2b00      	cmp	r3, #0
  40482e:	d1f9      	bne.n	404824 <_vfiprintf_r+0x88>
  404830:	eba4 0508 	sub.w	r5, r4, r8
  404834:	b19d      	cbz	r5, 40485e <_vfiprintf_r+0xc2>
  404836:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404838:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40483a:	f8ca 8000 	str.w	r8, [sl]
  40483e:	3301      	adds	r3, #1
  404840:	442a      	add	r2, r5
  404842:	2b07      	cmp	r3, #7
  404844:	f8ca 5004 	str.w	r5, [sl, #4]
  404848:	9211      	str	r2, [sp, #68]	; 0x44
  40484a:	9310      	str	r3, [sp, #64]	; 0x40
  40484c:	dd7a      	ble.n	404944 <_vfiprintf_r+0x1a8>
  40484e:	2a00      	cmp	r2, #0
  404850:	f040 84b0 	bne.w	4051b4 <_vfiprintf_r+0xa18>
  404854:	9b03      	ldr	r3, [sp, #12]
  404856:	9210      	str	r2, [sp, #64]	; 0x40
  404858:	442b      	add	r3, r5
  40485a:	46ca      	mov	sl, r9
  40485c:	9303      	str	r3, [sp, #12]
  40485e:	7823      	ldrb	r3, [r4, #0]
  404860:	2b00      	cmp	r3, #0
  404862:	f000 83e0 	beq.w	405026 <_vfiprintf_r+0x88a>
  404866:	2000      	movs	r0, #0
  404868:	f04f 0300 	mov.w	r3, #0
  40486c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404870:	f104 0801 	add.w	r8, r4, #1
  404874:	7862      	ldrb	r2, [r4, #1]
  404876:	4605      	mov	r5, r0
  404878:	4606      	mov	r6, r0
  40487a:	4603      	mov	r3, r0
  40487c:	f04f 34ff 	mov.w	r4, #4294967295
  404880:	f108 0801 	add.w	r8, r8, #1
  404884:	f1a2 0120 	sub.w	r1, r2, #32
  404888:	2958      	cmp	r1, #88	; 0x58
  40488a:	f200 82de 	bhi.w	404e4a <_vfiprintf_r+0x6ae>
  40488e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404892:	0221      	.short	0x0221
  404894:	02dc02dc 	.word	0x02dc02dc
  404898:	02dc0229 	.word	0x02dc0229
  40489c:	02dc02dc 	.word	0x02dc02dc
  4048a0:	02dc02dc 	.word	0x02dc02dc
  4048a4:	028902dc 	.word	0x028902dc
  4048a8:	02dc0295 	.word	0x02dc0295
  4048ac:	02bd00a2 	.word	0x02bd00a2
  4048b0:	019f02dc 	.word	0x019f02dc
  4048b4:	01a401a4 	.word	0x01a401a4
  4048b8:	01a401a4 	.word	0x01a401a4
  4048bc:	01a401a4 	.word	0x01a401a4
  4048c0:	01a401a4 	.word	0x01a401a4
  4048c4:	02dc01a4 	.word	0x02dc01a4
  4048c8:	02dc02dc 	.word	0x02dc02dc
  4048cc:	02dc02dc 	.word	0x02dc02dc
  4048d0:	02dc02dc 	.word	0x02dc02dc
  4048d4:	02dc02dc 	.word	0x02dc02dc
  4048d8:	01b202dc 	.word	0x01b202dc
  4048dc:	02dc02dc 	.word	0x02dc02dc
  4048e0:	02dc02dc 	.word	0x02dc02dc
  4048e4:	02dc02dc 	.word	0x02dc02dc
  4048e8:	02dc02dc 	.word	0x02dc02dc
  4048ec:	02dc02dc 	.word	0x02dc02dc
  4048f0:	02dc0197 	.word	0x02dc0197
  4048f4:	02dc02dc 	.word	0x02dc02dc
  4048f8:	02dc02dc 	.word	0x02dc02dc
  4048fc:	02dc019b 	.word	0x02dc019b
  404900:	025302dc 	.word	0x025302dc
  404904:	02dc02dc 	.word	0x02dc02dc
  404908:	02dc02dc 	.word	0x02dc02dc
  40490c:	02dc02dc 	.word	0x02dc02dc
  404910:	02dc02dc 	.word	0x02dc02dc
  404914:	02dc02dc 	.word	0x02dc02dc
  404918:	021b025a 	.word	0x021b025a
  40491c:	02dc02dc 	.word	0x02dc02dc
  404920:	026e02dc 	.word	0x026e02dc
  404924:	02dc021b 	.word	0x02dc021b
  404928:	027302dc 	.word	0x027302dc
  40492c:	01f502dc 	.word	0x01f502dc
  404930:	02090182 	.word	0x02090182
  404934:	02dc02d7 	.word	0x02dc02d7
  404938:	02dc029a 	.word	0x02dc029a
  40493c:	02dc00a7 	.word	0x02dc00a7
  404940:	022e02dc 	.word	0x022e02dc
  404944:	f10a 0a08 	add.w	sl, sl, #8
  404948:	9b03      	ldr	r3, [sp, #12]
  40494a:	442b      	add	r3, r5
  40494c:	9303      	str	r3, [sp, #12]
  40494e:	e786      	b.n	40485e <_vfiprintf_r+0xc2>
  404950:	4659      	mov	r1, fp
  404952:	9806      	ldr	r0, [sp, #24]
  404954:	f000 fdac 	bl	4054b0 <__swsetup_r>
  404958:	bb18      	cbnz	r0, 4049a2 <_vfiprintf_r+0x206>
  40495a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40495e:	f001 031a 	and.w	r3, r1, #26
  404962:	2b0a      	cmp	r3, #10
  404964:	f47f af4b 	bne.w	4047fe <_vfiprintf_r+0x62>
  404968:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40496c:	2b00      	cmp	r3, #0
  40496e:	f6ff af46 	blt.w	4047fe <_vfiprintf_r+0x62>
  404972:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404976:	07db      	lsls	r3, r3, #31
  404978:	d405      	bmi.n	404986 <_vfiprintf_r+0x1ea>
  40497a:	058f      	lsls	r7, r1, #22
  40497c:	d403      	bmi.n	404986 <_vfiprintf_r+0x1ea>
  40497e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404982:	f001 fac3 	bl	405f0c <__retarget_lock_release_recursive>
  404986:	462b      	mov	r3, r5
  404988:	4642      	mov	r2, r8
  40498a:	4659      	mov	r1, fp
  40498c:	9806      	ldr	r0, [sp, #24]
  40498e:	f000 fd4d 	bl	40542c <__sbprintf>
  404992:	9003      	str	r0, [sp, #12]
  404994:	9803      	ldr	r0, [sp, #12]
  404996:	b02d      	add	sp, #180	; 0xb4
  404998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40499c:	f000 fef4 	bl	405788 <__sinit>
  4049a0:	e709      	b.n	4047b6 <_vfiprintf_r+0x1a>
  4049a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4049a6:	07d9      	lsls	r1, r3, #31
  4049a8:	d404      	bmi.n	4049b4 <_vfiprintf_r+0x218>
  4049aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4049ae:	059a      	lsls	r2, r3, #22
  4049b0:	f140 84aa 	bpl.w	405308 <_vfiprintf_r+0xb6c>
  4049b4:	f04f 33ff 	mov.w	r3, #4294967295
  4049b8:	9303      	str	r3, [sp, #12]
  4049ba:	9803      	ldr	r0, [sp, #12]
  4049bc:	b02d      	add	sp, #180	; 0xb4
  4049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4049c6:	f001 fa9f 	bl	405f08 <__retarget_lock_acquire_recursive>
  4049ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4049ce:	b281      	uxth	r1, r0
  4049d0:	e6fb      	b.n	4047ca <_vfiprintf_r+0x2e>
  4049d2:	4276      	negs	r6, r6
  4049d4:	9207      	str	r2, [sp, #28]
  4049d6:	f043 0304 	orr.w	r3, r3, #4
  4049da:	f898 2000 	ldrb.w	r2, [r8]
  4049de:	e74f      	b.n	404880 <_vfiprintf_r+0xe4>
  4049e0:	9608      	str	r6, [sp, #32]
  4049e2:	069e      	lsls	r6, r3, #26
  4049e4:	f100 8450 	bmi.w	405288 <_vfiprintf_r+0xaec>
  4049e8:	9907      	ldr	r1, [sp, #28]
  4049ea:	06dd      	lsls	r5, r3, #27
  4049ec:	460a      	mov	r2, r1
  4049ee:	f100 83ef 	bmi.w	4051d0 <_vfiprintf_r+0xa34>
  4049f2:	0658      	lsls	r0, r3, #25
  4049f4:	f140 83ec 	bpl.w	4051d0 <_vfiprintf_r+0xa34>
  4049f8:	880e      	ldrh	r6, [r1, #0]
  4049fa:	3104      	adds	r1, #4
  4049fc:	2700      	movs	r7, #0
  4049fe:	2201      	movs	r2, #1
  404a00:	9107      	str	r1, [sp, #28]
  404a02:	f04f 0100 	mov.w	r1, #0
  404a06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404a0a:	2500      	movs	r5, #0
  404a0c:	1c61      	adds	r1, r4, #1
  404a0e:	f000 8116 	beq.w	404c3e <_vfiprintf_r+0x4a2>
  404a12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404a16:	9102      	str	r1, [sp, #8]
  404a18:	ea56 0107 	orrs.w	r1, r6, r7
  404a1c:	f040 8114 	bne.w	404c48 <_vfiprintf_r+0x4ac>
  404a20:	2c00      	cmp	r4, #0
  404a22:	f040 835c 	bne.w	4050de <_vfiprintf_r+0x942>
  404a26:	2a00      	cmp	r2, #0
  404a28:	f040 83b7 	bne.w	40519a <_vfiprintf_r+0x9fe>
  404a2c:	f013 0301 	ands.w	r3, r3, #1
  404a30:	9305      	str	r3, [sp, #20]
  404a32:	f000 8457 	beq.w	4052e4 <_vfiprintf_r+0xb48>
  404a36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404a3a:	2330      	movs	r3, #48	; 0x30
  404a3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404a40:	9b05      	ldr	r3, [sp, #20]
  404a42:	42a3      	cmp	r3, r4
  404a44:	bfb8      	it	lt
  404a46:	4623      	movlt	r3, r4
  404a48:	9301      	str	r3, [sp, #4]
  404a4a:	b10d      	cbz	r5, 404a50 <_vfiprintf_r+0x2b4>
  404a4c:	3301      	adds	r3, #1
  404a4e:	9301      	str	r3, [sp, #4]
  404a50:	9b02      	ldr	r3, [sp, #8]
  404a52:	f013 0302 	ands.w	r3, r3, #2
  404a56:	9309      	str	r3, [sp, #36]	; 0x24
  404a58:	d002      	beq.n	404a60 <_vfiprintf_r+0x2c4>
  404a5a:	9b01      	ldr	r3, [sp, #4]
  404a5c:	3302      	adds	r3, #2
  404a5e:	9301      	str	r3, [sp, #4]
  404a60:	9b02      	ldr	r3, [sp, #8]
  404a62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404a66:	930a      	str	r3, [sp, #40]	; 0x28
  404a68:	f040 8217 	bne.w	404e9a <_vfiprintf_r+0x6fe>
  404a6c:	9b08      	ldr	r3, [sp, #32]
  404a6e:	9a01      	ldr	r2, [sp, #4]
  404a70:	1a9d      	subs	r5, r3, r2
  404a72:	2d00      	cmp	r5, #0
  404a74:	f340 8211 	ble.w	404e9a <_vfiprintf_r+0x6fe>
  404a78:	2d10      	cmp	r5, #16
  404a7a:	f340 8490 	ble.w	40539e <_vfiprintf_r+0xc02>
  404a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a82:	4ec4      	ldr	r6, [pc, #784]	; (404d94 <_vfiprintf_r+0x5f8>)
  404a84:	46d6      	mov	lr, sl
  404a86:	2710      	movs	r7, #16
  404a88:	46a2      	mov	sl, r4
  404a8a:	4619      	mov	r1, r3
  404a8c:	9c06      	ldr	r4, [sp, #24]
  404a8e:	e007      	b.n	404aa0 <_vfiprintf_r+0x304>
  404a90:	f101 0c02 	add.w	ip, r1, #2
  404a94:	f10e 0e08 	add.w	lr, lr, #8
  404a98:	4601      	mov	r1, r0
  404a9a:	3d10      	subs	r5, #16
  404a9c:	2d10      	cmp	r5, #16
  404a9e:	dd11      	ble.n	404ac4 <_vfiprintf_r+0x328>
  404aa0:	1c48      	adds	r0, r1, #1
  404aa2:	3210      	adds	r2, #16
  404aa4:	2807      	cmp	r0, #7
  404aa6:	9211      	str	r2, [sp, #68]	; 0x44
  404aa8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404aac:	9010      	str	r0, [sp, #64]	; 0x40
  404aae:	ddef      	ble.n	404a90 <_vfiprintf_r+0x2f4>
  404ab0:	2a00      	cmp	r2, #0
  404ab2:	f040 81e4 	bne.w	404e7e <_vfiprintf_r+0x6e2>
  404ab6:	3d10      	subs	r5, #16
  404ab8:	2d10      	cmp	r5, #16
  404aba:	4611      	mov	r1, r2
  404abc:	f04f 0c01 	mov.w	ip, #1
  404ac0:	46ce      	mov	lr, r9
  404ac2:	dced      	bgt.n	404aa0 <_vfiprintf_r+0x304>
  404ac4:	4654      	mov	r4, sl
  404ac6:	4661      	mov	r1, ip
  404ac8:	46f2      	mov	sl, lr
  404aca:	442a      	add	r2, r5
  404acc:	2907      	cmp	r1, #7
  404ace:	9211      	str	r2, [sp, #68]	; 0x44
  404ad0:	f8ca 6000 	str.w	r6, [sl]
  404ad4:	f8ca 5004 	str.w	r5, [sl, #4]
  404ad8:	9110      	str	r1, [sp, #64]	; 0x40
  404ada:	f300 82ec 	bgt.w	4050b6 <_vfiprintf_r+0x91a>
  404ade:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ae2:	f10a 0a08 	add.w	sl, sl, #8
  404ae6:	1c48      	adds	r0, r1, #1
  404ae8:	2d00      	cmp	r5, #0
  404aea:	f040 81de 	bne.w	404eaa <_vfiprintf_r+0x70e>
  404aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404af0:	2b00      	cmp	r3, #0
  404af2:	f000 81f8 	beq.w	404ee6 <_vfiprintf_r+0x74a>
  404af6:	3202      	adds	r2, #2
  404af8:	a90e      	add	r1, sp, #56	; 0x38
  404afa:	2302      	movs	r3, #2
  404afc:	2807      	cmp	r0, #7
  404afe:	9211      	str	r2, [sp, #68]	; 0x44
  404b00:	9010      	str	r0, [sp, #64]	; 0x40
  404b02:	e88a 000a 	stmia.w	sl, {r1, r3}
  404b06:	f340 81ea 	ble.w	404ede <_vfiprintf_r+0x742>
  404b0a:	2a00      	cmp	r2, #0
  404b0c:	f040 838c 	bne.w	405228 <_vfiprintf_r+0xa8c>
  404b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b12:	2b80      	cmp	r3, #128	; 0x80
  404b14:	f04f 0001 	mov.w	r0, #1
  404b18:	4611      	mov	r1, r2
  404b1a:	46ca      	mov	sl, r9
  404b1c:	f040 81e7 	bne.w	404eee <_vfiprintf_r+0x752>
  404b20:	9b08      	ldr	r3, [sp, #32]
  404b22:	9d01      	ldr	r5, [sp, #4]
  404b24:	1b5e      	subs	r6, r3, r5
  404b26:	2e00      	cmp	r6, #0
  404b28:	f340 81e1 	ble.w	404eee <_vfiprintf_r+0x752>
  404b2c:	2e10      	cmp	r6, #16
  404b2e:	4d9a      	ldr	r5, [pc, #616]	; (404d98 <_vfiprintf_r+0x5fc>)
  404b30:	f340 8450 	ble.w	4053d4 <_vfiprintf_r+0xc38>
  404b34:	46d4      	mov	ip, sl
  404b36:	2710      	movs	r7, #16
  404b38:	46a2      	mov	sl, r4
  404b3a:	9c06      	ldr	r4, [sp, #24]
  404b3c:	e007      	b.n	404b4e <_vfiprintf_r+0x3b2>
  404b3e:	f101 0e02 	add.w	lr, r1, #2
  404b42:	f10c 0c08 	add.w	ip, ip, #8
  404b46:	4601      	mov	r1, r0
  404b48:	3e10      	subs	r6, #16
  404b4a:	2e10      	cmp	r6, #16
  404b4c:	dd11      	ble.n	404b72 <_vfiprintf_r+0x3d6>
  404b4e:	1c48      	adds	r0, r1, #1
  404b50:	3210      	adds	r2, #16
  404b52:	2807      	cmp	r0, #7
  404b54:	9211      	str	r2, [sp, #68]	; 0x44
  404b56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404b5a:	9010      	str	r0, [sp, #64]	; 0x40
  404b5c:	ddef      	ble.n	404b3e <_vfiprintf_r+0x3a2>
  404b5e:	2a00      	cmp	r2, #0
  404b60:	f040 829d 	bne.w	40509e <_vfiprintf_r+0x902>
  404b64:	3e10      	subs	r6, #16
  404b66:	2e10      	cmp	r6, #16
  404b68:	f04f 0e01 	mov.w	lr, #1
  404b6c:	4611      	mov	r1, r2
  404b6e:	46cc      	mov	ip, r9
  404b70:	dced      	bgt.n	404b4e <_vfiprintf_r+0x3b2>
  404b72:	4654      	mov	r4, sl
  404b74:	46e2      	mov	sl, ip
  404b76:	4432      	add	r2, r6
  404b78:	f1be 0f07 	cmp.w	lr, #7
  404b7c:	9211      	str	r2, [sp, #68]	; 0x44
  404b7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404b82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404b86:	f300 8369 	bgt.w	40525c <_vfiprintf_r+0xac0>
  404b8a:	f10a 0a08 	add.w	sl, sl, #8
  404b8e:	f10e 0001 	add.w	r0, lr, #1
  404b92:	4671      	mov	r1, lr
  404b94:	e1ab      	b.n	404eee <_vfiprintf_r+0x752>
  404b96:	9608      	str	r6, [sp, #32]
  404b98:	f013 0220 	ands.w	r2, r3, #32
  404b9c:	f040 838c 	bne.w	4052b8 <_vfiprintf_r+0xb1c>
  404ba0:	f013 0110 	ands.w	r1, r3, #16
  404ba4:	f040 831a 	bne.w	4051dc <_vfiprintf_r+0xa40>
  404ba8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404bac:	f000 8316 	beq.w	4051dc <_vfiprintf_r+0xa40>
  404bb0:	9807      	ldr	r0, [sp, #28]
  404bb2:	460a      	mov	r2, r1
  404bb4:	4601      	mov	r1, r0
  404bb6:	3104      	adds	r1, #4
  404bb8:	8806      	ldrh	r6, [r0, #0]
  404bba:	9107      	str	r1, [sp, #28]
  404bbc:	2700      	movs	r7, #0
  404bbe:	e720      	b.n	404a02 <_vfiprintf_r+0x266>
  404bc0:	9608      	str	r6, [sp, #32]
  404bc2:	f043 0310 	orr.w	r3, r3, #16
  404bc6:	e7e7      	b.n	404b98 <_vfiprintf_r+0x3fc>
  404bc8:	9608      	str	r6, [sp, #32]
  404bca:	f043 0310 	orr.w	r3, r3, #16
  404bce:	e708      	b.n	4049e2 <_vfiprintf_r+0x246>
  404bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404bd4:	f898 2000 	ldrb.w	r2, [r8]
  404bd8:	e652      	b.n	404880 <_vfiprintf_r+0xe4>
  404bda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404bde:	2600      	movs	r6, #0
  404be0:	f818 2b01 	ldrb.w	r2, [r8], #1
  404be4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404be8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404bec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404bf0:	2909      	cmp	r1, #9
  404bf2:	d9f5      	bls.n	404be0 <_vfiprintf_r+0x444>
  404bf4:	e646      	b.n	404884 <_vfiprintf_r+0xe8>
  404bf6:	9608      	str	r6, [sp, #32]
  404bf8:	2800      	cmp	r0, #0
  404bfa:	f040 8408 	bne.w	40540e <_vfiprintf_r+0xc72>
  404bfe:	f043 0310 	orr.w	r3, r3, #16
  404c02:	069e      	lsls	r6, r3, #26
  404c04:	f100 834c 	bmi.w	4052a0 <_vfiprintf_r+0xb04>
  404c08:	06dd      	lsls	r5, r3, #27
  404c0a:	f100 82f3 	bmi.w	4051f4 <_vfiprintf_r+0xa58>
  404c0e:	0658      	lsls	r0, r3, #25
  404c10:	f140 82f0 	bpl.w	4051f4 <_vfiprintf_r+0xa58>
  404c14:	9d07      	ldr	r5, [sp, #28]
  404c16:	f9b5 6000 	ldrsh.w	r6, [r5]
  404c1a:	462a      	mov	r2, r5
  404c1c:	17f7      	asrs	r7, r6, #31
  404c1e:	3204      	adds	r2, #4
  404c20:	4630      	mov	r0, r6
  404c22:	4639      	mov	r1, r7
  404c24:	9207      	str	r2, [sp, #28]
  404c26:	2800      	cmp	r0, #0
  404c28:	f171 0200 	sbcs.w	r2, r1, #0
  404c2c:	f2c0 835d 	blt.w	4052ea <_vfiprintf_r+0xb4e>
  404c30:	1c61      	adds	r1, r4, #1
  404c32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404c36:	f04f 0201 	mov.w	r2, #1
  404c3a:	f47f aeea 	bne.w	404a12 <_vfiprintf_r+0x276>
  404c3e:	ea56 0107 	orrs.w	r1, r6, r7
  404c42:	f000 824d 	beq.w	4050e0 <_vfiprintf_r+0x944>
  404c46:	9302      	str	r3, [sp, #8]
  404c48:	2a01      	cmp	r2, #1
  404c4a:	f000 828c 	beq.w	405166 <_vfiprintf_r+0x9ca>
  404c4e:	2a02      	cmp	r2, #2
  404c50:	f040 825c 	bne.w	40510c <_vfiprintf_r+0x970>
  404c54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404c56:	46cb      	mov	fp, r9
  404c58:	0933      	lsrs	r3, r6, #4
  404c5a:	f006 010f 	and.w	r1, r6, #15
  404c5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404c62:	093a      	lsrs	r2, r7, #4
  404c64:	461e      	mov	r6, r3
  404c66:	4617      	mov	r7, r2
  404c68:	5c43      	ldrb	r3, [r0, r1]
  404c6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404c6e:	ea56 0307 	orrs.w	r3, r6, r7
  404c72:	d1f1      	bne.n	404c58 <_vfiprintf_r+0x4bc>
  404c74:	eba9 030b 	sub.w	r3, r9, fp
  404c78:	9305      	str	r3, [sp, #20]
  404c7a:	e6e1      	b.n	404a40 <_vfiprintf_r+0x2a4>
  404c7c:	2800      	cmp	r0, #0
  404c7e:	f040 83c0 	bne.w	405402 <_vfiprintf_r+0xc66>
  404c82:	0699      	lsls	r1, r3, #26
  404c84:	f100 8367 	bmi.w	405356 <_vfiprintf_r+0xbba>
  404c88:	06da      	lsls	r2, r3, #27
  404c8a:	f100 80f1 	bmi.w	404e70 <_vfiprintf_r+0x6d4>
  404c8e:	065b      	lsls	r3, r3, #25
  404c90:	f140 80ee 	bpl.w	404e70 <_vfiprintf_r+0x6d4>
  404c94:	9a07      	ldr	r2, [sp, #28]
  404c96:	6813      	ldr	r3, [r2, #0]
  404c98:	3204      	adds	r2, #4
  404c9a:	9207      	str	r2, [sp, #28]
  404c9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ca0:	801a      	strh	r2, [r3, #0]
  404ca2:	e5b8      	b.n	404816 <_vfiprintf_r+0x7a>
  404ca4:	9807      	ldr	r0, [sp, #28]
  404ca6:	4a3d      	ldr	r2, [pc, #244]	; (404d9c <_vfiprintf_r+0x600>)
  404ca8:	9608      	str	r6, [sp, #32]
  404caa:	920b      	str	r2, [sp, #44]	; 0x2c
  404cac:	6806      	ldr	r6, [r0, #0]
  404cae:	2278      	movs	r2, #120	; 0x78
  404cb0:	2130      	movs	r1, #48	; 0x30
  404cb2:	3004      	adds	r0, #4
  404cb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404cb8:	f043 0302 	orr.w	r3, r3, #2
  404cbc:	9007      	str	r0, [sp, #28]
  404cbe:	2700      	movs	r7, #0
  404cc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404cc4:	2202      	movs	r2, #2
  404cc6:	e69c      	b.n	404a02 <_vfiprintf_r+0x266>
  404cc8:	9608      	str	r6, [sp, #32]
  404cca:	2800      	cmp	r0, #0
  404ccc:	d099      	beq.n	404c02 <_vfiprintf_r+0x466>
  404cce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404cd2:	e796      	b.n	404c02 <_vfiprintf_r+0x466>
  404cd4:	f898 2000 	ldrb.w	r2, [r8]
  404cd8:	2d00      	cmp	r5, #0
  404cda:	f47f add1 	bne.w	404880 <_vfiprintf_r+0xe4>
  404cde:	2001      	movs	r0, #1
  404ce0:	2520      	movs	r5, #32
  404ce2:	e5cd      	b.n	404880 <_vfiprintf_r+0xe4>
  404ce4:	f043 0301 	orr.w	r3, r3, #1
  404ce8:	f898 2000 	ldrb.w	r2, [r8]
  404cec:	e5c8      	b.n	404880 <_vfiprintf_r+0xe4>
  404cee:	9608      	str	r6, [sp, #32]
  404cf0:	2800      	cmp	r0, #0
  404cf2:	f040 8393 	bne.w	40541c <_vfiprintf_r+0xc80>
  404cf6:	4929      	ldr	r1, [pc, #164]	; (404d9c <_vfiprintf_r+0x600>)
  404cf8:	910b      	str	r1, [sp, #44]	; 0x2c
  404cfa:	069f      	lsls	r7, r3, #26
  404cfc:	f100 82e8 	bmi.w	4052d0 <_vfiprintf_r+0xb34>
  404d00:	9807      	ldr	r0, [sp, #28]
  404d02:	06de      	lsls	r6, r3, #27
  404d04:	4601      	mov	r1, r0
  404d06:	f100 8270 	bmi.w	4051ea <_vfiprintf_r+0xa4e>
  404d0a:	065d      	lsls	r5, r3, #25
  404d0c:	f140 826d 	bpl.w	4051ea <_vfiprintf_r+0xa4e>
  404d10:	3104      	adds	r1, #4
  404d12:	8806      	ldrh	r6, [r0, #0]
  404d14:	9107      	str	r1, [sp, #28]
  404d16:	2700      	movs	r7, #0
  404d18:	07d8      	lsls	r0, r3, #31
  404d1a:	f140 8222 	bpl.w	405162 <_vfiprintf_r+0x9c6>
  404d1e:	ea56 0107 	orrs.w	r1, r6, r7
  404d22:	f000 821e 	beq.w	405162 <_vfiprintf_r+0x9c6>
  404d26:	2130      	movs	r1, #48	; 0x30
  404d28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404d2c:	f043 0302 	orr.w	r3, r3, #2
  404d30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404d34:	2202      	movs	r2, #2
  404d36:	e664      	b.n	404a02 <_vfiprintf_r+0x266>
  404d38:	9608      	str	r6, [sp, #32]
  404d3a:	2800      	cmp	r0, #0
  404d3c:	f040 836b 	bne.w	405416 <_vfiprintf_r+0xc7a>
  404d40:	4917      	ldr	r1, [pc, #92]	; (404da0 <_vfiprintf_r+0x604>)
  404d42:	910b      	str	r1, [sp, #44]	; 0x2c
  404d44:	e7d9      	b.n	404cfa <_vfiprintf_r+0x55e>
  404d46:	9907      	ldr	r1, [sp, #28]
  404d48:	9608      	str	r6, [sp, #32]
  404d4a:	680a      	ldr	r2, [r1, #0]
  404d4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404d50:	f04f 0000 	mov.w	r0, #0
  404d54:	460a      	mov	r2, r1
  404d56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404d5a:	3204      	adds	r2, #4
  404d5c:	2001      	movs	r0, #1
  404d5e:	9001      	str	r0, [sp, #4]
  404d60:	9207      	str	r2, [sp, #28]
  404d62:	9005      	str	r0, [sp, #20]
  404d64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404d68:	9302      	str	r3, [sp, #8]
  404d6a:	2400      	movs	r4, #0
  404d6c:	e670      	b.n	404a50 <_vfiprintf_r+0x2b4>
  404d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d72:	f898 2000 	ldrb.w	r2, [r8]
  404d76:	e583      	b.n	404880 <_vfiprintf_r+0xe4>
  404d78:	f898 2000 	ldrb.w	r2, [r8]
  404d7c:	2a6c      	cmp	r2, #108	; 0x6c
  404d7e:	bf03      	ittte	eq
  404d80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404d84:	f043 0320 	orreq.w	r3, r3, #32
  404d88:	f108 0801 	addeq.w	r8, r8, #1
  404d8c:	f043 0310 	orrne.w	r3, r3, #16
  404d90:	e576      	b.n	404880 <_vfiprintf_r+0xe4>
  404d92:	bf00      	nop
  404d94:	00406fe4 	.word	0x00406fe4
  404d98:	00406ff4 	.word	0x00406ff4
  404d9c:	00406fc8 	.word	0x00406fc8
  404da0:	00406fb4 	.word	0x00406fb4
  404da4:	9907      	ldr	r1, [sp, #28]
  404da6:	680e      	ldr	r6, [r1, #0]
  404da8:	460a      	mov	r2, r1
  404daa:	2e00      	cmp	r6, #0
  404dac:	f102 0204 	add.w	r2, r2, #4
  404db0:	f6ff ae0f 	blt.w	4049d2 <_vfiprintf_r+0x236>
  404db4:	9207      	str	r2, [sp, #28]
  404db6:	f898 2000 	ldrb.w	r2, [r8]
  404dba:	e561      	b.n	404880 <_vfiprintf_r+0xe4>
  404dbc:	f898 2000 	ldrb.w	r2, [r8]
  404dc0:	2001      	movs	r0, #1
  404dc2:	252b      	movs	r5, #43	; 0x2b
  404dc4:	e55c      	b.n	404880 <_vfiprintf_r+0xe4>
  404dc6:	9907      	ldr	r1, [sp, #28]
  404dc8:	9608      	str	r6, [sp, #32]
  404dca:	f8d1 b000 	ldr.w	fp, [r1]
  404dce:	f04f 0200 	mov.w	r2, #0
  404dd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404dd6:	1d0e      	adds	r6, r1, #4
  404dd8:	f1bb 0f00 	cmp.w	fp, #0
  404ddc:	f000 82e5 	beq.w	4053aa <_vfiprintf_r+0xc0e>
  404de0:	1c67      	adds	r7, r4, #1
  404de2:	f000 82c4 	beq.w	40536e <_vfiprintf_r+0xbd2>
  404de6:	4622      	mov	r2, r4
  404de8:	2100      	movs	r1, #0
  404dea:	4658      	mov	r0, fp
  404dec:	9301      	str	r3, [sp, #4]
  404dee:	f001 f91f 	bl	406030 <memchr>
  404df2:	9b01      	ldr	r3, [sp, #4]
  404df4:	2800      	cmp	r0, #0
  404df6:	f000 82e5 	beq.w	4053c4 <_vfiprintf_r+0xc28>
  404dfa:	eba0 020b 	sub.w	r2, r0, fp
  404dfe:	9205      	str	r2, [sp, #20]
  404e00:	9607      	str	r6, [sp, #28]
  404e02:	9302      	str	r3, [sp, #8]
  404e04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e08:	2400      	movs	r4, #0
  404e0a:	e619      	b.n	404a40 <_vfiprintf_r+0x2a4>
  404e0c:	f898 2000 	ldrb.w	r2, [r8]
  404e10:	2a2a      	cmp	r2, #42	; 0x2a
  404e12:	f108 0701 	add.w	r7, r8, #1
  404e16:	f000 82e9 	beq.w	4053ec <_vfiprintf_r+0xc50>
  404e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e1e:	2909      	cmp	r1, #9
  404e20:	46b8      	mov	r8, r7
  404e22:	f04f 0400 	mov.w	r4, #0
  404e26:	f63f ad2d 	bhi.w	404884 <_vfiprintf_r+0xe8>
  404e2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404e2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404e32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404e36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e3a:	2909      	cmp	r1, #9
  404e3c:	d9f5      	bls.n	404e2a <_vfiprintf_r+0x68e>
  404e3e:	e521      	b.n	404884 <_vfiprintf_r+0xe8>
  404e40:	f043 0320 	orr.w	r3, r3, #32
  404e44:	f898 2000 	ldrb.w	r2, [r8]
  404e48:	e51a      	b.n	404880 <_vfiprintf_r+0xe4>
  404e4a:	9608      	str	r6, [sp, #32]
  404e4c:	2800      	cmp	r0, #0
  404e4e:	f040 82db 	bne.w	405408 <_vfiprintf_r+0xc6c>
  404e52:	2a00      	cmp	r2, #0
  404e54:	f000 80e7 	beq.w	405026 <_vfiprintf_r+0x88a>
  404e58:	2101      	movs	r1, #1
  404e5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404e5e:	f04f 0200 	mov.w	r2, #0
  404e62:	9101      	str	r1, [sp, #4]
  404e64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404e68:	9105      	str	r1, [sp, #20]
  404e6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404e6e:	e77b      	b.n	404d68 <_vfiprintf_r+0x5cc>
  404e70:	9a07      	ldr	r2, [sp, #28]
  404e72:	6813      	ldr	r3, [r2, #0]
  404e74:	3204      	adds	r2, #4
  404e76:	9207      	str	r2, [sp, #28]
  404e78:	9a03      	ldr	r2, [sp, #12]
  404e7a:	601a      	str	r2, [r3, #0]
  404e7c:	e4cb      	b.n	404816 <_vfiprintf_r+0x7a>
  404e7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e80:	9904      	ldr	r1, [sp, #16]
  404e82:	4620      	mov	r0, r4
  404e84:	f7ff fc4a 	bl	40471c <__sprint_r.part.0>
  404e88:	2800      	cmp	r0, #0
  404e8a:	f040 8139 	bne.w	405100 <_vfiprintf_r+0x964>
  404e8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e92:	f101 0c01 	add.w	ip, r1, #1
  404e96:	46ce      	mov	lr, r9
  404e98:	e5ff      	b.n	404a9a <_vfiprintf_r+0x2fe>
  404e9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e9e:	1c48      	adds	r0, r1, #1
  404ea0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ea4:	2d00      	cmp	r5, #0
  404ea6:	f43f ae22 	beq.w	404aee <_vfiprintf_r+0x352>
  404eaa:	3201      	adds	r2, #1
  404eac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404eb0:	2101      	movs	r1, #1
  404eb2:	2807      	cmp	r0, #7
  404eb4:	9211      	str	r2, [sp, #68]	; 0x44
  404eb6:	9010      	str	r0, [sp, #64]	; 0x40
  404eb8:	f8ca 5000 	str.w	r5, [sl]
  404ebc:	f8ca 1004 	str.w	r1, [sl, #4]
  404ec0:	f340 8108 	ble.w	4050d4 <_vfiprintf_r+0x938>
  404ec4:	2a00      	cmp	r2, #0
  404ec6:	f040 81bc 	bne.w	405242 <_vfiprintf_r+0xaa6>
  404eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ecc:	2b00      	cmp	r3, #0
  404ece:	f43f ae1f 	beq.w	404b10 <_vfiprintf_r+0x374>
  404ed2:	ab0e      	add	r3, sp, #56	; 0x38
  404ed4:	2202      	movs	r2, #2
  404ed6:	4608      	mov	r0, r1
  404ed8:	931c      	str	r3, [sp, #112]	; 0x70
  404eda:	921d      	str	r2, [sp, #116]	; 0x74
  404edc:	46ca      	mov	sl, r9
  404ede:	4601      	mov	r1, r0
  404ee0:	f10a 0a08 	add.w	sl, sl, #8
  404ee4:	3001      	adds	r0, #1
  404ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ee8:	2b80      	cmp	r3, #128	; 0x80
  404eea:	f43f ae19 	beq.w	404b20 <_vfiprintf_r+0x384>
  404eee:	9b05      	ldr	r3, [sp, #20]
  404ef0:	1ae4      	subs	r4, r4, r3
  404ef2:	2c00      	cmp	r4, #0
  404ef4:	dd2e      	ble.n	404f54 <_vfiprintf_r+0x7b8>
  404ef6:	2c10      	cmp	r4, #16
  404ef8:	4db3      	ldr	r5, [pc, #716]	; (4051c8 <_vfiprintf_r+0xa2c>)
  404efa:	dd1e      	ble.n	404f3a <_vfiprintf_r+0x79e>
  404efc:	46d6      	mov	lr, sl
  404efe:	2610      	movs	r6, #16
  404f00:	9f06      	ldr	r7, [sp, #24]
  404f02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404f06:	e006      	b.n	404f16 <_vfiprintf_r+0x77a>
  404f08:	1c88      	adds	r0, r1, #2
  404f0a:	f10e 0e08 	add.w	lr, lr, #8
  404f0e:	4619      	mov	r1, r3
  404f10:	3c10      	subs	r4, #16
  404f12:	2c10      	cmp	r4, #16
  404f14:	dd10      	ble.n	404f38 <_vfiprintf_r+0x79c>
  404f16:	1c4b      	adds	r3, r1, #1
  404f18:	3210      	adds	r2, #16
  404f1a:	2b07      	cmp	r3, #7
  404f1c:	9211      	str	r2, [sp, #68]	; 0x44
  404f1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404f22:	9310      	str	r3, [sp, #64]	; 0x40
  404f24:	ddf0      	ble.n	404f08 <_vfiprintf_r+0x76c>
  404f26:	2a00      	cmp	r2, #0
  404f28:	d165      	bne.n	404ff6 <_vfiprintf_r+0x85a>
  404f2a:	3c10      	subs	r4, #16
  404f2c:	2c10      	cmp	r4, #16
  404f2e:	f04f 0001 	mov.w	r0, #1
  404f32:	4611      	mov	r1, r2
  404f34:	46ce      	mov	lr, r9
  404f36:	dcee      	bgt.n	404f16 <_vfiprintf_r+0x77a>
  404f38:	46f2      	mov	sl, lr
  404f3a:	4422      	add	r2, r4
  404f3c:	2807      	cmp	r0, #7
  404f3e:	9211      	str	r2, [sp, #68]	; 0x44
  404f40:	f8ca 5000 	str.w	r5, [sl]
  404f44:	f8ca 4004 	str.w	r4, [sl, #4]
  404f48:	9010      	str	r0, [sp, #64]	; 0x40
  404f4a:	f300 8085 	bgt.w	405058 <_vfiprintf_r+0x8bc>
  404f4e:	f10a 0a08 	add.w	sl, sl, #8
  404f52:	3001      	adds	r0, #1
  404f54:	9905      	ldr	r1, [sp, #20]
  404f56:	f8ca b000 	str.w	fp, [sl]
  404f5a:	440a      	add	r2, r1
  404f5c:	2807      	cmp	r0, #7
  404f5e:	9211      	str	r2, [sp, #68]	; 0x44
  404f60:	f8ca 1004 	str.w	r1, [sl, #4]
  404f64:	9010      	str	r0, [sp, #64]	; 0x40
  404f66:	f340 8082 	ble.w	40506e <_vfiprintf_r+0x8d2>
  404f6a:	2a00      	cmp	r2, #0
  404f6c:	f040 8118 	bne.w	4051a0 <_vfiprintf_r+0xa04>
  404f70:	9b02      	ldr	r3, [sp, #8]
  404f72:	9210      	str	r2, [sp, #64]	; 0x40
  404f74:	0758      	lsls	r0, r3, #29
  404f76:	d535      	bpl.n	404fe4 <_vfiprintf_r+0x848>
  404f78:	9b08      	ldr	r3, [sp, #32]
  404f7a:	9901      	ldr	r1, [sp, #4]
  404f7c:	1a5c      	subs	r4, r3, r1
  404f7e:	2c00      	cmp	r4, #0
  404f80:	f340 80e7 	ble.w	405152 <_vfiprintf_r+0x9b6>
  404f84:	46ca      	mov	sl, r9
  404f86:	2c10      	cmp	r4, #16
  404f88:	f340 8218 	ble.w	4053bc <_vfiprintf_r+0xc20>
  404f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f8e:	4e8f      	ldr	r6, [pc, #572]	; (4051cc <_vfiprintf_r+0xa30>)
  404f90:	9f06      	ldr	r7, [sp, #24]
  404f92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f96:	2510      	movs	r5, #16
  404f98:	e006      	b.n	404fa8 <_vfiprintf_r+0x80c>
  404f9a:	1c88      	adds	r0, r1, #2
  404f9c:	f10a 0a08 	add.w	sl, sl, #8
  404fa0:	4619      	mov	r1, r3
  404fa2:	3c10      	subs	r4, #16
  404fa4:	2c10      	cmp	r4, #16
  404fa6:	dd11      	ble.n	404fcc <_vfiprintf_r+0x830>
  404fa8:	1c4b      	adds	r3, r1, #1
  404faa:	3210      	adds	r2, #16
  404fac:	2b07      	cmp	r3, #7
  404fae:	9211      	str	r2, [sp, #68]	; 0x44
  404fb0:	f8ca 6000 	str.w	r6, [sl]
  404fb4:	f8ca 5004 	str.w	r5, [sl, #4]
  404fb8:	9310      	str	r3, [sp, #64]	; 0x40
  404fba:	ddee      	ble.n	404f9a <_vfiprintf_r+0x7fe>
  404fbc:	bb42      	cbnz	r2, 405010 <_vfiprintf_r+0x874>
  404fbe:	3c10      	subs	r4, #16
  404fc0:	2c10      	cmp	r4, #16
  404fc2:	f04f 0001 	mov.w	r0, #1
  404fc6:	4611      	mov	r1, r2
  404fc8:	46ca      	mov	sl, r9
  404fca:	dced      	bgt.n	404fa8 <_vfiprintf_r+0x80c>
  404fcc:	4422      	add	r2, r4
  404fce:	2807      	cmp	r0, #7
  404fd0:	9211      	str	r2, [sp, #68]	; 0x44
  404fd2:	f8ca 6000 	str.w	r6, [sl]
  404fd6:	f8ca 4004 	str.w	r4, [sl, #4]
  404fda:	9010      	str	r0, [sp, #64]	; 0x40
  404fdc:	dd51      	ble.n	405082 <_vfiprintf_r+0x8e6>
  404fde:	2a00      	cmp	r2, #0
  404fe0:	f040 819b 	bne.w	40531a <_vfiprintf_r+0xb7e>
  404fe4:	9b03      	ldr	r3, [sp, #12]
  404fe6:	9a08      	ldr	r2, [sp, #32]
  404fe8:	9901      	ldr	r1, [sp, #4]
  404fea:	428a      	cmp	r2, r1
  404fec:	bfac      	ite	ge
  404fee:	189b      	addge	r3, r3, r2
  404ff0:	185b      	addlt	r3, r3, r1
  404ff2:	9303      	str	r3, [sp, #12]
  404ff4:	e04e      	b.n	405094 <_vfiprintf_r+0x8f8>
  404ff6:	aa0f      	add	r2, sp, #60	; 0x3c
  404ff8:	4651      	mov	r1, sl
  404ffa:	4638      	mov	r0, r7
  404ffc:	f7ff fb8e 	bl	40471c <__sprint_r.part.0>
  405000:	2800      	cmp	r0, #0
  405002:	f040 813f 	bne.w	405284 <_vfiprintf_r+0xae8>
  405006:	9910      	ldr	r1, [sp, #64]	; 0x40
  405008:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40500a:	1c48      	adds	r0, r1, #1
  40500c:	46ce      	mov	lr, r9
  40500e:	e77f      	b.n	404f10 <_vfiprintf_r+0x774>
  405010:	aa0f      	add	r2, sp, #60	; 0x3c
  405012:	4659      	mov	r1, fp
  405014:	4638      	mov	r0, r7
  405016:	f7ff fb81 	bl	40471c <__sprint_r.part.0>
  40501a:	b960      	cbnz	r0, 405036 <_vfiprintf_r+0x89a>
  40501c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40501e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405020:	1c48      	adds	r0, r1, #1
  405022:	46ca      	mov	sl, r9
  405024:	e7bd      	b.n	404fa2 <_vfiprintf_r+0x806>
  405026:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405028:	f8dd b010 	ldr.w	fp, [sp, #16]
  40502c:	2b00      	cmp	r3, #0
  40502e:	f040 81d4 	bne.w	4053da <_vfiprintf_r+0xc3e>
  405032:	2300      	movs	r3, #0
  405034:	9310      	str	r3, [sp, #64]	; 0x40
  405036:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40503a:	f013 0f01 	tst.w	r3, #1
  40503e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405042:	d102      	bne.n	40504a <_vfiprintf_r+0x8ae>
  405044:	059a      	lsls	r2, r3, #22
  405046:	f140 80de 	bpl.w	405206 <_vfiprintf_r+0xa6a>
  40504a:	065b      	lsls	r3, r3, #25
  40504c:	f53f acb2 	bmi.w	4049b4 <_vfiprintf_r+0x218>
  405050:	9803      	ldr	r0, [sp, #12]
  405052:	b02d      	add	sp, #180	; 0xb4
  405054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405058:	2a00      	cmp	r2, #0
  40505a:	f040 8106 	bne.w	40526a <_vfiprintf_r+0xace>
  40505e:	9a05      	ldr	r2, [sp, #20]
  405060:	921d      	str	r2, [sp, #116]	; 0x74
  405062:	2301      	movs	r3, #1
  405064:	9211      	str	r2, [sp, #68]	; 0x44
  405066:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40506a:	9310      	str	r3, [sp, #64]	; 0x40
  40506c:	46ca      	mov	sl, r9
  40506e:	f10a 0a08 	add.w	sl, sl, #8
  405072:	9b02      	ldr	r3, [sp, #8]
  405074:	0759      	lsls	r1, r3, #29
  405076:	d504      	bpl.n	405082 <_vfiprintf_r+0x8e6>
  405078:	9b08      	ldr	r3, [sp, #32]
  40507a:	9901      	ldr	r1, [sp, #4]
  40507c:	1a5c      	subs	r4, r3, r1
  40507e:	2c00      	cmp	r4, #0
  405080:	dc81      	bgt.n	404f86 <_vfiprintf_r+0x7ea>
  405082:	9b03      	ldr	r3, [sp, #12]
  405084:	9908      	ldr	r1, [sp, #32]
  405086:	9801      	ldr	r0, [sp, #4]
  405088:	4281      	cmp	r1, r0
  40508a:	bfac      	ite	ge
  40508c:	185b      	addge	r3, r3, r1
  40508e:	181b      	addlt	r3, r3, r0
  405090:	9303      	str	r3, [sp, #12]
  405092:	bb72      	cbnz	r2, 4050f2 <_vfiprintf_r+0x956>
  405094:	2300      	movs	r3, #0
  405096:	9310      	str	r3, [sp, #64]	; 0x40
  405098:	46ca      	mov	sl, r9
  40509a:	f7ff bbbc 	b.w	404816 <_vfiprintf_r+0x7a>
  40509e:	aa0f      	add	r2, sp, #60	; 0x3c
  4050a0:	9904      	ldr	r1, [sp, #16]
  4050a2:	4620      	mov	r0, r4
  4050a4:	f7ff fb3a 	bl	40471c <__sprint_r.part.0>
  4050a8:	bb50      	cbnz	r0, 405100 <_vfiprintf_r+0x964>
  4050aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050ae:	f101 0e01 	add.w	lr, r1, #1
  4050b2:	46cc      	mov	ip, r9
  4050b4:	e548      	b.n	404b48 <_vfiprintf_r+0x3ac>
  4050b6:	2a00      	cmp	r2, #0
  4050b8:	f040 8140 	bne.w	40533c <_vfiprintf_r+0xba0>
  4050bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4050c0:	2900      	cmp	r1, #0
  4050c2:	f000 811b 	beq.w	4052fc <_vfiprintf_r+0xb60>
  4050c6:	2201      	movs	r2, #1
  4050c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4050cc:	4610      	mov	r0, r2
  4050ce:	921d      	str	r2, [sp, #116]	; 0x74
  4050d0:	911c      	str	r1, [sp, #112]	; 0x70
  4050d2:	46ca      	mov	sl, r9
  4050d4:	4601      	mov	r1, r0
  4050d6:	f10a 0a08 	add.w	sl, sl, #8
  4050da:	3001      	adds	r0, #1
  4050dc:	e507      	b.n	404aee <_vfiprintf_r+0x352>
  4050de:	9b02      	ldr	r3, [sp, #8]
  4050e0:	2a01      	cmp	r2, #1
  4050e2:	f000 8098 	beq.w	405216 <_vfiprintf_r+0xa7a>
  4050e6:	2a02      	cmp	r2, #2
  4050e8:	d10d      	bne.n	405106 <_vfiprintf_r+0x96a>
  4050ea:	9302      	str	r3, [sp, #8]
  4050ec:	2600      	movs	r6, #0
  4050ee:	2700      	movs	r7, #0
  4050f0:	e5b0      	b.n	404c54 <_vfiprintf_r+0x4b8>
  4050f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4050f4:	9904      	ldr	r1, [sp, #16]
  4050f6:	9806      	ldr	r0, [sp, #24]
  4050f8:	f7ff fb10 	bl	40471c <__sprint_r.part.0>
  4050fc:	2800      	cmp	r0, #0
  4050fe:	d0c9      	beq.n	405094 <_vfiprintf_r+0x8f8>
  405100:	f8dd b010 	ldr.w	fp, [sp, #16]
  405104:	e797      	b.n	405036 <_vfiprintf_r+0x89a>
  405106:	9302      	str	r3, [sp, #8]
  405108:	2600      	movs	r6, #0
  40510a:	2700      	movs	r7, #0
  40510c:	4649      	mov	r1, r9
  40510e:	e000      	b.n	405112 <_vfiprintf_r+0x976>
  405110:	4659      	mov	r1, fp
  405112:	08f2      	lsrs	r2, r6, #3
  405114:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405118:	08f8      	lsrs	r0, r7, #3
  40511a:	f006 0307 	and.w	r3, r6, #7
  40511e:	4607      	mov	r7, r0
  405120:	4616      	mov	r6, r2
  405122:	3330      	adds	r3, #48	; 0x30
  405124:	ea56 0207 	orrs.w	r2, r6, r7
  405128:	f801 3c01 	strb.w	r3, [r1, #-1]
  40512c:	f101 3bff 	add.w	fp, r1, #4294967295
  405130:	d1ee      	bne.n	405110 <_vfiprintf_r+0x974>
  405132:	9a02      	ldr	r2, [sp, #8]
  405134:	07d6      	lsls	r6, r2, #31
  405136:	f57f ad9d 	bpl.w	404c74 <_vfiprintf_r+0x4d8>
  40513a:	2b30      	cmp	r3, #48	; 0x30
  40513c:	f43f ad9a 	beq.w	404c74 <_vfiprintf_r+0x4d8>
  405140:	3902      	subs	r1, #2
  405142:	2330      	movs	r3, #48	; 0x30
  405144:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405148:	eba9 0301 	sub.w	r3, r9, r1
  40514c:	9305      	str	r3, [sp, #20]
  40514e:	468b      	mov	fp, r1
  405150:	e476      	b.n	404a40 <_vfiprintf_r+0x2a4>
  405152:	9b03      	ldr	r3, [sp, #12]
  405154:	9a08      	ldr	r2, [sp, #32]
  405156:	428a      	cmp	r2, r1
  405158:	bfac      	ite	ge
  40515a:	189b      	addge	r3, r3, r2
  40515c:	185b      	addlt	r3, r3, r1
  40515e:	9303      	str	r3, [sp, #12]
  405160:	e798      	b.n	405094 <_vfiprintf_r+0x8f8>
  405162:	2202      	movs	r2, #2
  405164:	e44d      	b.n	404a02 <_vfiprintf_r+0x266>
  405166:	2f00      	cmp	r7, #0
  405168:	bf08      	it	eq
  40516a:	2e0a      	cmpeq	r6, #10
  40516c:	d352      	bcc.n	405214 <_vfiprintf_r+0xa78>
  40516e:	46cb      	mov	fp, r9
  405170:	4630      	mov	r0, r6
  405172:	4639      	mov	r1, r7
  405174:	220a      	movs	r2, #10
  405176:	2300      	movs	r3, #0
  405178:	f001 fbc6 	bl	406908 <__aeabi_uldivmod>
  40517c:	3230      	adds	r2, #48	; 0x30
  40517e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405182:	4630      	mov	r0, r6
  405184:	4639      	mov	r1, r7
  405186:	2300      	movs	r3, #0
  405188:	220a      	movs	r2, #10
  40518a:	f001 fbbd 	bl	406908 <__aeabi_uldivmod>
  40518e:	4606      	mov	r6, r0
  405190:	460f      	mov	r7, r1
  405192:	ea56 0307 	orrs.w	r3, r6, r7
  405196:	d1eb      	bne.n	405170 <_vfiprintf_r+0x9d4>
  405198:	e56c      	b.n	404c74 <_vfiprintf_r+0x4d8>
  40519a:	9405      	str	r4, [sp, #20]
  40519c:	46cb      	mov	fp, r9
  40519e:	e44f      	b.n	404a40 <_vfiprintf_r+0x2a4>
  4051a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4051a2:	9904      	ldr	r1, [sp, #16]
  4051a4:	9806      	ldr	r0, [sp, #24]
  4051a6:	f7ff fab9 	bl	40471c <__sprint_r.part.0>
  4051aa:	2800      	cmp	r0, #0
  4051ac:	d1a8      	bne.n	405100 <_vfiprintf_r+0x964>
  4051ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051b0:	46ca      	mov	sl, r9
  4051b2:	e75e      	b.n	405072 <_vfiprintf_r+0x8d6>
  4051b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4051b6:	9904      	ldr	r1, [sp, #16]
  4051b8:	9806      	ldr	r0, [sp, #24]
  4051ba:	f7ff faaf 	bl	40471c <__sprint_r.part.0>
  4051be:	2800      	cmp	r0, #0
  4051c0:	d19e      	bne.n	405100 <_vfiprintf_r+0x964>
  4051c2:	46ca      	mov	sl, r9
  4051c4:	f7ff bbc0 	b.w	404948 <_vfiprintf_r+0x1ac>
  4051c8:	00406ff4 	.word	0x00406ff4
  4051cc:	00406fe4 	.word	0x00406fe4
  4051d0:	3104      	adds	r1, #4
  4051d2:	6816      	ldr	r6, [r2, #0]
  4051d4:	9107      	str	r1, [sp, #28]
  4051d6:	2201      	movs	r2, #1
  4051d8:	2700      	movs	r7, #0
  4051da:	e412      	b.n	404a02 <_vfiprintf_r+0x266>
  4051dc:	9807      	ldr	r0, [sp, #28]
  4051de:	4601      	mov	r1, r0
  4051e0:	3104      	adds	r1, #4
  4051e2:	6806      	ldr	r6, [r0, #0]
  4051e4:	9107      	str	r1, [sp, #28]
  4051e6:	2700      	movs	r7, #0
  4051e8:	e40b      	b.n	404a02 <_vfiprintf_r+0x266>
  4051ea:	680e      	ldr	r6, [r1, #0]
  4051ec:	3104      	adds	r1, #4
  4051ee:	9107      	str	r1, [sp, #28]
  4051f0:	2700      	movs	r7, #0
  4051f2:	e591      	b.n	404d18 <_vfiprintf_r+0x57c>
  4051f4:	9907      	ldr	r1, [sp, #28]
  4051f6:	680e      	ldr	r6, [r1, #0]
  4051f8:	460a      	mov	r2, r1
  4051fa:	17f7      	asrs	r7, r6, #31
  4051fc:	3204      	adds	r2, #4
  4051fe:	9207      	str	r2, [sp, #28]
  405200:	4630      	mov	r0, r6
  405202:	4639      	mov	r1, r7
  405204:	e50f      	b.n	404c26 <_vfiprintf_r+0x48a>
  405206:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40520a:	f000 fe7f 	bl	405f0c <__retarget_lock_release_recursive>
  40520e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405212:	e71a      	b.n	40504a <_vfiprintf_r+0x8ae>
  405214:	9b02      	ldr	r3, [sp, #8]
  405216:	9302      	str	r3, [sp, #8]
  405218:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40521c:	3630      	adds	r6, #48	; 0x30
  40521e:	2301      	movs	r3, #1
  405220:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405224:	9305      	str	r3, [sp, #20]
  405226:	e40b      	b.n	404a40 <_vfiprintf_r+0x2a4>
  405228:	aa0f      	add	r2, sp, #60	; 0x3c
  40522a:	9904      	ldr	r1, [sp, #16]
  40522c:	9806      	ldr	r0, [sp, #24]
  40522e:	f7ff fa75 	bl	40471c <__sprint_r.part.0>
  405232:	2800      	cmp	r0, #0
  405234:	f47f af64 	bne.w	405100 <_vfiprintf_r+0x964>
  405238:	9910      	ldr	r1, [sp, #64]	; 0x40
  40523a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40523c:	1c48      	adds	r0, r1, #1
  40523e:	46ca      	mov	sl, r9
  405240:	e651      	b.n	404ee6 <_vfiprintf_r+0x74a>
  405242:	aa0f      	add	r2, sp, #60	; 0x3c
  405244:	9904      	ldr	r1, [sp, #16]
  405246:	9806      	ldr	r0, [sp, #24]
  405248:	f7ff fa68 	bl	40471c <__sprint_r.part.0>
  40524c:	2800      	cmp	r0, #0
  40524e:	f47f af57 	bne.w	405100 <_vfiprintf_r+0x964>
  405252:	9910      	ldr	r1, [sp, #64]	; 0x40
  405254:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405256:	1c48      	adds	r0, r1, #1
  405258:	46ca      	mov	sl, r9
  40525a:	e448      	b.n	404aee <_vfiprintf_r+0x352>
  40525c:	2a00      	cmp	r2, #0
  40525e:	f040 8091 	bne.w	405384 <_vfiprintf_r+0xbe8>
  405262:	2001      	movs	r0, #1
  405264:	4611      	mov	r1, r2
  405266:	46ca      	mov	sl, r9
  405268:	e641      	b.n	404eee <_vfiprintf_r+0x752>
  40526a:	aa0f      	add	r2, sp, #60	; 0x3c
  40526c:	9904      	ldr	r1, [sp, #16]
  40526e:	9806      	ldr	r0, [sp, #24]
  405270:	f7ff fa54 	bl	40471c <__sprint_r.part.0>
  405274:	2800      	cmp	r0, #0
  405276:	f47f af43 	bne.w	405100 <_vfiprintf_r+0x964>
  40527a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40527c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40527e:	3001      	adds	r0, #1
  405280:	46ca      	mov	sl, r9
  405282:	e667      	b.n	404f54 <_vfiprintf_r+0x7b8>
  405284:	46d3      	mov	fp, sl
  405286:	e6d6      	b.n	405036 <_vfiprintf_r+0x89a>
  405288:	9e07      	ldr	r6, [sp, #28]
  40528a:	3607      	adds	r6, #7
  40528c:	f026 0207 	bic.w	r2, r6, #7
  405290:	f102 0108 	add.w	r1, r2, #8
  405294:	e9d2 6700 	ldrd	r6, r7, [r2]
  405298:	9107      	str	r1, [sp, #28]
  40529a:	2201      	movs	r2, #1
  40529c:	f7ff bbb1 	b.w	404a02 <_vfiprintf_r+0x266>
  4052a0:	9e07      	ldr	r6, [sp, #28]
  4052a2:	3607      	adds	r6, #7
  4052a4:	f026 0607 	bic.w	r6, r6, #7
  4052a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4052ac:	f106 0208 	add.w	r2, r6, #8
  4052b0:	9207      	str	r2, [sp, #28]
  4052b2:	4606      	mov	r6, r0
  4052b4:	460f      	mov	r7, r1
  4052b6:	e4b6      	b.n	404c26 <_vfiprintf_r+0x48a>
  4052b8:	9e07      	ldr	r6, [sp, #28]
  4052ba:	3607      	adds	r6, #7
  4052bc:	f026 0207 	bic.w	r2, r6, #7
  4052c0:	f102 0108 	add.w	r1, r2, #8
  4052c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4052c8:	9107      	str	r1, [sp, #28]
  4052ca:	2200      	movs	r2, #0
  4052cc:	f7ff bb99 	b.w	404a02 <_vfiprintf_r+0x266>
  4052d0:	9e07      	ldr	r6, [sp, #28]
  4052d2:	3607      	adds	r6, #7
  4052d4:	f026 0107 	bic.w	r1, r6, #7
  4052d8:	f101 0008 	add.w	r0, r1, #8
  4052dc:	9007      	str	r0, [sp, #28]
  4052de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4052e2:	e519      	b.n	404d18 <_vfiprintf_r+0x57c>
  4052e4:	46cb      	mov	fp, r9
  4052e6:	f7ff bbab 	b.w	404a40 <_vfiprintf_r+0x2a4>
  4052ea:	252d      	movs	r5, #45	; 0x2d
  4052ec:	4276      	negs	r6, r6
  4052ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4052f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4052f6:	2201      	movs	r2, #1
  4052f8:	f7ff bb88 	b.w	404a0c <_vfiprintf_r+0x270>
  4052fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4052fe:	b9b3      	cbnz	r3, 40532e <_vfiprintf_r+0xb92>
  405300:	4611      	mov	r1, r2
  405302:	2001      	movs	r0, #1
  405304:	46ca      	mov	sl, r9
  405306:	e5f2      	b.n	404eee <_vfiprintf_r+0x752>
  405308:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40530c:	f000 fdfe 	bl	405f0c <__retarget_lock_release_recursive>
  405310:	f04f 33ff 	mov.w	r3, #4294967295
  405314:	9303      	str	r3, [sp, #12]
  405316:	f7ff bb50 	b.w	4049ba <_vfiprintf_r+0x21e>
  40531a:	aa0f      	add	r2, sp, #60	; 0x3c
  40531c:	9904      	ldr	r1, [sp, #16]
  40531e:	9806      	ldr	r0, [sp, #24]
  405320:	f7ff f9fc 	bl	40471c <__sprint_r.part.0>
  405324:	2800      	cmp	r0, #0
  405326:	f47f aeeb 	bne.w	405100 <_vfiprintf_r+0x964>
  40532a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40532c:	e6a9      	b.n	405082 <_vfiprintf_r+0x8e6>
  40532e:	ab0e      	add	r3, sp, #56	; 0x38
  405330:	2202      	movs	r2, #2
  405332:	931c      	str	r3, [sp, #112]	; 0x70
  405334:	921d      	str	r2, [sp, #116]	; 0x74
  405336:	2001      	movs	r0, #1
  405338:	46ca      	mov	sl, r9
  40533a:	e5d0      	b.n	404ede <_vfiprintf_r+0x742>
  40533c:	aa0f      	add	r2, sp, #60	; 0x3c
  40533e:	9904      	ldr	r1, [sp, #16]
  405340:	9806      	ldr	r0, [sp, #24]
  405342:	f7ff f9eb 	bl	40471c <__sprint_r.part.0>
  405346:	2800      	cmp	r0, #0
  405348:	f47f aeda 	bne.w	405100 <_vfiprintf_r+0x964>
  40534c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40534e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405350:	1c48      	adds	r0, r1, #1
  405352:	46ca      	mov	sl, r9
  405354:	e5a4      	b.n	404ea0 <_vfiprintf_r+0x704>
  405356:	9a07      	ldr	r2, [sp, #28]
  405358:	9903      	ldr	r1, [sp, #12]
  40535a:	6813      	ldr	r3, [r2, #0]
  40535c:	17cd      	asrs	r5, r1, #31
  40535e:	4608      	mov	r0, r1
  405360:	3204      	adds	r2, #4
  405362:	4629      	mov	r1, r5
  405364:	9207      	str	r2, [sp, #28]
  405366:	e9c3 0100 	strd	r0, r1, [r3]
  40536a:	f7ff ba54 	b.w	404816 <_vfiprintf_r+0x7a>
  40536e:	4658      	mov	r0, fp
  405370:	9607      	str	r6, [sp, #28]
  405372:	9302      	str	r3, [sp, #8]
  405374:	f7ff f964 	bl	404640 <strlen>
  405378:	2400      	movs	r4, #0
  40537a:	9005      	str	r0, [sp, #20]
  40537c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405380:	f7ff bb5e 	b.w	404a40 <_vfiprintf_r+0x2a4>
  405384:	aa0f      	add	r2, sp, #60	; 0x3c
  405386:	9904      	ldr	r1, [sp, #16]
  405388:	9806      	ldr	r0, [sp, #24]
  40538a:	f7ff f9c7 	bl	40471c <__sprint_r.part.0>
  40538e:	2800      	cmp	r0, #0
  405390:	f47f aeb6 	bne.w	405100 <_vfiprintf_r+0x964>
  405394:	9910      	ldr	r1, [sp, #64]	; 0x40
  405396:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405398:	1c48      	adds	r0, r1, #1
  40539a:	46ca      	mov	sl, r9
  40539c:	e5a7      	b.n	404eee <_vfiprintf_r+0x752>
  40539e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053a2:	4e20      	ldr	r6, [pc, #128]	; (405424 <_vfiprintf_r+0xc88>)
  4053a4:	3101      	adds	r1, #1
  4053a6:	f7ff bb90 	b.w	404aca <_vfiprintf_r+0x32e>
  4053aa:	2c06      	cmp	r4, #6
  4053ac:	bf28      	it	cs
  4053ae:	2406      	movcs	r4, #6
  4053b0:	9405      	str	r4, [sp, #20]
  4053b2:	9607      	str	r6, [sp, #28]
  4053b4:	9401      	str	r4, [sp, #4]
  4053b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405428 <_vfiprintf_r+0xc8c>
  4053ba:	e4d5      	b.n	404d68 <_vfiprintf_r+0x5cc>
  4053bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4053be:	4e19      	ldr	r6, [pc, #100]	; (405424 <_vfiprintf_r+0xc88>)
  4053c0:	3001      	adds	r0, #1
  4053c2:	e603      	b.n	404fcc <_vfiprintf_r+0x830>
  4053c4:	9405      	str	r4, [sp, #20]
  4053c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4053ca:	9607      	str	r6, [sp, #28]
  4053cc:	9302      	str	r3, [sp, #8]
  4053ce:	4604      	mov	r4, r0
  4053d0:	f7ff bb36 	b.w	404a40 <_vfiprintf_r+0x2a4>
  4053d4:	4686      	mov	lr, r0
  4053d6:	f7ff bbce 	b.w	404b76 <_vfiprintf_r+0x3da>
  4053da:	9806      	ldr	r0, [sp, #24]
  4053dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4053de:	4659      	mov	r1, fp
  4053e0:	f7ff f99c 	bl	40471c <__sprint_r.part.0>
  4053e4:	2800      	cmp	r0, #0
  4053e6:	f43f ae24 	beq.w	405032 <_vfiprintf_r+0x896>
  4053ea:	e624      	b.n	405036 <_vfiprintf_r+0x89a>
  4053ec:	9907      	ldr	r1, [sp, #28]
  4053ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4053f2:	680c      	ldr	r4, [r1, #0]
  4053f4:	3104      	adds	r1, #4
  4053f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4053fa:	46b8      	mov	r8, r7
  4053fc:	9107      	str	r1, [sp, #28]
  4053fe:	f7ff ba3f 	b.w	404880 <_vfiprintf_r+0xe4>
  405402:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405406:	e43c      	b.n	404c82 <_vfiprintf_r+0x4e6>
  405408:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40540c:	e521      	b.n	404e52 <_vfiprintf_r+0x6b6>
  40540e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405412:	f7ff bbf4 	b.w	404bfe <_vfiprintf_r+0x462>
  405416:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40541a:	e491      	b.n	404d40 <_vfiprintf_r+0x5a4>
  40541c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405420:	e469      	b.n	404cf6 <_vfiprintf_r+0x55a>
  405422:	bf00      	nop
  405424:	00406fe4 	.word	0x00406fe4
  405428:	00406fdc 	.word	0x00406fdc

0040542c <__sbprintf>:
  40542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405430:	460c      	mov	r4, r1
  405432:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405436:	8989      	ldrh	r1, [r1, #12]
  405438:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40543a:	89e5      	ldrh	r5, [r4, #14]
  40543c:	9619      	str	r6, [sp, #100]	; 0x64
  40543e:	f021 0102 	bic.w	r1, r1, #2
  405442:	4606      	mov	r6, r0
  405444:	69e0      	ldr	r0, [r4, #28]
  405446:	f8ad 100c 	strh.w	r1, [sp, #12]
  40544a:	4617      	mov	r7, r2
  40544c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405450:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405452:	f8ad 500e 	strh.w	r5, [sp, #14]
  405456:	4698      	mov	r8, r3
  405458:	ad1a      	add	r5, sp, #104	; 0x68
  40545a:	2300      	movs	r3, #0
  40545c:	9007      	str	r0, [sp, #28]
  40545e:	a816      	add	r0, sp, #88	; 0x58
  405460:	9209      	str	r2, [sp, #36]	; 0x24
  405462:	9306      	str	r3, [sp, #24]
  405464:	9500      	str	r5, [sp, #0]
  405466:	9504      	str	r5, [sp, #16]
  405468:	9102      	str	r1, [sp, #8]
  40546a:	9105      	str	r1, [sp, #20]
  40546c:	f000 fd48 	bl	405f00 <__retarget_lock_init_recursive>
  405470:	4643      	mov	r3, r8
  405472:	463a      	mov	r2, r7
  405474:	4669      	mov	r1, sp
  405476:	4630      	mov	r0, r6
  405478:	f7ff f990 	bl	40479c <_vfiprintf_r>
  40547c:	1e05      	subs	r5, r0, #0
  40547e:	db07      	blt.n	405490 <__sbprintf+0x64>
  405480:	4630      	mov	r0, r6
  405482:	4669      	mov	r1, sp
  405484:	f000 f928 	bl	4056d8 <_fflush_r>
  405488:	2800      	cmp	r0, #0
  40548a:	bf18      	it	ne
  40548c:	f04f 35ff 	movne.w	r5, #4294967295
  405490:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405494:	065b      	lsls	r3, r3, #25
  405496:	d503      	bpl.n	4054a0 <__sbprintf+0x74>
  405498:	89a3      	ldrh	r3, [r4, #12]
  40549a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40549e:	81a3      	strh	r3, [r4, #12]
  4054a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4054a2:	f000 fd2f 	bl	405f04 <__retarget_lock_close_recursive>
  4054a6:	4628      	mov	r0, r5
  4054a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004054b0 <__swsetup_r>:
  4054b0:	b538      	push	{r3, r4, r5, lr}
  4054b2:	4b30      	ldr	r3, [pc, #192]	; (405574 <__swsetup_r+0xc4>)
  4054b4:	681b      	ldr	r3, [r3, #0]
  4054b6:	4605      	mov	r5, r0
  4054b8:	460c      	mov	r4, r1
  4054ba:	b113      	cbz	r3, 4054c2 <__swsetup_r+0x12>
  4054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4054be:	2a00      	cmp	r2, #0
  4054c0:	d038      	beq.n	405534 <__swsetup_r+0x84>
  4054c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4054c6:	b293      	uxth	r3, r2
  4054c8:	0718      	lsls	r0, r3, #28
  4054ca:	d50c      	bpl.n	4054e6 <__swsetup_r+0x36>
  4054cc:	6920      	ldr	r0, [r4, #16]
  4054ce:	b1a8      	cbz	r0, 4054fc <__swsetup_r+0x4c>
  4054d0:	f013 0201 	ands.w	r2, r3, #1
  4054d4:	d01e      	beq.n	405514 <__swsetup_r+0x64>
  4054d6:	6963      	ldr	r3, [r4, #20]
  4054d8:	2200      	movs	r2, #0
  4054da:	425b      	negs	r3, r3
  4054dc:	61a3      	str	r3, [r4, #24]
  4054de:	60a2      	str	r2, [r4, #8]
  4054e0:	b1f0      	cbz	r0, 405520 <__swsetup_r+0x70>
  4054e2:	2000      	movs	r0, #0
  4054e4:	bd38      	pop	{r3, r4, r5, pc}
  4054e6:	06d9      	lsls	r1, r3, #27
  4054e8:	d53c      	bpl.n	405564 <__swsetup_r+0xb4>
  4054ea:	0758      	lsls	r0, r3, #29
  4054ec:	d426      	bmi.n	40553c <__swsetup_r+0x8c>
  4054ee:	6920      	ldr	r0, [r4, #16]
  4054f0:	f042 0308 	orr.w	r3, r2, #8
  4054f4:	81a3      	strh	r3, [r4, #12]
  4054f6:	b29b      	uxth	r3, r3
  4054f8:	2800      	cmp	r0, #0
  4054fa:	d1e9      	bne.n	4054d0 <__swsetup_r+0x20>
  4054fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405500:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405504:	d0e4      	beq.n	4054d0 <__swsetup_r+0x20>
  405506:	4628      	mov	r0, r5
  405508:	4621      	mov	r1, r4
  40550a:	f000 fd2f 	bl	405f6c <__smakebuf_r>
  40550e:	89a3      	ldrh	r3, [r4, #12]
  405510:	6920      	ldr	r0, [r4, #16]
  405512:	e7dd      	b.n	4054d0 <__swsetup_r+0x20>
  405514:	0799      	lsls	r1, r3, #30
  405516:	bf58      	it	pl
  405518:	6962      	ldrpl	r2, [r4, #20]
  40551a:	60a2      	str	r2, [r4, #8]
  40551c:	2800      	cmp	r0, #0
  40551e:	d1e0      	bne.n	4054e2 <__swsetup_r+0x32>
  405520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405524:	061a      	lsls	r2, r3, #24
  405526:	d5dd      	bpl.n	4054e4 <__swsetup_r+0x34>
  405528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40552c:	81a3      	strh	r3, [r4, #12]
  40552e:	f04f 30ff 	mov.w	r0, #4294967295
  405532:	bd38      	pop	{r3, r4, r5, pc}
  405534:	4618      	mov	r0, r3
  405536:	f000 f927 	bl	405788 <__sinit>
  40553a:	e7c2      	b.n	4054c2 <__swsetup_r+0x12>
  40553c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40553e:	b151      	cbz	r1, 405556 <__swsetup_r+0xa6>
  405540:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405544:	4299      	cmp	r1, r3
  405546:	d004      	beq.n	405552 <__swsetup_r+0xa2>
  405548:	4628      	mov	r0, r5
  40554a:	f000 fa43 	bl	4059d4 <_free_r>
  40554e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405552:	2300      	movs	r3, #0
  405554:	6323      	str	r3, [r4, #48]	; 0x30
  405556:	2300      	movs	r3, #0
  405558:	6920      	ldr	r0, [r4, #16]
  40555a:	6063      	str	r3, [r4, #4]
  40555c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405560:	6020      	str	r0, [r4, #0]
  405562:	e7c5      	b.n	4054f0 <__swsetup_r+0x40>
  405564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405568:	2309      	movs	r3, #9
  40556a:	602b      	str	r3, [r5, #0]
  40556c:	f04f 30ff 	mov.w	r0, #4294967295
  405570:	81a2      	strh	r2, [r4, #12]
  405572:	bd38      	pop	{r3, r4, r5, pc}
  405574:	20400024 	.word	0x20400024

00405578 <register_fini>:
  405578:	4b02      	ldr	r3, [pc, #8]	; (405584 <register_fini+0xc>)
  40557a:	b113      	cbz	r3, 405582 <register_fini+0xa>
  40557c:	4802      	ldr	r0, [pc, #8]	; (405588 <register_fini+0x10>)
  40557e:	f000 b805 	b.w	40558c <atexit>
  405582:	4770      	bx	lr
  405584:	00000000 	.word	0x00000000
  405588:	004057f9 	.word	0x004057f9

0040558c <atexit>:
  40558c:	2300      	movs	r3, #0
  40558e:	4601      	mov	r1, r0
  405590:	461a      	mov	r2, r3
  405592:	4618      	mov	r0, r3
  405594:	f001 b890 	b.w	4066b8 <__register_exitproc>

00405598 <__sflush_r>:
  405598:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40559c:	b29a      	uxth	r2, r3
  40559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055a2:	460d      	mov	r5, r1
  4055a4:	0711      	lsls	r1, r2, #28
  4055a6:	4680      	mov	r8, r0
  4055a8:	d43a      	bmi.n	405620 <__sflush_r+0x88>
  4055aa:	686a      	ldr	r2, [r5, #4]
  4055ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4055b0:	2a00      	cmp	r2, #0
  4055b2:	81ab      	strh	r3, [r5, #12]
  4055b4:	dd6f      	ble.n	405696 <__sflush_r+0xfe>
  4055b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4055b8:	2c00      	cmp	r4, #0
  4055ba:	d049      	beq.n	405650 <__sflush_r+0xb8>
  4055bc:	2200      	movs	r2, #0
  4055be:	b29b      	uxth	r3, r3
  4055c0:	f8d8 6000 	ldr.w	r6, [r8]
  4055c4:	f8c8 2000 	str.w	r2, [r8]
  4055c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4055cc:	d067      	beq.n	40569e <__sflush_r+0x106>
  4055ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4055d0:	075f      	lsls	r7, r3, #29
  4055d2:	d505      	bpl.n	4055e0 <__sflush_r+0x48>
  4055d4:	6869      	ldr	r1, [r5, #4]
  4055d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4055d8:	1a52      	subs	r2, r2, r1
  4055da:	b10b      	cbz	r3, 4055e0 <__sflush_r+0x48>
  4055dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4055de:	1ad2      	subs	r2, r2, r3
  4055e0:	2300      	movs	r3, #0
  4055e2:	69e9      	ldr	r1, [r5, #28]
  4055e4:	4640      	mov	r0, r8
  4055e6:	47a0      	blx	r4
  4055e8:	1c44      	adds	r4, r0, #1
  4055ea:	d03c      	beq.n	405666 <__sflush_r+0xce>
  4055ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4055f0:	692a      	ldr	r2, [r5, #16]
  4055f2:	602a      	str	r2, [r5, #0]
  4055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4055f8:	2200      	movs	r2, #0
  4055fa:	81ab      	strh	r3, [r5, #12]
  4055fc:	04db      	lsls	r3, r3, #19
  4055fe:	606a      	str	r2, [r5, #4]
  405600:	d447      	bmi.n	405692 <__sflush_r+0xfa>
  405602:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405604:	f8c8 6000 	str.w	r6, [r8]
  405608:	b311      	cbz	r1, 405650 <__sflush_r+0xb8>
  40560a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40560e:	4299      	cmp	r1, r3
  405610:	d002      	beq.n	405618 <__sflush_r+0x80>
  405612:	4640      	mov	r0, r8
  405614:	f000 f9de 	bl	4059d4 <_free_r>
  405618:	2000      	movs	r0, #0
  40561a:	6328      	str	r0, [r5, #48]	; 0x30
  40561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405620:	692e      	ldr	r6, [r5, #16]
  405622:	b1ae      	cbz	r6, 405650 <__sflush_r+0xb8>
  405624:	682c      	ldr	r4, [r5, #0]
  405626:	602e      	str	r6, [r5, #0]
  405628:	0791      	lsls	r1, r2, #30
  40562a:	bf0c      	ite	eq
  40562c:	696b      	ldreq	r3, [r5, #20]
  40562e:	2300      	movne	r3, #0
  405630:	1ba4      	subs	r4, r4, r6
  405632:	60ab      	str	r3, [r5, #8]
  405634:	e00a      	b.n	40564c <__sflush_r+0xb4>
  405636:	4623      	mov	r3, r4
  405638:	4632      	mov	r2, r6
  40563a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40563c:	69e9      	ldr	r1, [r5, #28]
  40563e:	4640      	mov	r0, r8
  405640:	47b8      	blx	r7
  405642:	2800      	cmp	r0, #0
  405644:	eba4 0400 	sub.w	r4, r4, r0
  405648:	4406      	add	r6, r0
  40564a:	dd04      	ble.n	405656 <__sflush_r+0xbe>
  40564c:	2c00      	cmp	r4, #0
  40564e:	dcf2      	bgt.n	405636 <__sflush_r+0x9e>
  405650:	2000      	movs	r0, #0
  405652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405656:	89ab      	ldrh	r3, [r5, #12]
  405658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40565c:	81ab      	strh	r3, [r5, #12]
  40565e:	f04f 30ff 	mov.w	r0, #4294967295
  405662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405666:	f8d8 4000 	ldr.w	r4, [r8]
  40566a:	2c1d      	cmp	r4, #29
  40566c:	d8f3      	bhi.n	405656 <__sflush_r+0xbe>
  40566e:	4b19      	ldr	r3, [pc, #100]	; (4056d4 <__sflush_r+0x13c>)
  405670:	40e3      	lsrs	r3, r4
  405672:	43db      	mvns	r3, r3
  405674:	f013 0301 	ands.w	r3, r3, #1
  405678:	d1ed      	bne.n	405656 <__sflush_r+0xbe>
  40567a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40567e:	606b      	str	r3, [r5, #4]
  405680:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405684:	6929      	ldr	r1, [r5, #16]
  405686:	81ab      	strh	r3, [r5, #12]
  405688:	04da      	lsls	r2, r3, #19
  40568a:	6029      	str	r1, [r5, #0]
  40568c:	d5b9      	bpl.n	405602 <__sflush_r+0x6a>
  40568e:	2c00      	cmp	r4, #0
  405690:	d1b7      	bne.n	405602 <__sflush_r+0x6a>
  405692:	6528      	str	r0, [r5, #80]	; 0x50
  405694:	e7b5      	b.n	405602 <__sflush_r+0x6a>
  405696:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405698:	2a00      	cmp	r2, #0
  40569a:	dc8c      	bgt.n	4055b6 <__sflush_r+0x1e>
  40569c:	e7d8      	b.n	405650 <__sflush_r+0xb8>
  40569e:	2301      	movs	r3, #1
  4056a0:	69e9      	ldr	r1, [r5, #28]
  4056a2:	4640      	mov	r0, r8
  4056a4:	47a0      	blx	r4
  4056a6:	1c43      	adds	r3, r0, #1
  4056a8:	4602      	mov	r2, r0
  4056aa:	d002      	beq.n	4056b2 <__sflush_r+0x11a>
  4056ac:	89ab      	ldrh	r3, [r5, #12]
  4056ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4056b0:	e78e      	b.n	4055d0 <__sflush_r+0x38>
  4056b2:	f8d8 3000 	ldr.w	r3, [r8]
  4056b6:	2b00      	cmp	r3, #0
  4056b8:	d0f8      	beq.n	4056ac <__sflush_r+0x114>
  4056ba:	2b1d      	cmp	r3, #29
  4056bc:	d001      	beq.n	4056c2 <__sflush_r+0x12a>
  4056be:	2b16      	cmp	r3, #22
  4056c0:	d102      	bne.n	4056c8 <__sflush_r+0x130>
  4056c2:	f8c8 6000 	str.w	r6, [r8]
  4056c6:	e7c3      	b.n	405650 <__sflush_r+0xb8>
  4056c8:	89ab      	ldrh	r3, [r5, #12]
  4056ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056ce:	81ab      	strh	r3, [r5, #12]
  4056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4056d4:	20400001 	.word	0x20400001

004056d8 <_fflush_r>:
  4056d8:	b538      	push	{r3, r4, r5, lr}
  4056da:	460d      	mov	r5, r1
  4056dc:	4604      	mov	r4, r0
  4056de:	b108      	cbz	r0, 4056e4 <_fflush_r+0xc>
  4056e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4056e2:	b1bb      	cbz	r3, 405714 <_fflush_r+0x3c>
  4056e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4056e8:	b188      	cbz	r0, 40570e <_fflush_r+0x36>
  4056ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4056ec:	07db      	lsls	r3, r3, #31
  4056ee:	d401      	bmi.n	4056f4 <_fflush_r+0x1c>
  4056f0:	0581      	lsls	r1, r0, #22
  4056f2:	d517      	bpl.n	405724 <_fflush_r+0x4c>
  4056f4:	4620      	mov	r0, r4
  4056f6:	4629      	mov	r1, r5
  4056f8:	f7ff ff4e 	bl	405598 <__sflush_r>
  4056fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4056fe:	07da      	lsls	r2, r3, #31
  405700:	4604      	mov	r4, r0
  405702:	d402      	bmi.n	40570a <_fflush_r+0x32>
  405704:	89ab      	ldrh	r3, [r5, #12]
  405706:	059b      	lsls	r3, r3, #22
  405708:	d507      	bpl.n	40571a <_fflush_r+0x42>
  40570a:	4620      	mov	r0, r4
  40570c:	bd38      	pop	{r3, r4, r5, pc}
  40570e:	4604      	mov	r4, r0
  405710:	4620      	mov	r0, r4
  405712:	bd38      	pop	{r3, r4, r5, pc}
  405714:	f000 f838 	bl	405788 <__sinit>
  405718:	e7e4      	b.n	4056e4 <_fflush_r+0xc>
  40571a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40571c:	f000 fbf6 	bl	405f0c <__retarget_lock_release_recursive>
  405720:	4620      	mov	r0, r4
  405722:	bd38      	pop	{r3, r4, r5, pc}
  405724:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405726:	f000 fbef 	bl	405f08 <__retarget_lock_acquire_recursive>
  40572a:	e7e3      	b.n	4056f4 <_fflush_r+0x1c>

0040572c <_cleanup_r>:
  40572c:	4901      	ldr	r1, [pc, #4]	; (405734 <_cleanup_r+0x8>)
  40572e:	f000 bbaf 	b.w	405e90 <_fwalk_reent>
  405732:	bf00      	nop
  405734:	004067a1 	.word	0x004067a1

00405738 <std.isra.0>:
  405738:	b510      	push	{r4, lr}
  40573a:	2300      	movs	r3, #0
  40573c:	4604      	mov	r4, r0
  40573e:	8181      	strh	r1, [r0, #12]
  405740:	81c2      	strh	r2, [r0, #14]
  405742:	6003      	str	r3, [r0, #0]
  405744:	6043      	str	r3, [r0, #4]
  405746:	6083      	str	r3, [r0, #8]
  405748:	6643      	str	r3, [r0, #100]	; 0x64
  40574a:	6103      	str	r3, [r0, #16]
  40574c:	6143      	str	r3, [r0, #20]
  40574e:	6183      	str	r3, [r0, #24]
  405750:	4619      	mov	r1, r3
  405752:	2208      	movs	r2, #8
  405754:	305c      	adds	r0, #92	; 0x5c
  405756:	f7fe fe19 	bl	40438c <memset>
  40575a:	4807      	ldr	r0, [pc, #28]	; (405778 <std.isra.0+0x40>)
  40575c:	4907      	ldr	r1, [pc, #28]	; (40577c <std.isra.0+0x44>)
  40575e:	4a08      	ldr	r2, [pc, #32]	; (405780 <std.isra.0+0x48>)
  405760:	4b08      	ldr	r3, [pc, #32]	; (405784 <std.isra.0+0x4c>)
  405762:	6220      	str	r0, [r4, #32]
  405764:	61e4      	str	r4, [r4, #28]
  405766:	6261      	str	r1, [r4, #36]	; 0x24
  405768:	62a2      	str	r2, [r4, #40]	; 0x28
  40576a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40576c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405774:	f000 bbc4 	b.w	405f00 <__retarget_lock_init_recursive>
  405778:	004064e5 	.word	0x004064e5
  40577c:	00406509 	.word	0x00406509
  405780:	00406545 	.word	0x00406545
  405784:	00406565 	.word	0x00406565

00405788 <__sinit>:
  405788:	b510      	push	{r4, lr}
  40578a:	4604      	mov	r4, r0
  40578c:	4812      	ldr	r0, [pc, #72]	; (4057d8 <__sinit+0x50>)
  40578e:	f000 fbbb 	bl	405f08 <__retarget_lock_acquire_recursive>
  405792:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405794:	b9d2      	cbnz	r2, 4057cc <__sinit+0x44>
  405796:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40579a:	4810      	ldr	r0, [pc, #64]	; (4057dc <__sinit+0x54>)
  40579c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4057a0:	2103      	movs	r1, #3
  4057a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4057a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4057a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4057ac:	6860      	ldr	r0, [r4, #4]
  4057ae:	2104      	movs	r1, #4
  4057b0:	f7ff ffc2 	bl	405738 <std.isra.0>
  4057b4:	2201      	movs	r2, #1
  4057b6:	2109      	movs	r1, #9
  4057b8:	68a0      	ldr	r0, [r4, #8]
  4057ba:	f7ff ffbd 	bl	405738 <std.isra.0>
  4057be:	2202      	movs	r2, #2
  4057c0:	2112      	movs	r1, #18
  4057c2:	68e0      	ldr	r0, [r4, #12]
  4057c4:	f7ff ffb8 	bl	405738 <std.isra.0>
  4057c8:	2301      	movs	r3, #1
  4057ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4057cc:	4802      	ldr	r0, [pc, #8]	; (4057d8 <__sinit+0x50>)
  4057ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4057d2:	f000 bb9b 	b.w	405f0c <__retarget_lock_release_recursive>
  4057d6:	bf00      	nop
  4057d8:	20400e44 	.word	0x20400e44
  4057dc:	0040572d 	.word	0x0040572d

004057e0 <__sfp_lock_acquire>:
  4057e0:	4801      	ldr	r0, [pc, #4]	; (4057e8 <__sfp_lock_acquire+0x8>)
  4057e2:	f000 bb91 	b.w	405f08 <__retarget_lock_acquire_recursive>
  4057e6:	bf00      	nop
  4057e8:	20400e58 	.word	0x20400e58

004057ec <__sfp_lock_release>:
  4057ec:	4801      	ldr	r0, [pc, #4]	; (4057f4 <__sfp_lock_release+0x8>)
  4057ee:	f000 bb8d 	b.w	405f0c <__retarget_lock_release_recursive>
  4057f2:	bf00      	nop
  4057f4:	20400e58 	.word	0x20400e58

004057f8 <__libc_fini_array>:
  4057f8:	b538      	push	{r3, r4, r5, lr}
  4057fa:	4c0a      	ldr	r4, [pc, #40]	; (405824 <__libc_fini_array+0x2c>)
  4057fc:	4d0a      	ldr	r5, [pc, #40]	; (405828 <__libc_fini_array+0x30>)
  4057fe:	1b64      	subs	r4, r4, r5
  405800:	10a4      	asrs	r4, r4, #2
  405802:	d00a      	beq.n	40581a <__libc_fini_array+0x22>
  405804:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405808:	3b01      	subs	r3, #1
  40580a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40580e:	3c01      	subs	r4, #1
  405810:	f855 3904 	ldr.w	r3, [r5], #-4
  405814:	4798      	blx	r3
  405816:	2c00      	cmp	r4, #0
  405818:	d1f9      	bne.n	40580e <__libc_fini_array+0x16>
  40581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40581e:	f001 bc85 	b.w	40712c <_fini>
  405822:	bf00      	nop
  405824:	0040713c 	.word	0x0040713c
  405828:	00407138 	.word	0x00407138

0040582c <__fputwc>:
  40582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405830:	b082      	sub	sp, #8
  405832:	4680      	mov	r8, r0
  405834:	4689      	mov	r9, r1
  405836:	4614      	mov	r4, r2
  405838:	f000 fb54 	bl	405ee4 <__locale_mb_cur_max>
  40583c:	2801      	cmp	r0, #1
  40583e:	d036      	beq.n	4058ae <__fputwc+0x82>
  405840:	464a      	mov	r2, r9
  405842:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405846:	a901      	add	r1, sp, #4
  405848:	4640      	mov	r0, r8
  40584a:	f000 fee7 	bl	40661c <_wcrtomb_r>
  40584e:	1c42      	adds	r2, r0, #1
  405850:	4606      	mov	r6, r0
  405852:	d025      	beq.n	4058a0 <__fputwc+0x74>
  405854:	b3a8      	cbz	r0, 4058c2 <__fputwc+0x96>
  405856:	f89d e004 	ldrb.w	lr, [sp, #4]
  40585a:	2500      	movs	r5, #0
  40585c:	f10d 0a04 	add.w	sl, sp, #4
  405860:	e009      	b.n	405876 <__fputwc+0x4a>
  405862:	6823      	ldr	r3, [r4, #0]
  405864:	1c5a      	adds	r2, r3, #1
  405866:	6022      	str	r2, [r4, #0]
  405868:	f883 e000 	strb.w	lr, [r3]
  40586c:	3501      	adds	r5, #1
  40586e:	42b5      	cmp	r5, r6
  405870:	d227      	bcs.n	4058c2 <__fputwc+0x96>
  405872:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405876:	68a3      	ldr	r3, [r4, #8]
  405878:	3b01      	subs	r3, #1
  40587a:	2b00      	cmp	r3, #0
  40587c:	60a3      	str	r3, [r4, #8]
  40587e:	daf0      	bge.n	405862 <__fputwc+0x36>
  405880:	69a7      	ldr	r7, [r4, #24]
  405882:	42bb      	cmp	r3, r7
  405884:	4671      	mov	r1, lr
  405886:	4622      	mov	r2, r4
  405888:	4640      	mov	r0, r8
  40588a:	db02      	blt.n	405892 <__fputwc+0x66>
  40588c:	f1be 0f0a 	cmp.w	lr, #10
  405890:	d1e7      	bne.n	405862 <__fputwc+0x36>
  405892:	f000 fe6b 	bl	40656c <__swbuf_r>
  405896:	1c43      	adds	r3, r0, #1
  405898:	d1e8      	bne.n	40586c <__fputwc+0x40>
  40589a:	b002      	add	sp, #8
  40589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058a0:	89a3      	ldrh	r3, [r4, #12]
  4058a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058a6:	81a3      	strh	r3, [r4, #12]
  4058a8:	b002      	add	sp, #8
  4058aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4058b2:	2bfe      	cmp	r3, #254	; 0xfe
  4058b4:	d8c4      	bhi.n	405840 <__fputwc+0x14>
  4058b6:	fa5f fe89 	uxtb.w	lr, r9
  4058ba:	4606      	mov	r6, r0
  4058bc:	f88d e004 	strb.w	lr, [sp, #4]
  4058c0:	e7cb      	b.n	40585a <__fputwc+0x2e>
  4058c2:	4648      	mov	r0, r9
  4058c4:	b002      	add	sp, #8
  4058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058ca:	bf00      	nop

004058cc <_fputwc_r>:
  4058cc:	b530      	push	{r4, r5, lr}
  4058ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4058d0:	f013 0f01 	tst.w	r3, #1
  4058d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4058d8:	4614      	mov	r4, r2
  4058da:	b083      	sub	sp, #12
  4058dc:	4605      	mov	r5, r0
  4058de:	b29a      	uxth	r2, r3
  4058e0:	d101      	bne.n	4058e6 <_fputwc_r+0x1a>
  4058e2:	0590      	lsls	r0, r2, #22
  4058e4:	d51c      	bpl.n	405920 <_fputwc_r+0x54>
  4058e6:	0490      	lsls	r0, r2, #18
  4058e8:	d406      	bmi.n	4058f8 <_fputwc_r+0x2c>
  4058ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4058ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4058f4:	81a3      	strh	r3, [r4, #12]
  4058f6:	6662      	str	r2, [r4, #100]	; 0x64
  4058f8:	4628      	mov	r0, r5
  4058fa:	4622      	mov	r2, r4
  4058fc:	f7ff ff96 	bl	40582c <__fputwc>
  405900:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405902:	07da      	lsls	r2, r3, #31
  405904:	4605      	mov	r5, r0
  405906:	d402      	bmi.n	40590e <_fputwc_r+0x42>
  405908:	89a3      	ldrh	r3, [r4, #12]
  40590a:	059b      	lsls	r3, r3, #22
  40590c:	d502      	bpl.n	405914 <_fputwc_r+0x48>
  40590e:	4628      	mov	r0, r5
  405910:	b003      	add	sp, #12
  405912:	bd30      	pop	{r4, r5, pc}
  405914:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405916:	f000 faf9 	bl	405f0c <__retarget_lock_release_recursive>
  40591a:	4628      	mov	r0, r5
  40591c:	b003      	add	sp, #12
  40591e:	bd30      	pop	{r4, r5, pc}
  405920:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405922:	9101      	str	r1, [sp, #4]
  405924:	f000 faf0 	bl	405f08 <__retarget_lock_acquire_recursive>
  405928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40592c:	9901      	ldr	r1, [sp, #4]
  40592e:	b29a      	uxth	r2, r3
  405930:	e7d9      	b.n	4058e6 <_fputwc_r+0x1a>
  405932:	bf00      	nop

00405934 <_malloc_trim_r>:
  405934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405936:	4f24      	ldr	r7, [pc, #144]	; (4059c8 <_malloc_trim_r+0x94>)
  405938:	460c      	mov	r4, r1
  40593a:	4606      	mov	r6, r0
  40593c:	f7fe fd74 	bl	404428 <__malloc_lock>
  405940:	68bb      	ldr	r3, [r7, #8]
  405942:	685d      	ldr	r5, [r3, #4]
  405944:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405948:	310f      	adds	r1, #15
  40594a:	f025 0503 	bic.w	r5, r5, #3
  40594e:	4429      	add	r1, r5
  405950:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405954:	f021 010f 	bic.w	r1, r1, #15
  405958:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40595c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405960:	db07      	blt.n	405972 <_malloc_trim_r+0x3e>
  405962:	2100      	movs	r1, #0
  405964:	4630      	mov	r0, r6
  405966:	f7fe fd6b 	bl	404440 <_sbrk_r>
  40596a:	68bb      	ldr	r3, [r7, #8]
  40596c:	442b      	add	r3, r5
  40596e:	4298      	cmp	r0, r3
  405970:	d004      	beq.n	40597c <_malloc_trim_r+0x48>
  405972:	4630      	mov	r0, r6
  405974:	f7fe fd5e 	bl	404434 <__malloc_unlock>
  405978:	2000      	movs	r0, #0
  40597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40597c:	4261      	negs	r1, r4
  40597e:	4630      	mov	r0, r6
  405980:	f7fe fd5e 	bl	404440 <_sbrk_r>
  405984:	3001      	adds	r0, #1
  405986:	d00d      	beq.n	4059a4 <_malloc_trim_r+0x70>
  405988:	4b10      	ldr	r3, [pc, #64]	; (4059cc <_malloc_trim_r+0x98>)
  40598a:	68ba      	ldr	r2, [r7, #8]
  40598c:	6819      	ldr	r1, [r3, #0]
  40598e:	1b2d      	subs	r5, r5, r4
  405990:	f045 0501 	orr.w	r5, r5, #1
  405994:	4630      	mov	r0, r6
  405996:	1b09      	subs	r1, r1, r4
  405998:	6055      	str	r5, [r2, #4]
  40599a:	6019      	str	r1, [r3, #0]
  40599c:	f7fe fd4a 	bl	404434 <__malloc_unlock>
  4059a0:	2001      	movs	r0, #1
  4059a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059a4:	2100      	movs	r1, #0
  4059a6:	4630      	mov	r0, r6
  4059a8:	f7fe fd4a 	bl	404440 <_sbrk_r>
  4059ac:	68ba      	ldr	r2, [r7, #8]
  4059ae:	1a83      	subs	r3, r0, r2
  4059b0:	2b0f      	cmp	r3, #15
  4059b2:	ddde      	ble.n	405972 <_malloc_trim_r+0x3e>
  4059b4:	4c06      	ldr	r4, [pc, #24]	; (4059d0 <_malloc_trim_r+0x9c>)
  4059b6:	4905      	ldr	r1, [pc, #20]	; (4059cc <_malloc_trim_r+0x98>)
  4059b8:	6824      	ldr	r4, [r4, #0]
  4059ba:	f043 0301 	orr.w	r3, r3, #1
  4059be:	1b00      	subs	r0, r0, r4
  4059c0:	6053      	str	r3, [r2, #4]
  4059c2:	6008      	str	r0, [r1, #0]
  4059c4:	e7d5      	b.n	405972 <_malloc_trim_r+0x3e>
  4059c6:	bf00      	nop
  4059c8:	20400450 	.word	0x20400450
  4059cc:	20400dac 	.word	0x20400dac
  4059d0:	20400858 	.word	0x20400858

004059d4 <_free_r>:
  4059d4:	2900      	cmp	r1, #0
  4059d6:	d044      	beq.n	405a62 <_free_r+0x8e>
  4059d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059dc:	460d      	mov	r5, r1
  4059de:	4680      	mov	r8, r0
  4059e0:	f7fe fd22 	bl	404428 <__malloc_lock>
  4059e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4059e8:	4969      	ldr	r1, [pc, #420]	; (405b90 <_free_r+0x1bc>)
  4059ea:	f027 0301 	bic.w	r3, r7, #1
  4059ee:	f1a5 0408 	sub.w	r4, r5, #8
  4059f2:	18e2      	adds	r2, r4, r3
  4059f4:	688e      	ldr	r6, [r1, #8]
  4059f6:	6850      	ldr	r0, [r2, #4]
  4059f8:	42b2      	cmp	r2, r6
  4059fa:	f020 0003 	bic.w	r0, r0, #3
  4059fe:	d05e      	beq.n	405abe <_free_r+0xea>
  405a00:	07fe      	lsls	r6, r7, #31
  405a02:	6050      	str	r0, [r2, #4]
  405a04:	d40b      	bmi.n	405a1e <_free_r+0x4a>
  405a06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405a0a:	1be4      	subs	r4, r4, r7
  405a0c:	f101 0e08 	add.w	lr, r1, #8
  405a10:	68a5      	ldr	r5, [r4, #8]
  405a12:	4575      	cmp	r5, lr
  405a14:	443b      	add	r3, r7
  405a16:	d06d      	beq.n	405af4 <_free_r+0x120>
  405a18:	68e7      	ldr	r7, [r4, #12]
  405a1a:	60ef      	str	r7, [r5, #12]
  405a1c:	60bd      	str	r5, [r7, #8]
  405a1e:	1815      	adds	r5, r2, r0
  405a20:	686d      	ldr	r5, [r5, #4]
  405a22:	07ed      	lsls	r5, r5, #31
  405a24:	d53e      	bpl.n	405aa4 <_free_r+0xd0>
  405a26:	f043 0201 	orr.w	r2, r3, #1
  405a2a:	6062      	str	r2, [r4, #4]
  405a2c:	50e3      	str	r3, [r4, r3]
  405a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a32:	d217      	bcs.n	405a64 <_free_r+0x90>
  405a34:	08db      	lsrs	r3, r3, #3
  405a36:	1c58      	adds	r0, r3, #1
  405a38:	109a      	asrs	r2, r3, #2
  405a3a:	684d      	ldr	r5, [r1, #4]
  405a3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405a40:	60a7      	str	r7, [r4, #8]
  405a42:	2301      	movs	r3, #1
  405a44:	4093      	lsls	r3, r2
  405a46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405a4a:	432b      	orrs	r3, r5
  405a4c:	3a08      	subs	r2, #8
  405a4e:	60e2      	str	r2, [r4, #12]
  405a50:	604b      	str	r3, [r1, #4]
  405a52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405a56:	60fc      	str	r4, [r7, #12]
  405a58:	4640      	mov	r0, r8
  405a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405a5e:	f7fe bce9 	b.w	404434 <__malloc_unlock>
  405a62:	4770      	bx	lr
  405a64:	0a5a      	lsrs	r2, r3, #9
  405a66:	2a04      	cmp	r2, #4
  405a68:	d852      	bhi.n	405b10 <_free_r+0x13c>
  405a6a:	099a      	lsrs	r2, r3, #6
  405a6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405a70:	00ff      	lsls	r7, r7, #3
  405a72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405a76:	19c8      	adds	r0, r1, r7
  405a78:	59ca      	ldr	r2, [r1, r7]
  405a7a:	3808      	subs	r0, #8
  405a7c:	4290      	cmp	r0, r2
  405a7e:	d04f      	beq.n	405b20 <_free_r+0x14c>
  405a80:	6851      	ldr	r1, [r2, #4]
  405a82:	f021 0103 	bic.w	r1, r1, #3
  405a86:	428b      	cmp	r3, r1
  405a88:	d232      	bcs.n	405af0 <_free_r+0x11c>
  405a8a:	6892      	ldr	r2, [r2, #8]
  405a8c:	4290      	cmp	r0, r2
  405a8e:	d1f7      	bne.n	405a80 <_free_r+0xac>
  405a90:	68c3      	ldr	r3, [r0, #12]
  405a92:	60a0      	str	r0, [r4, #8]
  405a94:	60e3      	str	r3, [r4, #12]
  405a96:	609c      	str	r4, [r3, #8]
  405a98:	60c4      	str	r4, [r0, #12]
  405a9a:	4640      	mov	r0, r8
  405a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405aa0:	f7fe bcc8 	b.w	404434 <__malloc_unlock>
  405aa4:	6895      	ldr	r5, [r2, #8]
  405aa6:	4f3b      	ldr	r7, [pc, #236]	; (405b94 <_free_r+0x1c0>)
  405aa8:	42bd      	cmp	r5, r7
  405aaa:	4403      	add	r3, r0
  405aac:	d040      	beq.n	405b30 <_free_r+0x15c>
  405aae:	68d0      	ldr	r0, [r2, #12]
  405ab0:	60e8      	str	r0, [r5, #12]
  405ab2:	f043 0201 	orr.w	r2, r3, #1
  405ab6:	6085      	str	r5, [r0, #8]
  405ab8:	6062      	str	r2, [r4, #4]
  405aba:	50e3      	str	r3, [r4, r3]
  405abc:	e7b7      	b.n	405a2e <_free_r+0x5a>
  405abe:	07ff      	lsls	r7, r7, #31
  405ac0:	4403      	add	r3, r0
  405ac2:	d407      	bmi.n	405ad4 <_free_r+0x100>
  405ac4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405ac8:	1aa4      	subs	r4, r4, r2
  405aca:	4413      	add	r3, r2
  405acc:	68a0      	ldr	r0, [r4, #8]
  405ace:	68e2      	ldr	r2, [r4, #12]
  405ad0:	60c2      	str	r2, [r0, #12]
  405ad2:	6090      	str	r0, [r2, #8]
  405ad4:	4a30      	ldr	r2, [pc, #192]	; (405b98 <_free_r+0x1c4>)
  405ad6:	6812      	ldr	r2, [r2, #0]
  405ad8:	f043 0001 	orr.w	r0, r3, #1
  405adc:	4293      	cmp	r3, r2
  405ade:	6060      	str	r0, [r4, #4]
  405ae0:	608c      	str	r4, [r1, #8]
  405ae2:	d3b9      	bcc.n	405a58 <_free_r+0x84>
  405ae4:	4b2d      	ldr	r3, [pc, #180]	; (405b9c <_free_r+0x1c8>)
  405ae6:	4640      	mov	r0, r8
  405ae8:	6819      	ldr	r1, [r3, #0]
  405aea:	f7ff ff23 	bl	405934 <_malloc_trim_r>
  405aee:	e7b3      	b.n	405a58 <_free_r+0x84>
  405af0:	4610      	mov	r0, r2
  405af2:	e7cd      	b.n	405a90 <_free_r+0xbc>
  405af4:	1811      	adds	r1, r2, r0
  405af6:	6849      	ldr	r1, [r1, #4]
  405af8:	07c9      	lsls	r1, r1, #31
  405afa:	d444      	bmi.n	405b86 <_free_r+0x1b2>
  405afc:	6891      	ldr	r1, [r2, #8]
  405afe:	68d2      	ldr	r2, [r2, #12]
  405b00:	60ca      	str	r2, [r1, #12]
  405b02:	4403      	add	r3, r0
  405b04:	f043 0001 	orr.w	r0, r3, #1
  405b08:	6091      	str	r1, [r2, #8]
  405b0a:	6060      	str	r0, [r4, #4]
  405b0c:	50e3      	str	r3, [r4, r3]
  405b0e:	e7a3      	b.n	405a58 <_free_r+0x84>
  405b10:	2a14      	cmp	r2, #20
  405b12:	d816      	bhi.n	405b42 <_free_r+0x16e>
  405b14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405b18:	00ff      	lsls	r7, r7, #3
  405b1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405b1e:	e7aa      	b.n	405a76 <_free_r+0xa2>
  405b20:	10aa      	asrs	r2, r5, #2
  405b22:	2301      	movs	r3, #1
  405b24:	684d      	ldr	r5, [r1, #4]
  405b26:	4093      	lsls	r3, r2
  405b28:	432b      	orrs	r3, r5
  405b2a:	604b      	str	r3, [r1, #4]
  405b2c:	4603      	mov	r3, r0
  405b2e:	e7b0      	b.n	405a92 <_free_r+0xbe>
  405b30:	f043 0201 	orr.w	r2, r3, #1
  405b34:	614c      	str	r4, [r1, #20]
  405b36:	610c      	str	r4, [r1, #16]
  405b38:	60e5      	str	r5, [r4, #12]
  405b3a:	60a5      	str	r5, [r4, #8]
  405b3c:	6062      	str	r2, [r4, #4]
  405b3e:	50e3      	str	r3, [r4, r3]
  405b40:	e78a      	b.n	405a58 <_free_r+0x84>
  405b42:	2a54      	cmp	r2, #84	; 0x54
  405b44:	d806      	bhi.n	405b54 <_free_r+0x180>
  405b46:	0b1a      	lsrs	r2, r3, #12
  405b48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405b4c:	00ff      	lsls	r7, r7, #3
  405b4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405b52:	e790      	b.n	405a76 <_free_r+0xa2>
  405b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405b58:	d806      	bhi.n	405b68 <_free_r+0x194>
  405b5a:	0bda      	lsrs	r2, r3, #15
  405b5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405b60:	00ff      	lsls	r7, r7, #3
  405b62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405b66:	e786      	b.n	405a76 <_free_r+0xa2>
  405b68:	f240 5054 	movw	r0, #1364	; 0x554
  405b6c:	4282      	cmp	r2, r0
  405b6e:	d806      	bhi.n	405b7e <_free_r+0x1aa>
  405b70:	0c9a      	lsrs	r2, r3, #18
  405b72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405b76:	00ff      	lsls	r7, r7, #3
  405b78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405b7c:	e77b      	b.n	405a76 <_free_r+0xa2>
  405b7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405b82:	257e      	movs	r5, #126	; 0x7e
  405b84:	e777      	b.n	405a76 <_free_r+0xa2>
  405b86:	f043 0101 	orr.w	r1, r3, #1
  405b8a:	6061      	str	r1, [r4, #4]
  405b8c:	6013      	str	r3, [r2, #0]
  405b8e:	e763      	b.n	405a58 <_free_r+0x84>
  405b90:	20400450 	.word	0x20400450
  405b94:	20400458 	.word	0x20400458
  405b98:	2040085c 	.word	0x2040085c
  405b9c:	20400ddc 	.word	0x20400ddc

00405ba0 <__sfvwrite_r>:
  405ba0:	6893      	ldr	r3, [r2, #8]
  405ba2:	2b00      	cmp	r3, #0
  405ba4:	d073      	beq.n	405c8e <__sfvwrite_r+0xee>
  405ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405baa:	898b      	ldrh	r3, [r1, #12]
  405bac:	b083      	sub	sp, #12
  405bae:	460c      	mov	r4, r1
  405bb0:	0719      	lsls	r1, r3, #28
  405bb2:	9000      	str	r0, [sp, #0]
  405bb4:	4616      	mov	r6, r2
  405bb6:	d526      	bpl.n	405c06 <__sfvwrite_r+0x66>
  405bb8:	6922      	ldr	r2, [r4, #16]
  405bba:	b322      	cbz	r2, 405c06 <__sfvwrite_r+0x66>
  405bbc:	f013 0002 	ands.w	r0, r3, #2
  405bc0:	6835      	ldr	r5, [r6, #0]
  405bc2:	d02c      	beq.n	405c1e <__sfvwrite_r+0x7e>
  405bc4:	f04f 0900 	mov.w	r9, #0
  405bc8:	4fb0      	ldr	r7, [pc, #704]	; (405e8c <__sfvwrite_r+0x2ec>)
  405bca:	46c8      	mov	r8, r9
  405bcc:	46b2      	mov	sl, r6
  405bce:	45b8      	cmp	r8, r7
  405bd0:	4643      	mov	r3, r8
  405bd2:	464a      	mov	r2, r9
  405bd4:	bf28      	it	cs
  405bd6:	463b      	movcs	r3, r7
  405bd8:	9800      	ldr	r0, [sp, #0]
  405bda:	f1b8 0f00 	cmp.w	r8, #0
  405bde:	d050      	beq.n	405c82 <__sfvwrite_r+0xe2>
  405be0:	69e1      	ldr	r1, [r4, #28]
  405be2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405be4:	47b0      	blx	r6
  405be6:	2800      	cmp	r0, #0
  405be8:	dd58      	ble.n	405c9c <__sfvwrite_r+0xfc>
  405bea:	f8da 3008 	ldr.w	r3, [sl, #8]
  405bee:	1a1b      	subs	r3, r3, r0
  405bf0:	4481      	add	r9, r0
  405bf2:	eba8 0800 	sub.w	r8, r8, r0
  405bf6:	f8ca 3008 	str.w	r3, [sl, #8]
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d1e7      	bne.n	405bce <__sfvwrite_r+0x2e>
  405bfe:	2000      	movs	r0, #0
  405c00:	b003      	add	sp, #12
  405c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c06:	4621      	mov	r1, r4
  405c08:	9800      	ldr	r0, [sp, #0]
  405c0a:	f7ff fc51 	bl	4054b0 <__swsetup_r>
  405c0e:	2800      	cmp	r0, #0
  405c10:	f040 8133 	bne.w	405e7a <__sfvwrite_r+0x2da>
  405c14:	89a3      	ldrh	r3, [r4, #12]
  405c16:	6835      	ldr	r5, [r6, #0]
  405c18:	f013 0002 	ands.w	r0, r3, #2
  405c1c:	d1d2      	bne.n	405bc4 <__sfvwrite_r+0x24>
  405c1e:	f013 0901 	ands.w	r9, r3, #1
  405c22:	d145      	bne.n	405cb0 <__sfvwrite_r+0x110>
  405c24:	464f      	mov	r7, r9
  405c26:	9601      	str	r6, [sp, #4]
  405c28:	b337      	cbz	r7, 405c78 <__sfvwrite_r+0xd8>
  405c2a:	059a      	lsls	r2, r3, #22
  405c2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405c30:	f140 8083 	bpl.w	405d3a <__sfvwrite_r+0x19a>
  405c34:	4547      	cmp	r7, r8
  405c36:	46c3      	mov	fp, r8
  405c38:	f0c0 80ab 	bcc.w	405d92 <__sfvwrite_r+0x1f2>
  405c3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405c40:	f040 80ac 	bne.w	405d9c <__sfvwrite_r+0x1fc>
  405c44:	6820      	ldr	r0, [r4, #0]
  405c46:	46ba      	mov	sl, r7
  405c48:	465a      	mov	r2, fp
  405c4a:	4649      	mov	r1, r9
  405c4c:	f000 fa40 	bl	4060d0 <memmove>
  405c50:	68a2      	ldr	r2, [r4, #8]
  405c52:	6823      	ldr	r3, [r4, #0]
  405c54:	eba2 0208 	sub.w	r2, r2, r8
  405c58:	445b      	add	r3, fp
  405c5a:	60a2      	str	r2, [r4, #8]
  405c5c:	6023      	str	r3, [r4, #0]
  405c5e:	9a01      	ldr	r2, [sp, #4]
  405c60:	6893      	ldr	r3, [r2, #8]
  405c62:	eba3 030a 	sub.w	r3, r3, sl
  405c66:	44d1      	add	r9, sl
  405c68:	eba7 070a 	sub.w	r7, r7, sl
  405c6c:	6093      	str	r3, [r2, #8]
  405c6e:	2b00      	cmp	r3, #0
  405c70:	d0c5      	beq.n	405bfe <__sfvwrite_r+0x5e>
  405c72:	89a3      	ldrh	r3, [r4, #12]
  405c74:	2f00      	cmp	r7, #0
  405c76:	d1d8      	bne.n	405c2a <__sfvwrite_r+0x8a>
  405c78:	f8d5 9000 	ldr.w	r9, [r5]
  405c7c:	686f      	ldr	r7, [r5, #4]
  405c7e:	3508      	adds	r5, #8
  405c80:	e7d2      	b.n	405c28 <__sfvwrite_r+0x88>
  405c82:	f8d5 9000 	ldr.w	r9, [r5]
  405c86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405c8a:	3508      	adds	r5, #8
  405c8c:	e79f      	b.n	405bce <__sfvwrite_r+0x2e>
  405c8e:	2000      	movs	r0, #0
  405c90:	4770      	bx	lr
  405c92:	4621      	mov	r1, r4
  405c94:	9800      	ldr	r0, [sp, #0]
  405c96:	f7ff fd1f 	bl	4056d8 <_fflush_r>
  405c9a:	b370      	cbz	r0, 405cfa <__sfvwrite_r+0x15a>
  405c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ca4:	f04f 30ff 	mov.w	r0, #4294967295
  405ca8:	81a3      	strh	r3, [r4, #12]
  405caa:	b003      	add	sp, #12
  405cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cb0:	4681      	mov	r9, r0
  405cb2:	4633      	mov	r3, r6
  405cb4:	464e      	mov	r6, r9
  405cb6:	46a8      	mov	r8, r5
  405cb8:	469a      	mov	sl, r3
  405cba:	464d      	mov	r5, r9
  405cbc:	b34e      	cbz	r6, 405d12 <__sfvwrite_r+0x172>
  405cbe:	b380      	cbz	r0, 405d22 <__sfvwrite_r+0x182>
  405cc0:	6820      	ldr	r0, [r4, #0]
  405cc2:	6923      	ldr	r3, [r4, #16]
  405cc4:	6962      	ldr	r2, [r4, #20]
  405cc6:	45b1      	cmp	r9, r6
  405cc8:	46cb      	mov	fp, r9
  405cca:	bf28      	it	cs
  405ccc:	46b3      	movcs	fp, r6
  405cce:	4298      	cmp	r0, r3
  405cd0:	465f      	mov	r7, fp
  405cd2:	d904      	bls.n	405cde <__sfvwrite_r+0x13e>
  405cd4:	68a3      	ldr	r3, [r4, #8]
  405cd6:	4413      	add	r3, r2
  405cd8:	459b      	cmp	fp, r3
  405cda:	f300 80a6 	bgt.w	405e2a <__sfvwrite_r+0x28a>
  405cde:	4593      	cmp	fp, r2
  405ce0:	db4b      	blt.n	405d7a <__sfvwrite_r+0x1da>
  405ce2:	4613      	mov	r3, r2
  405ce4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405ce6:	69e1      	ldr	r1, [r4, #28]
  405ce8:	9800      	ldr	r0, [sp, #0]
  405cea:	462a      	mov	r2, r5
  405cec:	47b8      	blx	r7
  405cee:	1e07      	subs	r7, r0, #0
  405cf0:	ddd4      	ble.n	405c9c <__sfvwrite_r+0xfc>
  405cf2:	ebb9 0907 	subs.w	r9, r9, r7
  405cf6:	d0cc      	beq.n	405c92 <__sfvwrite_r+0xf2>
  405cf8:	2001      	movs	r0, #1
  405cfa:	f8da 3008 	ldr.w	r3, [sl, #8]
  405cfe:	1bdb      	subs	r3, r3, r7
  405d00:	443d      	add	r5, r7
  405d02:	1bf6      	subs	r6, r6, r7
  405d04:	f8ca 3008 	str.w	r3, [sl, #8]
  405d08:	2b00      	cmp	r3, #0
  405d0a:	f43f af78 	beq.w	405bfe <__sfvwrite_r+0x5e>
  405d0e:	2e00      	cmp	r6, #0
  405d10:	d1d5      	bne.n	405cbe <__sfvwrite_r+0x11e>
  405d12:	f108 0308 	add.w	r3, r8, #8
  405d16:	e913 0060 	ldmdb	r3, {r5, r6}
  405d1a:	4698      	mov	r8, r3
  405d1c:	3308      	adds	r3, #8
  405d1e:	2e00      	cmp	r6, #0
  405d20:	d0f9      	beq.n	405d16 <__sfvwrite_r+0x176>
  405d22:	4632      	mov	r2, r6
  405d24:	210a      	movs	r1, #10
  405d26:	4628      	mov	r0, r5
  405d28:	f000 f982 	bl	406030 <memchr>
  405d2c:	2800      	cmp	r0, #0
  405d2e:	f000 80a1 	beq.w	405e74 <__sfvwrite_r+0x2d4>
  405d32:	3001      	adds	r0, #1
  405d34:	eba0 0905 	sub.w	r9, r0, r5
  405d38:	e7c2      	b.n	405cc0 <__sfvwrite_r+0x120>
  405d3a:	6820      	ldr	r0, [r4, #0]
  405d3c:	6923      	ldr	r3, [r4, #16]
  405d3e:	4298      	cmp	r0, r3
  405d40:	d802      	bhi.n	405d48 <__sfvwrite_r+0x1a8>
  405d42:	6963      	ldr	r3, [r4, #20]
  405d44:	429f      	cmp	r7, r3
  405d46:	d25d      	bcs.n	405e04 <__sfvwrite_r+0x264>
  405d48:	45b8      	cmp	r8, r7
  405d4a:	bf28      	it	cs
  405d4c:	46b8      	movcs	r8, r7
  405d4e:	4642      	mov	r2, r8
  405d50:	4649      	mov	r1, r9
  405d52:	f000 f9bd 	bl	4060d0 <memmove>
  405d56:	68a3      	ldr	r3, [r4, #8]
  405d58:	6822      	ldr	r2, [r4, #0]
  405d5a:	eba3 0308 	sub.w	r3, r3, r8
  405d5e:	4442      	add	r2, r8
  405d60:	60a3      	str	r3, [r4, #8]
  405d62:	6022      	str	r2, [r4, #0]
  405d64:	b10b      	cbz	r3, 405d6a <__sfvwrite_r+0x1ca>
  405d66:	46c2      	mov	sl, r8
  405d68:	e779      	b.n	405c5e <__sfvwrite_r+0xbe>
  405d6a:	4621      	mov	r1, r4
  405d6c:	9800      	ldr	r0, [sp, #0]
  405d6e:	f7ff fcb3 	bl	4056d8 <_fflush_r>
  405d72:	2800      	cmp	r0, #0
  405d74:	d192      	bne.n	405c9c <__sfvwrite_r+0xfc>
  405d76:	46c2      	mov	sl, r8
  405d78:	e771      	b.n	405c5e <__sfvwrite_r+0xbe>
  405d7a:	465a      	mov	r2, fp
  405d7c:	4629      	mov	r1, r5
  405d7e:	f000 f9a7 	bl	4060d0 <memmove>
  405d82:	68a2      	ldr	r2, [r4, #8]
  405d84:	6823      	ldr	r3, [r4, #0]
  405d86:	eba2 020b 	sub.w	r2, r2, fp
  405d8a:	445b      	add	r3, fp
  405d8c:	60a2      	str	r2, [r4, #8]
  405d8e:	6023      	str	r3, [r4, #0]
  405d90:	e7af      	b.n	405cf2 <__sfvwrite_r+0x152>
  405d92:	6820      	ldr	r0, [r4, #0]
  405d94:	46b8      	mov	r8, r7
  405d96:	46ba      	mov	sl, r7
  405d98:	46bb      	mov	fp, r7
  405d9a:	e755      	b.n	405c48 <__sfvwrite_r+0xa8>
  405d9c:	6962      	ldr	r2, [r4, #20]
  405d9e:	6820      	ldr	r0, [r4, #0]
  405da0:	6921      	ldr	r1, [r4, #16]
  405da2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405da6:	eba0 0a01 	sub.w	sl, r0, r1
  405daa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405dae:	f10a 0001 	add.w	r0, sl, #1
  405db2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405db6:	4438      	add	r0, r7
  405db8:	4540      	cmp	r0, r8
  405dba:	4642      	mov	r2, r8
  405dbc:	bf84      	itt	hi
  405dbe:	4680      	movhi	r8, r0
  405dc0:	4642      	movhi	r2, r8
  405dc2:	055b      	lsls	r3, r3, #21
  405dc4:	d544      	bpl.n	405e50 <__sfvwrite_r+0x2b0>
  405dc6:	4611      	mov	r1, r2
  405dc8:	9800      	ldr	r0, [sp, #0]
  405dca:	f7fd ff95 	bl	403cf8 <_malloc_r>
  405dce:	4683      	mov	fp, r0
  405dd0:	2800      	cmp	r0, #0
  405dd2:	d055      	beq.n	405e80 <__sfvwrite_r+0x2e0>
  405dd4:	4652      	mov	r2, sl
  405dd6:	6921      	ldr	r1, [r4, #16]
  405dd8:	f7fe fa3e 	bl	404258 <memcpy>
  405ddc:	89a3      	ldrh	r3, [r4, #12]
  405dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405de6:	81a3      	strh	r3, [r4, #12]
  405de8:	eb0b 000a 	add.w	r0, fp, sl
  405dec:	eba8 030a 	sub.w	r3, r8, sl
  405df0:	f8c4 b010 	str.w	fp, [r4, #16]
  405df4:	f8c4 8014 	str.w	r8, [r4, #20]
  405df8:	6020      	str	r0, [r4, #0]
  405dfa:	60a3      	str	r3, [r4, #8]
  405dfc:	46b8      	mov	r8, r7
  405dfe:	46ba      	mov	sl, r7
  405e00:	46bb      	mov	fp, r7
  405e02:	e721      	b.n	405c48 <__sfvwrite_r+0xa8>
  405e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405e08:	42b9      	cmp	r1, r7
  405e0a:	bf28      	it	cs
  405e0c:	4639      	movcs	r1, r7
  405e0e:	464a      	mov	r2, r9
  405e10:	fb91 f1f3 	sdiv	r1, r1, r3
  405e14:	9800      	ldr	r0, [sp, #0]
  405e16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405e18:	fb03 f301 	mul.w	r3, r3, r1
  405e1c:	69e1      	ldr	r1, [r4, #28]
  405e1e:	47b0      	blx	r6
  405e20:	f1b0 0a00 	subs.w	sl, r0, #0
  405e24:	f73f af1b 	bgt.w	405c5e <__sfvwrite_r+0xbe>
  405e28:	e738      	b.n	405c9c <__sfvwrite_r+0xfc>
  405e2a:	461a      	mov	r2, r3
  405e2c:	4629      	mov	r1, r5
  405e2e:	9301      	str	r3, [sp, #4]
  405e30:	f000 f94e 	bl	4060d0 <memmove>
  405e34:	6822      	ldr	r2, [r4, #0]
  405e36:	9b01      	ldr	r3, [sp, #4]
  405e38:	9800      	ldr	r0, [sp, #0]
  405e3a:	441a      	add	r2, r3
  405e3c:	6022      	str	r2, [r4, #0]
  405e3e:	4621      	mov	r1, r4
  405e40:	f7ff fc4a 	bl	4056d8 <_fflush_r>
  405e44:	9b01      	ldr	r3, [sp, #4]
  405e46:	2800      	cmp	r0, #0
  405e48:	f47f af28 	bne.w	405c9c <__sfvwrite_r+0xfc>
  405e4c:	461f      	mov	r7, r3
  405e4e:	e750      	b.n	405cf2 <__sfvwrite_r+0x152>
  405e50:	9800      	ldr	r0, [sp, #0]
  405e52:	f000 f9a1 	bl	406198 <_realloc_r>
  405e56:	4683      	mov	fp, r0
  405e58:	2800      	cmp	r0, #0
  405e5a:	d1c5      	bne.n	405de8 <__sfvwrite_r+0x248>
  405e5c:	9d00      	ldr	r5, [sp, #0]
  405e5e:	6921      	ldr	r1, [r4, #16]
  405e60:	4628      	mov	r0, r5
  405e62:	f7ff fdb7 	bl	4059d4 <_free_r>
  405e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e6a:	220c      	movs	r2, #12
  405e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405e70:	602a      	str	r2, [r5, #0]
  405e72:	e715      	b.n	405ca0 <__sfvwrite_r+0x100>
  405e74:	f106 0901 	add.w	r9, r6, #1
  405e78:	e722      	b.n	405cc0 <__sfvwrite_r+0x120>
  405e7a:	f04f 30ff 	mov.w	r0, #4294967295
  405e7e:	e6bf      	b.n	405c00 <__sfvwrite_r+0x60>
  405e80:	9a00      	ldr	r2, [sp, #0]
  405e82:	230c      	movs	r3, #12
  405e84:	6013      	str	r3, [r2, #0]
  405e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e8a:	e709      	b.n	405ca0 <__sfvwrite_r+0x100>
  405e8c:	7ffffc00 	.word	0x7ffffc00

00405e90 <_fwalk_reent>:
  405e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405e94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405e98:	d01f      	beq.n	405eda <_fwalk_reent+0x4a>
  405e9a:	4688      	mov	r8, r1
  405e9c:	4606      	mov	r6, r0
  405e9e:	f04f 0900 	mov.w	r9, #0
  405ea2:	687d      	ldr	r5, [r7, #4]
  405ea4:	68bc      	ldr	r4, [r7, #8]
  405ea6:	3d01      	subs	r5, #1
  405ea8:	d411      	bmi.n	405ece <_fwalk_reent+0x3e>
  405eaa:	89a3      	ldrh	r3, [r4, #12]
  405eac:	2b01      	cmp	r3, #1
  405eae:	f105 35ff 	add.w	r5, r5, #4294967295
  405eb2:	d908      	bls.n	405ec6 <_fwalk_reent+0x36>
  405eb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405eb8:	3301      	adds	r3, #1
  405eba:	4621      	mov	r1, r4
  405ebc:	4630      	mov	r0, r6
  405ebe:	d002      	beq.n	405ec6 <_fwalk_reent+0x36>
  405ec0:	47c0      	blx	r8
  405ec2:	ea49 0900 	orr.w	r9, r9, r0
  405ec6:	1c6b      	adds	r3, r5, #1
  405ec8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405ecc:	d1ed      	bne.n	405eaa <_fwalk_reent+0x1a>
  405ece:	683f      	ldr	r7, [r7, #0]
  405ed0:	2f00      	cmp	r7, #0
  405ed2:	d1e6      	bne.n	405ea2 <_fwalk_reent+0x12>
  405ed4:	4648      	mov	r0, r9
  405ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405eda:	46b9      	mov	r9, r7
  405edc:	4648      	mov	r0, r9
  405ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ee2:	bf00      	nop

00405ee4 <__locale_mb_cur_max>:
  405ee4:	4b04      	ldr	r3, [pc, #16]	; (405ef8 <__locale_mb_cur_max+0x14>)
  405ee6:	4a05      	ldr	r2, [pc, #20]	; (405efc <__locale_mb_cur_max+0x18>)
  405ee8:	681b      	ldr	r3, [r3, #0]
  405eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405eec:	2b00      	cmp	r3, #0
  405eee:	bf08      	it	eq
  405ef0:	4613      	moveq	r3, r2
  405ef2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405ef6:	4770      	bx	lr
  405ef8:	20400024 	.word	0x20400024
  405efc:	20400864 	.word	0x20400864

00405f00 <__retarget_lock_init_recursive>:
  405f00:	4770      	bx	lr
  405f02:	bf00      	nop

00405f04 <__retarget_lock_close_recursive>:
  405f04:	4770      	bx	lr
  405f06:	bf00      	nop

00405f08 <__retarget_lock_acquire_recursive>:
  405f08:	4770      	bx	lr
  405f0a:	bf00      	nop

00405f0c <__retarget_lock_release_recursive>:
  405f0c:	4770      	bx	lr
  405f0e:	bf00      	nop

00405f10 <__swhatbuf_r>:
  405f10:	b570      	push	{r4, r5, r6, lr}
  405f12:	460c      	mov	r4, r1
  405f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405f18:	2900      	cmp	r1, #0
  405f1a:	b090      	sub	sp, #64	; 0x40
  405f1c:	4615      	mov	r5, r2
  405f1e:	461e      	mov	r6, r3
  405f20:	db14      	blt.n	405f4c <__swhatbuf_r+0x3c>
  405f22:	aa01      	add	r2, sp, #4
  405f24:	f000 fc9e 	bl	406864 <_fstat_r>
  405f28:	2800      	cmp	r0, #0
  405f2a:	db0f      	blt.n	405f4c <__swhatbuf_r+0x3c>
  405f2c:	9a02      	ldr	r2, [sp, #8]
  405f2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405f32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405f36:	fab2 f282 	clz	r2, r2
  405f3a:	0952      	lsrs	r2, r2, #5
  405f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405f40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405f44:	6032      	str	r2, [r6, #0]
  405f46:	602b      	str	r3, [r5, #0]
  405f48:	b010      	add	sp, #64	; 0x40
  405f4a:	bd70      	pop	{r4, r5, r6, pc}
  405f4c:	89a2      	ldrh	r2, [r4, #12]
  405f4e:	2300      	movs	r3, #0
  405f50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405f54:	6033      	str	r3, [r6, #0]
  405f56:	d004      	beq.n	405f62 <__swhatbuf_r+0x52>
  405f58:	2240      	movs	r2, #64	; 0x40
  405f5a:	4618      	mov	r0, r3
  405f5c:	602a      	str	r2, [r5, #0]
  405f5e:	b010      	add	sp, #64	; 0x40
  405f60:	bd70      	pop	{r4, r5, r6, pc}
  405f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405f66:	602b      	str	r3, [r5, #0]
  405f68:	b010      	add	sp, #64	; 0x40
  405f6a:	bd70      	pop	{r4, r5, r6, pc}

00405f6c <__smakebuf_r>:
  405f6c:	898a      	ldrh	r2, [r1, #12]
  405f6e:	0792      	lsls	r2, r2, #30
  405f70:	460b      	mov	r3, r1
  405f72:	d506      	bpl.n	405f82 <__smakebuf_r+0x16>
  405f74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405f78:	2101      	movs	r1, #1
  405f7a:	601a      	str	r2, [r3, #0]
  405f7c:	611a      	str	r2, [r3, #16]
  405f7e:	6159      	str	r1, [r3, #20]
  405f80:	4770      	bx	lr
  405f82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f84:	b083      	sub	sp, #12
  405f86:	ab01      	add	r3, sp, #4
  405f88:	466a      	mov	r2, sp
  405f8a:	460c      	mov	r4, r1
  405f8c:	4606      	mov	r6, r0
  405f8e:	f7ff ffbf 	bl	405f10 <__swhatbuf_r>
  405f92:	9900      	ldr	r1, [sp, #0]
  405f94:	4605      	mov	r5, r0
  405f96:	4630      	mov	r0, r6
  405f98:	f7fd feae 	bl	403cf8 <_malloc_r>
  405f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405fa0:	b1d8      	cbz	r0, 405fda <__smakebuf_r+0x6e>
  405fa2:	9a01      	ldr	r2, [sp, #4]
  405fa4:	4f15      	ldr	r7, [pc, #84]	; (405ffc <__smakebuf_r+0x90>)
  405fa6:	9900      	ldr	r1, [sp, #0]
  405fa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405fae:	81a3      	strh	r3, [r4, #12]
  405fb0:	6020      	str	r0, [r4, #0]
  405fb2:	6120      	str	r0, [r4, #16]
  405fb4:	6161      	str	r1, [r4, #20]
  405fb6:	b91a      	cbnz	r2, 405fc0 <__smakebuf_r+0x54>
  405fb8:	432b      	orrs	r3, r5
  405fba:	81a3      	strh	r3, [r4, #12]
  405fbc:	b003      	add	sp, #12
  405fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fc0:	4630      	mov	r0, r6
  405fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405fc6:	f000 fc61 	bl	40688c <_isatty_r>
  405fca:	b1a0      	cbz	r0, 405ff6 <__smakebuf_r+0x8a>
  405fcc:	89a3      	ldrh	r3, [r4, #12]
  405fce:	f023 0303 	bic.w	r3, r3, #3
  405fd2:	f043 0301 	orr.w	r3, r3, #1
  405fd6:	b21b      	sxth	r3, r3
  405fd8:	e7ee      	b.n	405fb8 <__smakebuf_r+0x4c>
  405fda:	059a      	lsls	r2, r3, #22
  405fdc:	d4ee      	bmi.n	405fbc <__smakebuf_r+0x50>
  405fde:	f023 0303 	bic.w	r3, r3, #3
  405fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405fe6:	f043 0302 	orr.w	r3, r3, #2
  405fea:	2101      	movs	r1, #1
  405fec:	81a3      	strh	r3, [r4, #12]
  405fee:	6022      	str	r2, [r4, #0]
  405ff0:	6122      	str	r2, [r4, #16]
  405ff2:	6161      	str	r1, [r4, #20]
  405ff4:	e7e2      	b.n	405fbc <__smakebuf_r+0x50>
  405ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ffa:	e7dd      	b.n	405fb8 <__smakebuf_r+0x4c>
  405ffc:	0040572d 	.word	0x0040572d

00406000 <__ascii_mbtowc>:
  406000:	b082      	sub	sp, #8
  406002:	b149      	cbz	r1, 406018 <__ascii_mbtowc+0x18>
  406004:	b15a      	cbz	r2, 40601e <__ascii_mbtowc+0x1e>
  406006:	b16b      	cbz	r3, 406024 <__ascii_mbtowc+0x24>
  406008:	7813      	ldrb	r3, [r2, #0]
  40600a:	600b      	str	r3, [r1, #0]
  40600c:	7812      	ldrb	r2, [r2, #0]
  40600e:	1c10      	adds	r0, r2, #0
  406010:	bf18      	it	ne
  406012:	2001      	movne	r0, #1
  406014:	b002      	add	sp, #8
  406016:	4770      	bx	lr
  406018:	a901      	add	r1, sp, #4
  40601a:	2a00      	cmp	r2, #0
  40601c:	d1f3      	bne.n	406006 <__ascii_mbtowc+0x6>
  40601e:	4610      	mov	r0, r2
  406020:	b002      	add	sp, #8
  406022:	4770      	bx	lr
  406024:	f06f 0001 	mvn.w	r0, #1
  406028:	e7f4      	b.n	406014 <__ascii_mbtowc+0x14>
  40602a:	bf00      	nop
  40602c:	0000      	movs	r0, r0
	...

00406030 <memchr>:
  406030:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406034:	2a10      	cmp	r2, #16
  406036:	db2b      	blt.n	406090 <memchr+0x60>
  406038:	f010 0f07 	tst.w	r0, #7
  40603c:	d008      	beq.n	406050 <memchr+0x20>
  40603e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406042:	3a01      	subs	r2, #1
  406044:	428b      	cmp	r3, r1
  406046:	d02d      	beq.n	4060a4 <memchr+0x74>
  406048:	f010 0f07 	tst.w	r0, #7
  40604c:	b342      	cbz	r2, 4060a0 <memchr+0x70>
  40604e:	d1f6      	bne.n	40603e <memchr+0xe>
  406050:	b4f0      	push	{r4, r5, r6, r7}
  406052:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406056:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40605a:	f022 0407 	bic.w	r4, r2, #7
  40605e:	f07f 0700 	mvns.w	r7, #0
  406062:	2300      	movs	r3, #0
  406064:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406068:	3c08      	subs	r4, #8
  40606a:	ea85 0501 	eor.w	r5, r5, r1
  40606e:	ea86 0601 	eor.w	r6, r6, r1
  406072:	fa85 f547 	uadd8	r5, r5, r7
  406076:	faa3 f587 	sel	r5, r3, r7
  40607a:	fa86 f647 	uadd8	r6, r6, r7
  40607e:	faa5 f687 	sel	r6, r5, r7
  406082:	b98e      	cbnz	r6, 4060a8 <memchr+0x78>
  406084:	d1ee      	bne.n	406064 <memchr+0x34>
  406086:	bcf0      	pop	{r4, r5, r6, r7}
  406088:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40608c:	f002 0207 	and.w	r2, r2, #7
  406090:	b132      	cbz	r2, 4060a0 <memchr+0x70>
  406092:	f810 3b01 	ldrb.w	r3, [r0], #1
  406096:	3a01      	subs	r2, #1
  406098:	ea83 0301 	eor.w	r3, r3, r1
  40609c:	b113      	cbz	r3, 4060a4 <memchr+0x74>
  40609e:	d1f8      	bne.n	406092 <memchr+0x62>
  4060a0:	2000      	movs	r0, #0
  4060a2:	4770      	bx	lr
  4060a4:	3801      	subs	r0, #1
  4060a6:	4770      	bx	lr
  4060a8:	2d00      	cmp	r5, #0
  4060aa:	bf06      	itte	eq
  4060ac:	4635      	moveq	r5, r6
  4060ae:	3803      	subeq	r0, #3
  4060b0:	3807      	subne	r0, #7
  4060b2:	f015 0f01 	tst.w	r5, #1
  4060b6:	d107      	bne.n	4060c8 <memchr+0x98>
  4060b8:	3001      	adds	r0, #1
  4060ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4060be:	bf02      	ittt	eq
  4060c0:	3001      	addeq	r0, #1
  4060c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4060c6:	3001      	addeq	r0, #1
  4060c8:	bcf0      	pop	{r4, r5, r6, r7}
  4060ca:	3801      	subs	r0, #1
  4060cc:	4770      	bx	lr
  4060ce:	bf00      	nop

004060d0 <memmove>:
  4060d0:	4288      	cmp	r0, r1
  4060d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060d4:	d90d      	bls.n	4060f2 <memmove+0x22>
  4060d6:	188b      	adds	r3, r1, r2
  4060d8:	4298      	cmp	r0, r3
  4060da:	d20a      	bcs.n	4060f2 <memmove+0x22>
  4060dc:	1884      	adds	r4, r0, r2
  4060de:	2a00      	cmp	r2, #0
  4060e0:	d051      	beq.n	406186 <memmove+0xb6>
  4060e2:	4622      	mov	r2, r4
  4060e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4060e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4060ec:	4299      	cmp	r1, r3
  4060ee:	d1f9      	bne.n	4060e4 <memmove+0x14>
  4060f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4060f2:	2a0f      	cmp	r2, #15
  4060f4:	d948      	bls.n	406188 <memmove+0xb8>
  4060f6:	ea41 0300 	orr.w	r3, r1, r0
  4060fa:	079b      	lsls	r3, r3, #30
  4060fc:	d146      	bne.n	40618c <memmove+0xbc>
  4060fe:	f100 0410 	add.w	r4, r0, #16
  406102:	f101 0310 	add.w	r3, r1, #16
  406106:	4615      	mov	r5, r2
  406108:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40610c:	f844 6c10 	str.w	r6, [r4, #-16]
  406110:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406114:	f844 6c0c 	str.w	r6, [r4, #-12]
  406118:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40611c:	f844 6c08 	str.w	r6, [r4, #-8]
  406120:	3d10      	subs	r5, #16
  406122:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406126:	f844 6c04 	str.w	r6, [r4, #-4]
  40612a:	2d0f      	cmp	r5, #15
  40612c:	f103 0310 	add.w	r3, r3, #16
  406130:	f104 0410 	add.w	r4, r4, #16
  406134:	d8e8      	bhi.n	406108 <memmove+0x38>
  406136:	f1a2 0310 	sub.w	r3, r2, #16
  40613a:	f023 030f 	bic.w	r3, r3, #15
  40613e:	f002 0e0f 	and.w	lr, r2, #15
  406142:	3310      	adds	r3, #16
  406144:	f1be 0f03 	cmp.w	lr, #3
  406148:	4419      	add	r1, r3
  40614a:	4403      	add	r3, r0
  40614c:	d921      	bls.n	406192 <memmove+0xc2>
  40614e:	1f1e      	subs	r6, r3, #4
  406150:	460d      	mov	r5, r1
  406152:	4674      	mov	r4, lr
  406154:	3c04      	subs	r4, #4
  406156:	f855 7b04 	ldr.w	r7, [r5], #4
  40615a:	f846 7f04 	str.w	r7, [r6, #4]!
  40615e:	2c03      	cmp	r4, #3
  406160:	d8f8      	bhi.n	406154 <memmove+0x84>
  406162:	f1ae 0404 	sub.w	r4, lr, #4
  406166:	f024 0403 	bic.w	r4, r4, #3
  40616a:	3404      	adds	r4, #4
  40616c:	4421      	add	r1, r4
  40616e:	4423      	add	r3, r4
  406170:	f002 0203 	and.w	r2, r2, #3
  406174:	b162      	cbz	r2, 406190 <memmove+0xc0>
  406176:	3b01      	subs	r3, #1
  406178:	440a      	add	r2, r1
  40617a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40617e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406182:	428a      	cmp	r2, r1
  406184:	d1f9      	bne.n	40617a <memmove+0xaa>
  406186:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406188:	4603      	mov	r3, r0
  40618a:	e7f3      	b.n	406174 <memmove+0xa4>
  40618c:	4603      	mov	r3, r0
  40618e:	e7f2      	b.n	406176 <memmove+0xa6>
  406190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406192:	4672      	mov	r2, lr
  406194:	e7ee      	b.n	406174 <memmove+0xa4>
  406196:	bf00      	nop

00406198 <_realloc_r>:
  406198:	2900      	cmp	r1, #0
  40619a:	f000 8095 	beq.w	4062c8 <_realloc_r+0x130>
  40619e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061a2:	460d      	mov	r5, r1
  4061a4:	4616      	mov	r6, r2
  4061a6:	b083      	sub	sp, #12
  4061a8:	4680      	mov	r8, r0
  4061aa:	f106 070b 	add.w	r7, r6, #11
  4061ae:	f7fe f93b 	bl	404428 <__malloc_lock>
  4061b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4061b6:	2f16      	cmp	r7, #22
  4061b8:	f02e 0403 	bic.w	r4, lr, #3
  4061bc:	f1a5 0908 	sub.w	r9, r5, #8
  4061c0:	d83c      	bhi.n	40623c <_realloc_r+0xa4>
  4061c2:	2210      	movs	r2, #16
  4061c4:	4617      	mov	r7, r2
  4061c6:	42be      	cmp	r6, r7
  4061c8:	d83d      	bhi.n	406246 <_realloc_r+0xae>
  4061ca:	4294      	cmp	r4, r2
  4061cc:	da43      	bge.n	406256 <_realloc_r+0xbe>
  4061ce:	4bc4      	ldr	r3, [pc, #784]	; (4064e0 <_realloc_r+0x348>)
  4061d0:	6899      	ldr	r1, [r3, #8]
  4061d2:	eb09 0004 	add.w	r0, r9, r4
  4061d6:	4288      	cmp	r0, r1
  4061d8:	f000 80b4 	beq.w	406344 <_realloc_r+0x1ac>
  4061dc:	6843      	ldr	r3, [r0, #4]
  4061de:	f023 0101 	bic.w	r1, r3, #1
  4061e2:	4401      	add	r1, r0
  4061e4:	6849      	ldr	r1, [r1, #4]
  4061e6:	07c9      	lsls	r1, r1, #31
  4061e8:	d54c      	bpl.n	406284 <_realloc_r+0xec>
  4061ea:	f01e 0f01 	tst.w	lr, #1
  4061ee:	f000 809b 	beq.w	406328 <_realloc_r+0x190>
  4061f2:	4631      	mov	r1, r6
  4061f4:	4640      	mov	r0, r8
  4061f6:	f7fd fd7f 	bl	403cf8 <_malloc_r>
  4061fa:	4606      	mov	r6, r0
  4061fc:	2800      	cmp	r0, #0
  4061fe:	d03a      	beq.n	406276 <_realloc_r+0xde>
  406200:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406204:	f023 0301 	bic.w	r3, r3, #1
  406208:	444b      	add	r3, r9
  40620a:	f1a0 0208 	sub.w	r2, r0, #8
  40620e:	429a      	cmp	r2, r3
  406210:	f000 8121 	beq.w	406456 <_realloc_r+0x2be>
  406214:	1f22      	subs	r2, r4, #4
  406216:	2a24      	cmp	r2, #36	; 0x24
  406218:	f200 8107 	bhi.w	40642a <_realloc_r+0x292>
  40621c:	2a13      	cmp	r2, #19
  40621e:	f200 80db 	bhi.w	4063d8 <_realloc_r+0x240>
  406222:	4603      	mov	r3, r0
  406224:	462a      	mov	r2, r5
  406226:	6811      	ldr	r1, [r2, #0]
  406228:	6019      	str	r1, [r3, #0]
  40622a:	6851      	ldr	r1, [r2, #4]
  40622c:	6059      	str	r1, [r3, #4]
  40622e:	6892      	ldr	r2, [r2, #8]
  406230:	609a      	str	r2, [r3, #8]
  406232:	4629      	mov	r1, r5
  406234:	4640      	mov	r0, r8
  406236:	f7ff fbcd 	bl	4059d4 <_free_r>
  40623a:	e01c      	b.n	406276 <_realloc_r+0xde>
  40623c:	f027 0707 	bic.w	r7, r7, #7
  406240:	2f00      	cmp	r7, #0
  406242:	463a      	mov	r2, r7
  406244:	dabf      	bge.n	4061c6 <_realloc_r+0x2e>
  406246:	2600      	movs	r6, #0
  406248:	230c      	movs	r3, #12
  40624a:	4630      	mov	r0, r6
  40624c:	f8c8 3000 	str.w	r3, [r8]
  406250:	b003      	add	sp, #12
  406252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406256:	462e      	mov	r6, r5
  406258:	1be3      	subs	r3, r4, r7
  40625a:	2b0f      	cmp	r3, #15
  40625c:	d81e      	bhi.n	40629c <_realloc_r+0x104>
  40625e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406262:	f003 0301 	and.w	r3, r3, #1
  406266:	4323      	orrs	r3, r4
  406268:	444c      	add	r4, r9
  40626a:	f8c9 3004 	str.w	r3, [r9, #4]
  40626e:	6863      	ldr	r3, [r4, #4]
  406270:	f043 0301 	orr.w	r3, r3, #1
  406274:	6063      	str	r3, [r4, #4]
  406276:	4640      	mov	r0, r8
  406278:	f7fe f8dc 	bl	404434 <__malloc_unlock>
  40627c:	4630      	mov	r0, r6
  40627e:	b003      	add	sp, #12
  406280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406284:	f023 0303 	bic.w	r3, r3, #3
  406288:	18e1      	adds	r1, r4, r3
  40628a:	4291      	cmp	r1, r2
  40628c:	db1f      	blt.n	4062ce <_realloc_r+0x136>
  40628e:	68c3      	ldr	r3, [r0, #12]
  406290:	6882      	ldr	r2, [r0, #8]
  406292:	462e      	mov	r6, r5
  406294:	60d3      	str	r3, [r2, #12]
  406296:	460c      	mov	r4, r1
  406298:	609a      	str	r2, [r3, #8]
  40629a:	e7dd      	b.n	406258 <_realloc_r+0xc0>
  40629c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4062a0:	eb09 0107 	add.w	r1, r9, r7
  4062a4:	f002 0201 	and.w	r2, r2, #1
  4062a8:	444c      	add	r4, r9
  4062aa:	f043 0301 	orr.w	r3, r3, #1
  4062ae:	4317      	orrs	r7, r2
  4062b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4062b4:	604b      	str	r3, [r1, #4]
  4062b6:	6863      	ldr	r3, [r4, #4]
  4062b8:	f043 0301 	orr.w	r3, r3, #1
  4062bc:	3108      	adds	r1, #8
  4062be:	6063      	str	r3, [r4, #4]
  4062c0:	4640      	mov	r0, r8
  4062c2:	f7ff fb87 	bl	4059d4 <_free_r>
  4062c6:	e7d6      	b.n	406276 <_realloc_r+0xde>
  4062c8:	4611      	mov	r1, r2
  4062ca:	f7fd bd15 	b.w	403cf8 <_malloc_r>
  4062ce:	f01e 0f01 	tst.w	lr, #1
  4062d2:	d18e      	bne.n	4061f2 <_realloc_r+0x5a>
  4062d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4062d8:	eba9 0a01 	sub.w	sl, r9, r1
  4062dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4062e0:	f021 0103 	bic.w	r1, r1, #3
  4062e4:	440b      	add	r3, r1
  4062e6:	4423      	add	r3, r4
  4062e8:	4293      	cmp	r3, r2
  4062ea:	db25      	blt.n	406338 <_realloc_r+0x1a0>
  4062ec:	68c2      	ldr	r2, [r0, #12]
  4062ee:	6881      	ldr	r1, [r0, #8]
  4062f0:	4656      	mov	r6, sl
  4062f2:	60ca      	str	r2, [r1, #12]
  4062f4:	6091      	str	r1, [r2, #8]
  4062f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4062fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4062fe:	1f22      	subs	r2, r4, #4
  406300:	2a24      	cmp	r2, #36	; 0x24
  406302:	60c1      	str	r1, [r0, #12]
  406304:	6088      	str	r0, [r1, #8]
  406306:	f200 8094 	bhi.w	406432 <_realloc_r+0x29a>
  40630a:	2a13      	cmp	r2, #19
  40630c:	d96f      	bls.n	4063ee <_realloc_r+0x256>
  40630e:	6829      	ldr	r1, [r5, #0]
  406310:	f8ca 1008 	str.w	r1, [sl, #8]
  406314:	6869      	ldr	r1, [r5, #4]
  406316:	f8ca 100c 	str.w	r1, [sl, #12]
  40631a:	2a1b      	cmp	r2, #27
  40631c:	f200 80a2 	bhi.w	406464 <_realloc_r+0x2cc>
  406320:	3508      	adds	r5, #8
  406322:	f10a 0210 	add.w	r2, sl, #16
  406326:	e063      	b.n	4063f0 <_realloc_r+0x258>
  406328:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40632c:	eba9 0a03 	sub.w	sl, r9, r3
  406330:	f8da 1004 	ldr.w	r1, [sl, #4]
  406334:	f021 0103 	bic.w	r1, r1, #3
  406338:	1863      	adds	r3, r4, r1
  40633a:	4293      	cmp	r3, r2
  40633c:	f6ff af59 	blt.w	4061f2 <_realloc_r+0x5a>
  406340:	4656      	mov	r6, sl
  406342:	e7d8      	b.n	4062f6 <_realloc_r+0x15e>
  406344:	6841      	ldr	r1, [r0, #4]
  406346:	f021 0b03 	bic.w	fp, r1, #3
  40634a:	44a3      	add	fp, r4
  40634c:	f107 0010 	add.w	r0, r7, #16
  406350:	4583      	cmp	fp, r0
  406352:	da56      	bge.n	406402 <_realloc_r+0x26a>
  406354:	f01e 0f01 	tst.w	lr, #1
  406358:	f47f af4b 	bne.w	4061f2 <_realloc_r+0x5a>
  40635c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406360:	eba9 0a01 	sub.w	sl, r9, r1
  406364:	f8da 1004 	ldr.w	r1, [sl, #4]
  406368:	f021 0103 	bic.w	r1, r1, #3
  40636c:	448b      	add	fp, r1
  40636e:	4558      	cmp	r0, fp
  406370:	dce2      	bgt.n	406338 <_realloc_r+0x1a0>
  406372:	4656      	mov	r6, sl
  406374:	f8da 100c 	ldr.w	r1, [sl, #12]
  406378:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40637c:	1f22      	subs	r2, r4, #4
  40637e:	2a24      	cmp	r2, #36	; 0x24
  406380:	60c1      	str	r1, [r0, #12]
  406382:	6088      	str	r0, [r1, #8]
  406384:	f200 808f 	bhi.w	4064a6 <_realloc_r+0x30e>
  406388:	2a13      	cmp	r2, #19
  40638a:	f240 808a 	bls.w	4064a2 <_realloc_r+0x30a>
  40638e:	6829      	ldr	r1, [r5, #0]
  406390:	f8ca 1008 	str.w	r1, [sl, #8]
  406394:	6869      	ldr	r1, [r5, #4]
  406396:	f8ca 100c 	str.w	r1, [sl, #12]
  40639a:	2a1b      	cmp	r2, #27
  40639c:	f200 808a 	bhi.w	4064b4 <_realloc_r+0x31c>
  4063a0:	3508      	adds	r5, #8
  4063a2:	f10a 0210 	add.w	r2, sl, #16
  4063a6:	6829      	ldr	r1, [r5, #0]
  4063a8:	6011      	str	r1, [r2, #0]
  4063aa:	6869      	ldr	r1, [r5, #4]
  4063ac:	6051      	str	r1, [r2, #4]
  4063ae:	68a9      	ldr	r1, [r5, #8]
  4063b0:	6091      	str	r1, [r2, #8]
  4063b2:	eb0a 0107 	add.w	r1, sl, r7
  4063b6:	ebab 0207 	sub.w	r2, fp, r7
  4063ba:	f042 0201 	orr.w	r2, r2, #1
  4063be:	6099      	str	r1, [r3, #8]
  4063c0:	604a      	str	r2, [r1, #4]
  4063c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4063c6:	f003 0301 	and.w	r3, r3, #1
  4063ca:	431f      	orrs	r7, r3
  4063cc:	4640      	mov	r0, r8
  4063ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4063d2:	f7fe f82f 	bl	404434 <__malloc_unlock>
  4063d6:	e751      	b.n	40627c <_realloc_r+0xe4>
  4063d8:	682b      	ldr	r3, [r5, #0]
  4063da:	6003      	str	r3, [r0, #0]
  4063dc:	686b      	ldr	r3, [r5, #4]
  4063de:	6043      	str	r3, [r0, #4]
  4063e0:	2a1b      	cmp	r2, #27
  4063e2:	d82d      	bhi.n	406440 <_realloc_r+0x2a8>
  4063e4:	f100 0308 	add.w	r3, r0, #8
  4063e8:	f105 0208 	add.w	r2, r5, #8
  4063ec:	e71b      	b.n	406226 <_realloc_r+0x8e>
  4063ee:	4632      	mov	r2, r6
  4063f0:	6829      	ldr	r1, [r5, #0]
  4063f2:	6011      	str	r1, [r2, #0]
  4063f4:	6869      	ldr	r1, [r5, #4]
  4063f6:	6051      	str	r1, [r2, #4]
  4063f8:	68a9      	ldr	r1, [r5, #8]
  4063fa:	6091      	str	r1, [r2, #8]
  4063fc:	461c      	mov	r4, r3
  4063fe:	46d1      	mov	r9, sl
  406400:	e72a      	b.n	406258 <_realloc_r+0xc0>
  406402:	eb09 0107 	add.w	r1, r9, r7
  406406:	ebab 0b07 	sub.w	fp, fp, r7
  40640a:	f04b 0201 	orr.w	r2, fp, #1
  40640e:	6099      	str	r1, [r3, #8]
  406410:	604a      	str	r2, [r1, #4]
  406412:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406416:	f003 0301 	and.w	r3, r3, #1
  40641a:	431f      	orrs	r7, r3
  40641c:	4640      	mov	r0, r8
  40641e:	f845 7c04 	str.w	r7, [r5, #-4]
  406422:	f7fe f807 	bl	404434 <__malloc_unlock>
  406426:	462e      	mov	r6, r5
  406428:	e728      	b.n	40627c <_realloc_r+0xe4>
  40642a:	4629      	mov	r1, r5
  40642c:	f7ff fe50 	bl	4060d0 <memmove>
  406430:	e6ff      	b.n	406232 <_realloc_r+0x9a>
  406432:	4629      	mov	r1, r5
  406434:	4630      	mov	r0, r6
  406436:	461c      	mov	r4, r3
  406438:	46d1      	mov	r9, sl
  40643a:	f7ff fe49 	bl	4060d0 <memmove>
  40643e:	e70b      	b.n	406258 <_realloc_r+0xc0>
  406440:	68ab      	ldr	r3, [r5, #8]
  406442:	6083      	str	r3, [r0, #8]
  406444:	68eb      	ldr	r3, [r5, #12]
  406446:	60c3      	str	r3, [r0, #12]
  406448:	2a24      	cmp	r2, #36	; 0x24
  40644a:	d017      	beq.n	40647c <_realloc_r+0x2e4>
  40644c:	f100 0310 	add.w	r3, r0, #16
  406450:	f105 0210 	add.w	r2, r5, #16
  406454:	e6e7      	b.n	406226 <_realloc_r+0x8e>
  406456:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40645a:	f023 0303 	bic.w	r3, r3, #3
  40645e:	441c      	add	r4, r3
  406460:	462e      	mov	r6, r5
  406462:	e6f9      	b.n	406258 <_realloc_r+0xc0>
  406464:	68a9      	ldr	r1, [r5, #8]
  406466:	f8ca 1010 	str.w	r1, [sl, #16]
  40646a:	68e9      	ldr	r1, [r5, #12]
  40646c:	f8ca 1014 	str.w	r1, [sl, #20]
  406470:	2a24      	cmp	r2, #36	; 0x24
  406472:	d00c      	beq.n	40648e <_realloc_r+0x2f6>
  406474:	3510      	adds	r5, #16
  406476:	f10a 0218 	add.w	r2, sl, #24
  40647a:	e7b9      	b.n	4063f0 <_realloc_r+0x258>
  40647c:	692b      	ldr	r3, [r5, #16]
  40647e:	6103      	str	r3, [r0, #16]
  406480:	696b      	ldr	r3, [r5, #20]
  406482:	6143      	str	r3, [r0, #20]
  406484:	f105 0218 	add.w	r2, r5, #24
  406488:	f100 0318 	add.w	r3, r0, #24
  40648c:	e6cb      	b.n	406226 <_realloc_r+0x8e>
  40648e:	692a      	ldr	r2, [r5, #16]
  406490:	f8ca 2018 	str.w	r2, [sl, #24]
  406494:	696a      	ldr	r2, [r5, #20]
  406496:	f8ca 201c 	str.w	r2, [sl, #28]
  40649a:	3518      	adds	r5, #24
  40649c:	f10a 0220 	add.w	r2, sl, #32
  4064a0:	e7a6      	b.n	4063f0 <_realloc_r+0x258>
  4064a2:	4632      	mov	r2, r6
  4064a4:	e77f      	b.n	4063a6 <_realloc_r+0x20e>
  4064a6:	4629      	mov	r1, r5
  4064a8:	4630      	mov	r0, r6
  4064aa:	9301      	str	r3, [sp, #4]
  4064ac:	f7ff fe10 	bl	4060d0 <memmove>
  4064b0:	9b01      	ldr	r3, [sp, #4]
  4064b2:	e77e      	b.n	4063b2 <_realloc_r+0x21a>
  4064b4:	68a9      	ldr	r1, [r5, #8]
  4064b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4064ba:	68e9      	ldr	r1, [r5, #12]
  4064bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4064c0:	2a24      	cmp	r2, #36	; 0x24
  4064c2:	d003      	beq.n	4064cc <_realloc_r+0x334>
  4064c4:	3510      	adds	r5, #16
  4064c6:	f10a 0218 	add.w	r2, sl, #24
  4064ca:	e76c      	b.n	4063a6 <_realloc_r+0x20e>
  4064cc:	692a      	ldr	r2, [r5, #16]
  4064ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4064d2:	696a      	ldr	r2, [r5, #20]
  4064d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4064d8:	3518      	adds	r5, #24
  4064da:	f10a 0220 	add.w	r2, sl, #32
  4064de:	e762      	b.n	4063a6 <_realloc_r+0x20e>
  4064e0:	20400450 	.word	0x20400450

004064e4 <__sread>:
  4064e4:	b510      	push	{r4, lr}
  4064e6:	460c      	mov	r4, r1
  4064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4064ec:	f000 f9f6 	bl	4068dc <_read_r>
  4064f0:	2800      	cmp	r0, #0
  4064f2:	db03      	blt.n	4064fc <__sread+0x18>
  4064f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4064f6:	4403      	add	r3, r0
  4064f8:	6523      	str	r3, [r4, #80]	; 0x50
  4064fa:	bd10      	pop	{r4, pc}
  4064fc:	89a3      	ldrh	r3, [r4, #12]
  4064fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406502:	81a3      	strh	r3, [r4, #12]
  406504:	bd10      	pop	{r4, pc}
  406506:	bf00      	nop

00406508 <__swrite>:
  406508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40650c:	4616      	mov	r6, r2
  40650e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406512:	461f      	mov	r7, r3
  406514:	05d3      	lsls	r3, r2, #23
  406516:	460c      	mov	r4, r1
  406518:	4605      	mov	r5, r0
  40651a:	d507      	bpl.n	40652c <__swrite+0x24>
  40651c:	2200      	movs	r2, #0
  40651e:	2302      	movs	r3, #2
  406520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406524:	f000 f9c4 	bl	4068b0 <_lseek_r>
  406528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40652c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406534:	81a2      	strh	r2, [r4, #12]
  406536:	463b      	mov	r3, r7
  406538:	4632      	mov	r2, r6
  40653a:	4628      	mov	r0, r5
  40653c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406540:	f000 b8a4 	b.w	40668c <_write_r>

00406544 <__sseek>:
  406544:	b510      	push	{r4, lr}
  406546:	460c      	mov	r4, r1
  406548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40654c:	f000 f9b0 	bl	4068b0 <_lseek_r>
  406550:	89a3      	ldrh	r3, [r4, #12]
  406552:	1c42      	adds	r2, r0, #1
  406554:	bf0e      	itee	eq
  406556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40655a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40655e:	6520      	strne	r0, [r4, #80]	; 0x50
  406560:	81a3      	strh	r3, [r4, #12]
  406562:	bd10      	pop	{r4, pc}

00406564 <__sclose>:
  406564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406568:	f000 b908 	b.w	40677c <_close_r>

0040656c <__swbuf_r>:
  40656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40656e:	460d      	mov	r5, r1
  406570:	4614      	mov	r4, r2
  406572:	4606      	mov	r6, r0
  406574:	b110      	cbz	r0, 40657c <__swbuf_r+0x10>
  406576:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406578:	2b00      	cmp	r3, #0
  40657a:	d04b      	beq.n	406614 <__swbuf_r+0xa8>
  40657c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406580:	69a3      	ldr	r3, [r4, #24]
  406582:	60a3      	str	r3, [r4, #8]
  406584:	b291      	uxth	r1, r2
  406586:	0708      	lsls	r0, r1, #28
  406588:	d539      	bpl.n	4065fe <__swbuf_r+0x92>
  40658a:	6923      	ldr	r3, [r4, #16]
  40658c:	2b00      	cmp	r3, #0
  40658e:	d036      	beq.n	4065fe <__swbuf_r+0x92>
  406590:	b2ed      	uxtb	r5, r5
  406592:	0489      	lsls	r1, r1, #18
  406594:	462f      	mov	r7, r5
  406596:	d515      	bpl.n	4065c4 <__swbuf_r+0x58>
  406598:	6822      	ldr	r2, [r4, #0]
  40659a:	6961      	ldr	r1, [r4, #20]
  40659c:	1ad3      	subs	r3, r2, r3
  40659e:	428b      	cmp	r3, r1
  4065a0:	da1c      	bge.n	4065dc <__swbuf_r+0x70>
  4065a2:	3301      	adds	r3, #1
  4065a4:	68a1      	ldr	r1, [r4, #8]
  4065a6:	1c50      	adds	r0, r2, #1
  4065a8:	3901      	subs	r1, #1
  4065aa:	60a1      	str	r1, [r4, #8]
  4065ac:	6020      	str	r0, [r4, #0]
  4065ae:	7015      	strb	r5, [r2, #0]
  4065b0:	6962      	ldr	r2, [r4, #20]
  4065b2:	429a      	cmp	r2, r3
  4065b4:	d01a      	beq.n	4065ec <__swbuf_r+0x80>
  4065b6:	89a3      	ldrh	r3, [r4, #12]
  4065b8:	07db      	lsls	r3, r3, #31
  4065ba:	d501      	bpl.n	4065c0 <__swbuf_r+0x54>
  4065bc:	2d0a      	cmp	r5, #10
  4065be:	d015      	beq.n	4065ec <__swbuf_r+0x80>
  4065c0:	4638      	mov	r0, r7
  4065c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4065c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4065c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4065ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4065ce:	81a2      	strh	r2, [r4, #12]
  4065d0:	6822      	ldr	r2, [r4, #0]
  4065d2:	6661      	str	r1, [r4, #100]	; 0x64
  4065d4:	6961      	ldr	r1, [r4, #20]
  4065d6:	1ad3      	subs	r3, r2, r3
  4065d8:	428b      	cmp	r3, r1
  4065da:	dbe2      	blt.n	4065a2 <__swbuf_r+0x36>
  4065dc:	4621      	mov	r1, r4
  4065de:	4630      	mov	r0, r6
  4065e0:	f7ff f87a 	bl	4056d8 <_fflush_r>
  4065e4:	b940      	cbnz	r0, 4065f8 <__swbuf_r+0x8c>
  4065e6:	6822      	ldr	r2, [r4, #0]
  4065e8:	2301      	movs	r3, #1
  4065ea:	e7db      	b.n	4065a4 <__swbuf_r+0x38>
  4065ec:	4621      	mov	r1, r4
  4065ee:	4630      	mov	r0, r6
  4065f0:	f7ff f872 	bl	4056d8 <_fflush_r>
  4065f4:	2800      	cmp	r0, #0
  4065f6:	d0e3      	beq.n	4065c0 <__swbuf_r+0x54>
  4065f8:	f04f 37ff 	mov.w	r7, #4294967295
  4065fc:	e7e0      	b.n	4065c0 <__swbuf_r+0x54>
  4065fe:	4621      	mov	r1, r4
  406600:	4630      	mov	r0, r6
  406602:	f7fe ff55 	bl	4054b0 <__swsetup_r>
  406606:	2800      	cmp	r0, #0
  406608:	d1f6      	bne.n	4065f8 <__swbuf_r+0x8c>
  40660a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40660e:	6923      	ldr	r3, [r4, #16]
  406610:	b291      	uxth	r1, r2
  406612:	e7bd      	b.n	406590 <__swbuf_r+0x24>
  406614:	f7ff f8b8 	bl	405788 <__sinit>
  406618:	e7b0      	b.n	40657c <__swbuf_r+0x10>
  40661a:	bf00      	nop

0040661c <_wcrtomb_r>:
  40661c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40661e:	4606      	mov	r6, r0
  406620:	b085      	sub	sp, #20
  406622:	461f      	mov	r7, r3
  406624:	b189      	cbz	r1, 40664a <_wcrtomb_r+0x2e>
  406626:	4c10      	ldr	r4, [pc, #64]	; (406668 <_wcrtomb_r+0x4c>)
  406628:	4d10      	ldr	r5, [pc, #64]	; (40666c <_wcrtomb_r+0x50>)
  40662a:	6824      	ldr	r4, [r4, #0]
  40662c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40662e:	2c00      	cmp	r4, #0
  406630:	bf08      	it	eq
  406632:	462c      	moveq	r4, r5
  406634:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406638:	47a0      	blx	r4
  40663a:	1c43      	adds	r3, r0, #1
  40663c:	d103      	bne.n	406646 <_wcrtomb_r+0x2a>
  40663e:	2200      	movs	r2, #0
  406640:	238a      	movs	r3, #138	; 0x8a
  406642:	603a      	str	r2, [r7, #0]
  406644:	6033      	str	r3, [r6, #0]
  406646:	b005      	add	sp, #20
  406648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40664a:	460c      	mov	r4, r1
  40664c:	4906      	ldr	r1, [pc, #24]	; (406668 <_wcrtomb_r+0x4c>)
  40664e:	4a07      	ldr	r2, [pc, #28]	; (40666c <_wcrtomb_r+0x50>)
  406650:	6809      	ldr	r1, [r1, #0]
  406652:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406654:	2900      	cmp	r1, #0
  406656:	bf08      	it	eq
  406658:	4611      	moveq	r1, r2
  40665a:	4622      	mov	r2, r4
  40665c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406660:	a901      	add	r1, sp, #4
  406662:	47a0      	blx	r4
  406664:	e7e9      	b.n	40663a <_wcrtomb_r+0x1e>
  406666:	bf00      	nop
  406668:	20400024 	.word	0x20400024
  40666c:	20400864 	.word	0x20400864

00406670 <__ascii_wctomb>:
  406670:	b121      	cbz	r1, 40667c <__ascii_wctomb+0xc>
  406672:	2aff      	cmp	r2, #255	; 0xff
  406674:	d804      	bhi.n	406680 <__ascii_wctomb+0x10>
  406676:	700a      	strb	r2, [r1, #0]
  406678:	2001      	movs	r0, #1
  40667a:	4770      	bx	lr
  40667c:	4608      	mov	r0, r1
  40667e:	4770      	bx	lr
  406680:	238a      	movs	r3, #138	; 0x8a
  406682:	6003      	str	r3, [r0, #0]
  406684:	f04f 30ff 	mov.w	r0, #4294967295
  406688:	4770      	bx	lr
  40668a:	bf00      	nop

0040668c <_write_r>:
  40668c:	b570      	push	{r4, r5, r6, lr}
  40668e:	460d      	mov	r5, r1
  406690:	4c08      	ldr	r4, [pc, #32]	; (4066b4 <_write_r+0x28>)
  406692:	4611      	mov	r1, r2
  406694:	4606      	mov	r6, r0
  406696:	461a      	mov	r2, r3
  406698:	4628      	mov	r0, r5
  40669a:	2300      	movs	r3, #0
  40669c:	6023      	str	r3, [r4, #0]
  40669e:	f7fa fb99 	bl	400dd4 <_write>
  4066a2:	1c43      	adds	r3, r0, #1
  4066a4:	d000      	beq.n	4066a8 <_write_r+0x1c>
  4066a6:	bd70      	pop	{r4, r5, r6, pc}
  4066a8:	6823      	ldr	r3, [r4, #0]
  4066aa:	2b00      	cmp	r3, #0
  4066ac:	d0fb      	beq.n	4066a6 <_write_r+0x1a>
  4066ae:	6033      	str	r3, [r6, #0]
  4066b0:	bd70      	pop	{r4, r5, r6, pc}
  4066b2:	bf00      	nop
  4066b4:	20400e5c 	.word	0x20400e5c

004066b8 <__register_exitproc>:
  4066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4066bc:	4d2c      	ldr	r5, [pc, #176]	; (406770 <__register_exitproc+0xb8>)
  4066be:	4606      	mov	r6, r0
  4066c0:	6828      	ldr	r0, [r5, #0]
  4066c2:	4698      	mov	r8, r3
  4066c4:	460f      	mov	r7, r1
  4066c6:	4691      	mov	r9, r2
  4066c8:	f7ff fc1e 	bl	405f08 <__retarget_lock_acquire_recursive>
  4066cc:	4b29      	ldr	r3, [pc, #164]	; (406774 <__register_exitproc+0xbc>)
  4066ce:	681c      	ldr	r4, [r3, #0]
  4066d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	d03e      	beq.n	406756 <__register_exitproc+0x9e>
  4066d8:	685a      	ldr	r2, [r3, #4]
  4066da:	2a1f      	cmp	r2, #31
  4066dc:	dc1c      	bgt.n	406718 <__register_exitproc+0x60>
  4066de:	f102 0e01 	add.w	lr, r2, #1
  4066e2:	b176      	cbz	r6, 406702 <__register_exitproc+0x4a>
  4066e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4066e8:	2401      	movs	r4, #1
  4066ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4066ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4066f2:	4094      	lsls	r4, r2
  4066f4:	4320      	orrs	r0, r4
  4066f6:	2e02      	cmp	r6, #2
  4066f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4066fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406700:	d023      	beq.n	40674a <__register_exitproc+0x92>
  406702:	3202      	adds	r2, #2
  406704:	f8c3 e004 	str.w	lr, [r3, #4]
  406708:	6828      	ldr	r0, [r5, #0]
  40670a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40670e:	f7ff fbfd 	bl	405f0c <__retarget_lock_release_recursive>
  406712:	2000      	movs	r0, #0
  406714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406718:	4b17      	ldr	r3, [pc, #92]	; (406778 <__register_exitproc+0xc0>)
  40671a:	b30b      	cbz	r3, 406760 <__register_exitproc+0xa8>
  40671c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406720:	f7fd fada 	bl	403cd8 <malloc>
  406724:	4603      	mov	r3, r0
  406726:	b1d8      	cbz	r0, 406760 <__register_exitproc+0xa8>
  406728:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40672c:	6002      	str	r2, [r0, #0]
  40672e:	2100      	movs	r1, #0
  406730:	6041      	str	r1, [r0, #4]
  406732:	460a      	mov	r2, r1
  406734:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406738:	f04f 0e01 	mov.w	lr, #1
  40673c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406740:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406744:	2e00      	cmp	r6, #0
  406746:	d0dc      	beq.n	406702 <__register_exitproc+0x4a>
  406748:	e7cc      	b.n	4066e4 <__register_exitproc+0x2c>
  40674a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40674e:	430c      	orrs	r4, r1
  406750:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406754:	e7d5      	b.n	406702 <__register_exitproc+0x4a>
  406756:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40675a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40675e:	e7bb      	b.n	4066d8 <__register_exitproc+0x20>
  406760:	6828      	ldr	r0, [r5, #0]
  406762:	f7ff fbd3 	bl	405f0c <__retarget_lock_release_recursive>
  406766:	f04f 30ff 	mov.w	r0, #4294967295
  40676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40676e:	bf00      	nop
  406770:	20400860 	.word	0x20400860
  406774:	00406fb0 	.word	0x00406fb0
  406778:	00403cd9 	.word	0x00403cd9

0040677c <_close_r>:
  40677c:	b538      	push	{r3, r4, r5, lr}
  40677e:	4c07      	ldr	r4, [pc, #28]	; (40679c <_close_r+0x20>)
  406780:	2300      	movs	r3, #0
  406782:	4605      	mov	r5, r0
  406784:	4608      	mov	r0, r1
  406786:	6023      	str	r3, [r4, #0]
  406788:	f7fa ffe2 	bl	401750 <_close>
  40678c:	1c43      	adds	r3, r0, #1
  40678e:	d000      	beq.n	406792 <_close_r+0x16>
  406790:	bd38      	pop	{r3, r4, r5, pc}
  406792:	6823      	ldr	r3, [r4, #0]
  406794:	2b00      	cmp	r3, #0
  406796:	d0fb      	beq.n	406790 <_close_r+0x14>
  406798:	602b      	str	r3, [r5, #0]
  40679a:	bd38      	pop	{r3, r4, r5, pc}
  40679c:	20400e5c 	.word	0x20400e5c

004067a0 <_fclose_r>:
  4067a0:	b570      	push	{r4, r5, r6, lr}
  4067a2:	b159      	cbz	r1, 4067bc <_fclose_r+0x1c>
  4067a4:	4605      	mov	r5, r0
  4067a6:	460c      	mov	r4, r1
  4067a8:	b110      	cbz	r0, 4067b0 <_fclose_r+0x10>
  4067aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4067ac:	2b00      	cmp	r3, #0
  4067ae:	d03c      	beq.n	40682a <_fclose_r+0x8a>
  4067b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4067b2:	07d8      	lsls	r0, r3, #31
  4067b4:	d505      	bpl.n	4067c2 <_fclose_r+0x22>
  4067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4067ba:	b92b      	cbnz	r3, 4067c8 <_fclose_r+0x28>
  4067bc:	2600      	movs	r6, #0
  4067be:	4630      	mov	r0, r6
  4067c0:	bd70      	pop	{r4, r5, r6, pc}
  4067c2:	89a3      	ldrh	r3, [r4, #12]
  4067c4:	0599      	lsls	r1, r3, #22
  4067c6:	d53c      	bpl.n	406842 <_fclose_r+0xa2>
  4067c8:	4621      	mov	r1, r4
  4067ca:	4628      	mov	r0, r5
  4067cc:	f7fe fee4 	bl	405598 <__sflush_r>
  4067d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4067d2:	4606      	mov	r6, r0
  4067d4:	b133      	cbz	r3, 4067e4 <_fclose_r+0x44>
  4067d6:	69e1      	ldr	r1, [r4, #28]
  4067d8:	4628      	mov	r0, r5
  4067da:	4798      	blx	r3
  4067dc:	2800      	cmp	r0, #0
  4067de:	bfb8      	it	lt
  4067e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4067e4:	89a3      	ldrh	r3, [r4, #12]
  4067e6:	061a      	lsls	r2, r3, #24
  4067e8:	d422      	bmi.n	406830 <_fclose_r+0x90>
  4067ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4067ec:	b141      	cbz	r1, 406800 <_fclose_r+0x60>
  4067ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4067f2:	4299      	cmp	r1, r3
  4067f4:	d002      	beq.n	4067fc <_fclose_r+0x5c>
  4067f6:	4628      	mov	r0, r5
  4067f8:	f7ff f8ec 	bl	4059d4 <_free_r>
  4067fc:	2300      	movs	r3, #0
  4067fe:	6323      	str	r3, [r4, #48]	; 0x30
  406800:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406802:	b121      	cbz	r1, 40680e <_fclose_r+0x6e>
  406804:	4628      	mov	r0, r5
  406806:	f7ff f8e5 	bl	4059d4 <_free_r>
  40680a:	2300      	movs	r3, #0
  40680c:	6463      	str	r3, [r4, #68]	; 0x44
  40680e:	f7fe ffe7 	bl	4057e0 <__sfp_lock_acquire>
  406812:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406814:	2200      	movs	r2, #0
  406816:	07db      	lsls	r3, r3, #31
  406818:	81a2      	strh	r2, [r4, #12]
  40681a:	d50e      	bpl.n	40683a <_fclose_r+0x9a>
  40681c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40681e:	f7ff fb71 	bl	405f04 <__retarget_lock_close_recursive>
  406822:	f7fe ffe3 	bl	4057ec <__sfp_lock_release>
  406826:	4630      	mov	r0, r6
  406828:	bd70      	pop	{r4, r5, r6, pc}
  40682a:	f7fe ffad 	bl	405788 <__sinit>
  40682e:	e7bf      	b.n	4067b0 <_fclose_r+0x10>
  406830:	6921      	ldr	r1, [r4, #16]
  406832:	4628      	mov	r0, r5
  406834:	f7ff f8ce 	bl	4059d4 <_free_r>
  406838:	e7d7      	b.n	4067ea <_fclose_r+0x4a>
  40683a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40683c:	f7ff fb66 	bl	405f0c <__retarget_lock_release_recursive>
  406840:	e7ec      	b.n	40681c <_fclose_r+0x7c>
  406842:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406844:	f7ff fb60 	bl	405f08 <__retarget_lock_acquire_recursive>
  406848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40684c:	2b00      	cmp	r3, #0
  40684e:	d1bb      	bne.n	4067c8 <_fclose_r+0x28>
  406850:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406852:	f016 0601 	ands.w	r6, r6, #1
  406856:	d1b1      	bne.n	4067bc <_fclose_r+0x1c>
  406858:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40685a:	f7ff fb57 	bl	405f0c <__retarget_lock_release_recursive>
  40685e:	4630      	mov	r0, r6
  406860:	bd70      	pop	{r4, r5, r6, pc}
  406862:	bf00      	nop

00406864 <_fstat_r>:
  406864:	b538      	push	{r3, r4, r5, lr}
  406866:	460b      	mov	r3, r1
  406868:	4c07      	ldr	r4, [pc, #28]	; (406888 <_fstat_r+0x24>)
  40686a:	4605      	mov	r5, r0
  40686c:	4611      	mov	r1, r2
  40686e:	4618      	mov	r0, r3
  406870:	2300      	movs	r3, #0
  406872:	6023      	str	r3, [r4, #0]
  406874:	f7fa ff6f 	bl	401756 <_fstat>
  406878:	1c43      	adds	r3, r0, #1
  40687a:	d000      	beq.n	40687e <_fstat_r+0x1a>
  40687c:	bd38      	pop	{r3, r4, r5, pc}
  40687e:	6823      	ldr	r3, [r4, #0]
  406880:	2b00      	cmp	r3, #0
  406882:	d0fb      	beq.n	40687c <_fstat_r+0x18>
  406884:	602b      	str	r3, [r5, #0]
  406886:	bd38      	pop	{r3, r4, r5, pc}
  406888:	20400e5c 	.word	0x20400e5c

0040688c <_isatty_r>:
  40688c:	b538      	push	{r3, r4, r5, lr}
  40688e:	4c07      	ldr	r4, [pc, #28]	; (4068ac <_isatty_r+0x20>)
  406890:	2300      	movs	r3, #0
  406892:	4605      	mov	r5, r0
  406894:	4608      	mov	r0, r1
  406896:	6023      	str	r3, [r4, #0]
  406898:	f7fa ff62 	bl	401760 <_isatty>
  40689c:	1c43      	adds	r3, r0, #1
  40689e:	d000      	beq.n	4068a2 <_isatty_r+0x16>
  4068a0:	bd38      	pop	{r3, r4, r5, pc}
  4068a2:	6823      	ldr	r3, [r4, #0]
  4068a4:	2b00      	cmp	r3, #0
  4068a6:	d0fb      	beq.n	4068a0 <_isatty_r+0x14>
  4068a8:	602b      	str	r3, [r5, #0]
  4068aa:	bd38      	pop	{r3, r4, r5, pc}
  4068ac:	20400e5c 	.word	0x20400e5c

004068b0 <_lseek_r>:
  4068b0:	b570      	push	{r4, r5, r6, lr}
  4068b2:	460d      	mov	r5, r1
  4068b4:	4c08      	ldr	r4, [pc, #32]	; (4068d8 <_lseek_r+0x28>)
  4068b6:	4611      	mov	r1, r2
  4068b8:	4606      	mov	r6, r0
  4068ba:	461a      	mov	r2, r3
  4068bc:	4628      	mov	r0, r5
  4068be:	2300      	movs	r3, #0
  4068c0:	6023      	str	r3, [r4, #0]
  4068c2:	f7fa ff4f 	bl	401764 <_lseek>
  4068c6:	1c43      	adds	r3, r0, #1
  4068c8:	d000      	beq.n	4068cc <_lseek_r+0x1c>
  4068ca:	bd70      	pop	{r4, r5, r6, pc}
  4068cc:	6823      	ldr	r3, [r4, #0]
  4068ce:	2b00      	cmp	r3, #0
  4068d0:	d0fb      	beq.n	4068ca <_lseek_r+0x1a>
  4068d2:	6033      	str	r3, [r6, #0]
  4068d4:	bd70      	pop	{r4, r5, r6, pc}
  4068d6:	bf00      	nop
  4068d8:	20400e5c 	.word	0x20400e5c

004068dc <_read_r>:
  4068dc:	b570      	push	{r4, r5, r6, lr}
  4068de:	460d      	mov	r5, r1
  4068e0:	4c08      	ldr	r4, [pc, #32]	; (406904 <_read_r+0x28>)
  4068e2:	4611      	mov	r1, r2
  4068e4:	4606      	mov	r6, r0
  4068e6:	461a      	mov	r2, r3
  4068e8:	4628      	mov	r0, r5
  4068ea:	2300      	movs	r3, #0
  4068ec:	6023      	str	r3, [r4, #0]
  4068ee:	f7fa fa53 	bl	400d98 <_read>
  4068f2:	1c43      	adds	r3, r0, #1
  4068f4:	d000      	beq.n	4068f8 <_read_r+0x1c>
  4068f6:	bd70      	pop	{r4, r5, r6, pc}
  4068f8:	6823      	ldr	r3, [r4, #0]
  4068fa:	2b00      	cmp	r3, #0
  4068fc:	d0fb      	beq.n	4068f6 <_read_r+0x1a>
  4068fe:	6033      	str	r3, [r6, #0]
  406900:	bd70      	pop	{r4, r5, r6, pc}
  406902:	bf00      	nop
  406904:	20400e5c 	.word	0x20400e5c

00406908 <__aeabi_uldivmod>:
  406908:	b953      	cbnz	r3, 406920 <__aeabi_uldivmod+0x18>
  40690a:	b94a      	cbnz	r2, 406920 <__aeabi_uldivmod+0x18>
  40690c:	2900      	cmp	r1, #0
  40690e:	bf08      	it	eq
  406910:	2800      	cmpeq	r0, #0
  406912:	bf1c      	itt	ne
  406914:	f04f 31ff 	movne.w	r1, #4294967295
  406918:	f04f 30ff 	movne.w	r0, #4294967295
  40691c:	f000 b97a 	b.w	406c14 <__aeabi_idiv0>
  406920:	f1ad 0c08 	sub.w	ip, sp, #8
  406924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406928:	f000 f806 	bl	406938 <__udivmoddi4>
  40692c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406934:	b004      	add	sp, #16
  406936:	4770      	bx	lr

00406938 <__udivmoddi4>:
  406938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40693c:	468c      	mov	ip, r1
  40693e:	460d      	mov	r5, r1
  406940:	4604      	mov	r4, r0
  406942:	9e08      	ldr	r6, [sp, #32]
  406944:	2b00      	cmp	r3, #0
  406946:	d151      	bne.n	4069ec <__udivmoddi4+0xb4>
  406948:	428a      	cmp	r2, r1
  40694a:	4617      	mov	r7, r2
  40694c:	d96d      	bls.n	406a2a <__udivmoddi4+0xf2>
  40694e:	fab2 fe82 	clz	lr, r2
  406952:	f1be 0f00 	cmp.w	lr, #0
  406956:	d00b      	beq.n	406970 <__udivmoddi4+0x38>
  406958:	f1ce 0c20 	rsb	ip, lr, #32
  40695c:	fa01 f50e 	lsl.w	r5, r1, lr
  406960:	fa20 fc0c 	lsr.w	ip, r0, ip
  406964:	fa02 f70e 	lsl.w	r7, r2, lr
  406968:	ea4c 0c05 	orr.w	ip, ip, r5
  40696c:	fa00 f40e 	lsl.w	r4, r0, lr
  406970:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406974:	0c25      	lsrs	r5, r4, #16
  406976:	fbbc f8fa 	udiv	r8, ip, sl
  40697a:	fa1f f987 	uxth.w	r9, r7
  40697e:	fb0a cc18 	mls	ip, sl, r8, ip
  406982:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406986:	fb08 f309 	mul.w	r3, r8, r9
  40698a:	42ab      	cmp	r3, r5
  40698c:	d90a      	bls.n	4069a4 <__udivmoddi4+0x6c>
  40698e:	19ed      	adds	r5, r5, r7
  406990:	f108 32ff 	add.w	r2, r8, #4294967295
  406994:	f080 8123 	bcs.w	406bde <__udivmoddi4+0x2a6>
  406998:	42ab      	cmp	r3, r5
  40699a:	f240 8120 	bls.w	406bde <__udivmoddi4+0x2a6>
  40699e:	f1a8 0802 	sub.w	r8, r8, #2
  4069a2:	443d      	add	r5, r7
  4069a4:	1aed      	subs	r5, r5, r3
  4069a6:	b2a4      	uxth	r4, r4
  4069a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4069ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4069b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4069b4:	fb00 f909 	mul.w	r9, r0, r9
  4069b8:	45a1      	cmp	r9, r4
  4069ba:	d909      	bls.n	4069d0 <__udivmoddi4+0x98>
  4069bc:	19e4      	adds	r4, r4, r7
  4069be:	f100 33ff 	add.w	r3, r0, #4294967295
  4069c2:	f080 810a 	bcs.w	406bda <__udivmoddi4+0x2a2>
  4069c6:	45a1      	cmp	r9, r4
  4069c8:	f240 8107 	bls.w	406bda <__udivmoddi4+0x2a2>
  4069cc:	3802      	subs	r0, #2
  4069ce:	443c      	add	r4, r7
  4069d0:	eba4 0409 	sub.w	r4, r4, r9
  4069d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4069d8:	2100      	movs	r1, #0
  4069da:	2e00      	cmp	r6, #0
  4069dc:	d061      	beq.n	406aa2 <__udivmoddi4+0x16a>
  4069de:	fa24 f40e 	lsr.w	r4, r4, lr
  4069e2:	2300      	movs	r3, #0
  4069e4:	6034      	str	r4, [r6, #0]
  4069e6:	6073      	str	r3, [r6, #4]
  4069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069ec:	428b      	cmp	r3, r1
  4069ee:	d907      	bls.n	406a00 <__udivmoddi4+0xc8>
  4069f0:	2e00      	cmp	r6, #0
  4069f2:	d054      	beq.n	406a9e <__udivmoddi4+0x166>
  4069f4:	2100      	movs	r1, #0
  4069f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4069fa:	4608      	mov	r0, r1
  4069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a00:	fab3 f183 	clz	r1, r3
  406a04:	2900      	cmp	r1, #0
  406a06:	f040 808e 	bne.w	406b26 <__udivmoddi4+0x1ee>
  406a0a:	42ab      	cmp	r3, r5
  406a0c:	d302      	bcc.n	406a14 <__udivmoddi4+0xdc>
  406a0e:	4282      	cmp	r2, r0
  406a10:	f200 80fa 	bhi.w	406c08 <__udivmoddi4+0x2d0>
  406a14:	1a84      	subs	r4, r0, r2
  406a16:	eb65 0503 	sbc.w	r5, r5, r3
  406a1a:	2001      	movs	r0, #1
  406a1c:	46ac      	mov	ip, r5
  406a1e:	2e00      	cmp	r6, #0
  406a20:	d03f      	beq.n	406aa2 <__udivmoddi4+0x16a>
  406a22:	e886 1010 	stmia.w	r6, {r4, ip}
  406a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a2a:	b912      	cbnz	r2, 406a32 <__udivmoddi4+0xfa>
  406a2c:	2701      	movs	r7, #1
  406a2e:	fbb7 f7f2 	udiv	r7, r7, r2
  406a32:	fab7 fe87 	clz	lr, r7
  406a36:	f1be 0f00 	cmp.w	lr, #0
  406a3a:	d134      	bne.n	406aa6 <__udivmoddi4+0x16e>
  406a3c:	1beb      	subs	r3, r5, r7
  406a3e:	0c3a      	lsrs	r2, r7, #16
  406a40:	fa1f fc87 	uxth.w	ip, r7
  406a44:	2101      	movs	r1, #1
  406a46:	fbb3 f8f2 	udiv	r8, r3, r2
  406a4a:	0c25      	lsrs	r5, r4, #16
  406a4c:	fb02 3318 	mls	r3, r2, r8, r3
  406a50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a54:	fb0c f308 	mul.w	r3, ip, r8
  406a58:	42ab      	cmp	r3, r5
  406a5a:	d907      	bls.n	406a6c <__udivmoddi4+0x134>
  406a5c:	19ed      	adds	r5, r5, r7
  406a5e:	f108 30ff 	add.w	r0, r8, #4294967295
  406a62:	d202      	bcs.n	406a6a <__udivmoddi4+0x132>
  406a64:	42ab      	cmp	r3, r5
  406a66:	f200 80d1 	bhi.w	406c0c <__udivmoddi4+0x2d4>
  406a6a:	4680      	mov	r8, r0
  406a6c:	1aed      	subs	r5, r5, r3
  406a6e:	b2a3      	uxth	r3, r4
  406a70:	fbb5 f0f2 	udiv	r0, r5, r2
  406a74:	fb02 5510 	mls	r5, r2, r0, r5
  406a78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406a7c:	fb0c fc00 	mul.w	ip, ip, r0
  406a80:	45a4      	cmp	ip, r4
  406a82:	d907      	bls.n	406a94 <__udivmoddi4+0x15c>
  406a84:	19e4      	adds	r4, r4, r7
  406a86:	f100 33ff 	add.w	r3, r0, #4294967295
  406a8a:	d202      	bcs.n	406a92 <__udivmoddi4+0x15a>
  406a8c:	45a4      	cmp	ip, r4
  406a8e:	f200 80b8 	bhi.w	406c02 <__udivmoddi4+0x2ca>
  406a92:	4618      	mov	r0, r3
  406a94:	eba4 040c 	sub.w	r4, r4, ip
  406a98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406a9c:	e79d      	b.n	4069da <__udivmoddi4+0xa2>
  406a9e:	4631      	mov	r1, r6
  406aa0:	4630      	mov	r0, r6
  406aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406aa6:	f1ce 0420 	rsb	r4, lr, #32
  406aaa:	fa05 f30e 	lsl.w	r3, r5, lr
  406aae:	fa07 f70e 	lsl.w	r7, r7, lr
  406ab2:	fa20 f804 	lsr.w	r8, r0, r4
  406ab6:	0c3a      	lsrs	r2, r7, #16
  406ab8:	fa25 f404 	lsr.w	r4, r5, r4
  406abc:	ea48 0803 	orr.w	r8, r8, r3
  406ac0:	fbb4 f1f2 	udiv	r1, r4, r2
  406ac4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406ac8:	fb02 4411 	mls	r4, r2, r1, r4
  406acc:	fa1f fc87 	uxth.w	ip, r7
  406ad0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406ad4:	fb01 f30c 	mul.w	r3, r1, ip
  406ad8:	42ab      	cmp	r3, r5
  406ada:	fa00 f40e 	lsl.w	r4, r0, lr
  406ade:	d909      	bls.n	406af4 <__udivmoddi4+0x1bc>
  406ae0:	19ed      	adds	r5, r5, r7
  406ae2:	f101 30ff 	add.w	r0, r1, #4294967295
  406ae6:	f080 808a 	bcs.w	406bfe <__udivmoddi4+0x2c6>
  406aea:	42ab      	cmp	r3, r5
  406aec:	f240 8087 	bls.w	406bfe <__udivmoddi4+0x2c6>
  406af0:	3902      	subs	r1, #2
  406af2:	443d      	add	r5, r7
  406af4:	1aeb      	subs	r3, r5, r3
  406af6:	fa1f f588 	uxth.w	r5, r8
  406afa:	fbb3 f0f2 	udiv	r0, r3, r2
  406afe:	fb02 3310 	mls	r3, r2, r0, r3
  406b02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406b06:	fb00 f30c 	mul.w	r3, r0, ip
  406b0a:	42ab      	cmp	r3, r5
  406b0c:	d907      	bls.n	406b1e <__udivmoddi4+0x1e6>
  406b0e:	19ed      	adds	r5, r5, r7
  406b10:	f100 38ff 	add.w	r8, r0, #4294967295
  406b14:	d26f      	bcs.n	406bf6 <__udivmoddi4+0x2be>
  406b16:	42ab      	cmp	r3, r5
  406b18:	d96d      	bls.n	406bf6 <__udivmoddi4+0x2be>
  406b1a:	3802      	subs	r0, #2
  406b1c:	443d      	add	r5, r7
  406b1e:	1aeb      	subs	r3, r5, r3
  406b20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406b24:	e78f      	b.n	406a46 <__udivmoddi4+0x10e>
  406b26:	f1c1 0720 	rsb	r7, r1, #32
  406b2a:	fa22 f807 	lsr.w	r8, r2, r7
  406b2e:	408b      	lsls	r3, r1
  406b30:	fa05 f401 	lsl.w	r4, r5, r1
  406b34:	ea48 0303 	orr.w	r3, r8, r3
  406b38:	fa20 fe07 	lsr.w	lr, r0, r7
  406b3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406b40:	40fd      	lsrs	r5, r7
  406b42:	ea4e 0e04 	orr.w	lr, lr, r4
  406b46:	fbb5 f9fc 	udiv	r9, r5, ip
  406b4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406b4e:	fb0c 5519 	mls	r5, ip, r9, r5
  406b52:	fa1f f883 	uxth.w	r8, r3
  406b56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406b5a:	fb09 f408 	mul.w	r4, r9, r8
  406b5e:	42ac      	cmp	r4, r5
  406b60:	fa02 f201 	lsl.w	r2, r2, r1
  406b64:	fa00 fa01 	lsl.w	sl, r0, r1
  406b68:	d908      	bls.n	406b7c <__udivmoddi4+0x244>
  406b6a:	18ed      	adds	r5, r5, r3
  406b6c:	f109 30ff 	add.w	r0, r9, #4294967295
  406b70:	d243      	bcs.n	406bfa <__udivmoddi4+0x2c2>
  406b72:	42ac      	cmp	r4, r5
  406b74:	d941      	bls.n	406bfa <__udivmoddi4+0x2c2>
  406b76:	f1a9 0902 	sub.w	r9, r9, #2
  406b7a:	441d      	add	r5, r3
  406b7c:	1b2d      	subs	r5, r5, r4
  406b7e:	fa1f fe8e 	uxth.w	lr, lr
  406b82:	fbb5 f0fc 	udiv	r0, r5, ip
  406b86:	fb0c 5510 	mls	r5, ip, r0, r5
  406b8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406b8e:	fb00 f808 	mul.w	r8, r0, r8
  406b92:	45a0      	cmp	r8, r4
  406b94:	d907      	bls.n	406ba6 <__udivmoddi4+0x26e>
  406b96:	18e4      	adds	r4, r4, r3
  406b98:	f100 35ff 	add.w	r5, r0, #4294967295
  406b9c:	d229      	bcs.n	406bf2 <__udivmoddi4+0x2ba>
  406b9e:	45a0      	cmp	r8, r4
  406ba0:	d927      	bls.n	406bf2 <__udivmoddi4+0x2ba>
  406ba2:	3802      	subs	r0, #2
  406ba4:	441c      	add	r4, r3
  406ba6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406baa:	eba4 0408 	sub.w	r4, r4, r8
  406bae:	fba0 8902 	umull	r8, r9, r0, r2
  406bb2:	454c      	cmp	r4, r9
  406bb4:	46c6      	mov	lr, r8
  406bb6:	464d      	mov	r5, r9
  406bb8:	d315      	bcc.n	406be6 <__udivmoddi4+0x2ae>
  406bba:	d012      	beq.n	406be2 <__udivmoddi4+0x2aa>
  406bbc:	b156      	cbz	r6, 406bd4 <__udivmoddi4+0x29c>
  406bbe:	ebba 030e 	subs.w	r3, sl, lr
  406bc2:	eb64 0405 	sbc.w	r4, r4, r5
  406bc6:	fa04 f707 	lsl.w	r7, r4, r7
  406bca:	40cb      	lsrs	r3, r1
  406bcc:	431f      	orrs	r7, r3
  406bce:	40cc      	lsrs	r4, r1
  406bd0:	6037      	str	r7, [r6, #0]
  406bd2:	6074      	str	r4, [r6, #4]
  406bd4:	2100      	movs	r1, #0
  406bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bda:	4618      	mov	r0, r3
  406bdc:	e6f8      	b.n	4069d0 <__udivmoddi4+0x98>
  406bde:	4690      	mov	r8, r2
  406be0:	e6e0      	b.n	4069a4 <__udivmoddi4+0x6c>
  406be2:	45c2      	cmp	sl, r8
  406be4:	d2ea      	bcs.n	406bbc <__udivmoddi4+0x284>
  406be6:	ebb8 0e02 	subs.w	lr, r8, r2
  406bea:	eb69 0503 	sbc.w	r5, r9, r3
  406bee:	3801      	subs	r0, #1
  406bf0:	e7e4      	b.n	406bbc <__udivmoddi4+0x284>
  406bf2:	4628      	mov	r0, r5
  406bf4:	e7d7      	b.n	406ba6 <__udivmoddi4+0x26e>
  406bf6:	4640      	mov	r0, r8
  406bf8:	e791      	b.n	406b1e <__udivmoddi4+0x1e6>
  406bfa:	4681      	mov	r9, r0
  406bfc:	e7be      	b.n	406b7c <__udivmoddi4+0x244>
  406bfe:	4601      	mov	r1, r0
  406c00:	e778      	b.n	406af4 <__udivmoddi4+0x1bc>
  406c02:	3802      	subs	r0, #2
  406c04:	443c      	add	r4, r7
  406c06:	e745      	b.n	406a94 <__udivmoddi4+0x15c>
  406c08:	4608      	mov	r0, r1
  406c0a:	e708      	b.n	406a1e <__udivmoddi4+0xe6>
  406c0c:	f1a8 0802 	sub.w	r8, r8, #2
  406c10:	443d      	add	r5, r7
  406c12:	e72b      	b.n	406a6c <__udivmoddi4+0x134>

00406c14 <__aeabi_idiv0>:
  406c14:	4770      	bx	lr
  406c16:	bf00      	nop

00406c18 <sysfont_glyphs>:
  406c18:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  406c28:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  406c38:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  406c48:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  406c58:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  406c68:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  406c78:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  406c88:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  406c98:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  406ca8:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  406cb8:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  406cc8:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  406cd8:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  406ce8:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  406cf8:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  406d08:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  406d18:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  406d28:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  406d38:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  406d48:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  406d58:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  406d68:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  406d78:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  406d88:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  406d98:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  406da8:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  406db8:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  406dc8:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  406dd8:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  406de8:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  406df8:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  406e08:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  406e18:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  406e28:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  406e38:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  406e48:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  406e58:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  406e68:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  406e78:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  406e88:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  406e98:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  406ea8:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  406eb8:	0000 0000 6d54 2072 7653 0063 07e7 0000     ....Tmr Svc.....
  406ec8:	0003 0000 0013 0000 000c 0000 000f 0000     ................
  406ed8:	002d 0000 0001 0000 7245 6f72 2072 7263     -.......Error cr
  406ee8:	6165 6974 676e 7420 6568 7320 6d65 7061     eating the semap
  406ef8:	6f68 6572 0000 0000 6c6f 6465 0000 0000     hore....oled....
  406f08:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  406f18:	6f20 656c 2064 6174 6b73 0a0d 0000 0000      oled task......
  406f28:	6374 0000 6146 6c69 6465 7420 206f 7263     tc..Failed to cr
  406f38:	6165 6574 7420 2063 6174 6b73 0a0d 0000     eate tc task....
  406f48:	7472 0074 6146 6c69 6465 7420 206f 7263     rtt.Failed to cr
  406f58:	6165 6574 7220 7474 7420 7361 0d6b 000a     eate rtt task...
  406f68:	7472 0063 6146 6c69 6465 7420 206f 7263     rtc.Failed to cr
  406f78:	6165 6574 7220 6374 7420 7361 0d6b 000a     eate rtc task...
  406f88:	7845 6d65 6c70 206f 5452 534f 0000 0000     Exemplo RTOS....
  406f98:	696f 0069 7473 6361 206b 766f 7265 6c66     oii.stack overfl
  406fa8:	776f 0a20 0000 0000                         ow .....

00406fb0 <_global_impure_ptr>:
  406fb0:	0028 2040 3130 3332 3534 3736 3938 4241     (.@ 0123456789AB
  406fc0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  406fd0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  406fe0:	296c 0000                                   l)..

00406fe4 <blanks.7217>:
  406fe4:	2020 2020 2020 2020 2020 2020 2020 2020                     

00406ff4 <zeroes.7218>:
  406ff4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407004:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00407014 <_ctype_>:
  407014:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  407024:	2020 2020 2020 2020 2020 2020 2020 2020                     
  407034:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  407044:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  407054:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  407064:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  407074:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  407084:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  407094:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407118 <_init>:
  407118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40711a:	bf00      	nop
  40711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40711e:	bc08      	pop	{r3}
  407120:	469e      	mov	lr, r3
  407122:	4770      	bx	lr

00407124 <__init_array_start>:
  407124:	00405579 	.word	0x00405579

00407128 <__frame_dummy_init_array_entry>:
  407128:	00400165                                e.@.

0040712c <_fini>:
  40712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40712e:	bf00      	nop
  407130:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407132:	bc08      	pop	{r3}
  407134:	469e      	mov	lr, r3
  407136:	4770      	bx	lr

00407138 <__fini_array_start>:
  407138:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 6c18 0040 0706 7d20               .....l@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0e38 2040                                   8.@ 

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	6671 0040 6001 0040 0000 0000 7014 0040     qf@..`@......p@.
20400954:	7010 0040 6f24 0040 6f24 0040 6f24 0040     .p@.$o@.$o@.$o@.
20400964:	6f24 0040 6f24 0040 6f24 0040 6f24 0040     $o@.$o@.$o@.$o@.
20400974:	6f24 0040 6f24 0040 ffff ffff ffff ffff     $o@.$o@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
